<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Windows.Design.Interaction</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Windows.Design.DataContextValueSourceAttribute">
      <summary>Enables a designer to determine the data context inheritance in the visual tree for a particular property.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.DataContextValueSourceAttribute.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.DataContextValueSourceAttribute" /> class with the specified property name and collection information. </summary>
      <param name="dataContextValueSourceProperty">The name of the property that is the source of the data context’s value.</param>
      <param name="isCollectionItem">Indicates whether the data context is an item in a collection.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.DataContextValueSourceAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.DataContextValueSourceAttribute" /> class with the specified property name, ancestor path, and collection information. </summary>
      <param name="dataContextValueSourceProperty">The name of the property that is the source of the data context’s value.</param>
      <param name="ancestorPath">The property path that indicates the set of ancestor properties to traverse to reach the data context property.</param>
      <param name="isCollectionItem">Indicates whether the data context is an item in a collection.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.DataContextValueSourceAttribute.AncestorPath">
      <summary>Gets the property path that indicates the set of ancestor properties to traverse to reach the data context property. </summary>
      <returns>The path to the data context property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.DataContextValueSourceAttribute.DataContextValueSourceProperty">
      <summary>Gets the name of the property that is the source of the data context’s value.</summary>
      <returns>The name of the property that is the source of the data context’s value.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.DataContextValueSourceAttribute.IsCollectionItem">
      <summary>Gets a value that indicates whether the data context is an item in a collection. </summary>
      <returns>true if the data context is an item in a collection; otherwise, false. </returns>
    </member>
    <member name="T:Microsoft.Windows.Design.DisplayPropertyAttribute">
      <summary>Determines the property to use when displaying an instance of an object in a designer.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.DisplayPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.DisplayPropertyAttribute" /> class with the specified property name. </summary>
      <param name="displayPropertyName">The name of the property to use for display in a designer.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.DisplayPropertyAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.DisplayPropertyAttribute" /> class with the specified property name and value converter. </summary>
      <param name="displayPropertyName">The name of the property to use for display in a designer.</param>
      <param name="valueConverterType">The type of the value converter.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.DisplayPropertyAttribute.DisplayPropertyName">
      <summary>Gets the name of the property to use for display in a designer.</summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.DisplayPropertyAttribute.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.DisplayPropertyAttribute.GetHashCode">
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.DisplayPropertyAttribute.TypeId"></member>
    <member name="P:Microsoft.Windows.Design.DisplayPropertyAttribute.ValueConverterType">
      <summary>Gets the type of the value converter to use when displaying the property.</summary>
      <returns>The value converter type, or null if no value converter was specified.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.IToolboxExample">
      <summary>Specifies an example instance of an item in the toolbox of a visual designer. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.IToolboxExample.CreateExample(Microsoft.Windows.Design.EditingContext)">
      <summary>Creates an example instance of an item in the toolbox with preset properties.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that corresponds to the example instance.</returns>
      <param name="context">The editing context. </param>
    </member>
    <member name="P:Microsoft.Windows.Design.IToolboxExample.DisplayName">
      <summary>The localizable display name in the toolbox. </summary>
      <returns>The localizable display name in the toolbox. </returns>
    </member>
    <member name="M:Microsoft.Windows.Design.IToolboxExample.GetImageStream(System.Windows.Size)">
      <summary>Gets a stream for use by the <see cref="P:System.Windows.Media.Imaging.BitmapImage.StreamSource" /> property.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> that represents the toolbox bitmap of the example instance. </returns>
      <param name="desiredSize">The target size of the toolbox bitmap. </param>
    </member>
    <member name="T:Microsoft.Windows.Design.IToolboxExampleFactory">
      <summary>Provides a list of examples in an asset toolbox that reference the same <see cref="T:System.Type" />.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.IToolboxExampleFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.IToolboxExampleFactory" /> class. </summary>
    </member>
    <member name="P:Microsoft.Windows.Design.IToolboxExampleFactory.Examples">
      <summary>Gets a list of examples in an asset toolbox that reference the same <see cref="T:System.Type" />.</summary>
      <returns>An enumeration of <see cref="T:Microsoft.Windows.Design.IToolboxExample" /> objects.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.OrderToken">
      <summary>A generic class that identifies the sort order of hierarchical items.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.OrderToken.#ctor(Microsoft.Windows.Design.OrderTokenPrecedence,Microsoft.Windows.Design.OrderToken,Microsoft.Windows.Design.OrderTokenConflictResolution)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.OrderToken" /> class based on the specified referenced <see cref="T:Microsoft.Windows.Design.OrderToken" />, precedence, and conflict resolution semantics.</summary>
      <param name="precedence">Precedence of this token based on the referenced token.</param>
      <param name="reference">Referenced token. May be null for the root token case. A root token is a token that is not dependent on any token.</param>
      <param name="conflictResolution">Conflict resolution semantics. </param>
    </member>
    <member name="M:Microsoft.Windows.Design.OrderToken.CompareTo(Microsoft.Windows.Design.OrderToken)">
      <summary>Compares this order token with the specified order token. </summary>
      <returns>0 when the tokens have an equal order priority, -1 if this order comes before the specified order, 1 otherwise.</returns>
      <param name="other">The token to compare to this token.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.OrderToken.Equals(System.Object)">
      <param name="obj">The <see cref="T:Microsoft.Windows.Design.OrderToken" /> to compare with the current <see cref="T:Microsoft.Windows.Design.OrderToken" />. </param>
    </member>
    <member name="M:Microsoft.Windows.Design.OrderToken.GetHashCode"></member>
    <member name="M:Microsoft.Windows.Design.OrderToken.op_Equality(Microsoft.Windows.Design.OrderToken,Microsoft.Windows.Design.OrderToken)">
      <summary>Determines whether two specified order tokens are equal.</summary>
      <returns>true if <paramref name="first" /> equals <paramref name="second" />; otherwise, false.</returns>
      <param name="first">The first <see cref="T:Microsoft.Windows.Design.OrderToken" /> to compare.</param>
      <param name="second">The second <see cref="T:Microsoft.Windows.Design.OrderToken" /> to compare.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.OrderToken.op_GreaterThan(Microsoft.Windows.Design.OrderToken,Microsoft.Windows.Design.OrderToken)">
      <summary>Determines whether the first specified order token is greater than the second.</summary>
      <returns>true if <paramref name="first" /> is greater than <paramref name="second" />; otherwise, false.</returns>
      <param name="first">The first <see cref="T:Microsoft.Windows.Design.OrderToken" /> to compare.</param>
      <param name="second">The second <see cref="T:Microsoft.Windows.Design.OrderToken" /> to compare.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.OrderToken.op_Inequality(Microsoft.Windows.Design.OrderToken,Microsoft.Windows.Design.OrderToken)">
      <summary>Determines whether two specified order tokens are not equal.</summary>
      <returns>true if <paramref name="first" /> does not equal <paramref name="second" />; otherwise, false.</returns>
      <param name="first">The first <see cref="T:Microsoft.Windows.Design.OrderToken" /> to compare.</param>
      <param name="second">The second <see cref="T:Microsoft.Windows.Design.OrderToken" /> to compare.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.OrderToken.op_LessThan(Microsoft.Windows.Design.OrderToken,Microsoft.Windows.Design.OrderToken)">
      <summary>Determines whether the first specified order token is less than the second.</summary>
      <returns>true if <paramref name="first" /> is less than <paramref name="second" />; otherwise, false.</returns>
      <param name="first">The first <see cref="T:Microsoft.Windows.Design.OrderToken" /> to compare.</param>
      <param name="second">The second <see cref="T:Microsoft.Windows.Design.OrderToken" /> to compare.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.OrderToken.ResolveConflict(Microsoft.Windows.Design.OrderToken,Microsoft.Windows.Design.OrderToken)">
      <summary>Called by the default <see cref="M:Microsoft.Windows.Design.OrderToken.CompareTo(Microsoft.Windows.Design.OrderToken)" /> implementation when two <see cref="T:Microsoft.Windows.Design.OrderToken" /> objects appear to be equivalent. </summary>
      <returns>0, if the two are equal, -1, if left comes before right, 1 otherwise.</returns>
      <param name="left">Left <see cref="T:Microsoft.Windows.Design.OrderToken" />.</param>
      <param name="right">Right <see cref="T:Microsoft.Windows.Design.OrderToken" />.</param>
    </member>
    <member name="T:Microsoft.Windows.Design.OrderTokenConflictResolution">
      <summary>An enumeration used to specify the winner of ordering ties. </summary>
    </member>
    <member name="F:Microsoft.Windows.Design.OrderTokenConflictResolution.Win">
      <summary>Indicates that this token should win during conflicts. If two tokens are compared that are equivalent and both have their <see cref="T:Microsoft.Windows.Design.OrderTokenConflictResolution" /> set to <see cref="F:Microsoft.Windows.Design.OrderTokenConflictResolution.Win" />, they are considered equal.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.OrderTokenConflictResolution.Lose">
      <summary>Indicates that this token should lose during conflicts. </summary>
    </member>
    <member name="T:Microsoft.Windows.Design.OrderTokenPrecedence">
      <summary>An enumeration that specifies the precedence of order tokens. </summary>
    </member>
    <member name="F:Microsoft.Windows.Design.OrderTokenPrecedence.Before">
      <summary>Indicates that this token comes before.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.OrderTokenPrecedence.After">
      <summary>Indicates that this token comes after.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.ThumbnailAttribute">
      <summary>Associates an icon with a custom Windows Presentation Foundation (WPF) or Silverlight control in the toolbox for Visual Studio or Expression Blend. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.ThumbnailAttribute.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.ThumbnailAttribute" /> class. </summary>
      <param name="resourceAssemblyType">Specifies the assembly in which to look for the image. </param>
      <param name="resourceName">Specifies the fully-qualified name of the image, including the namespace.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.ThumbnailAttribute.ResourceAssembly">
      <summary>Gets the assembly that contains the icon image.</summary>
      <returns>The <see cref="T:System.Reflection.Assembly" /> that contains the icon image. </returns>
    </member>
    <member name="P:Microsoft.Windows.Design.ThumbnailAttribute.ResourceName">
      <summary>Gets name of the icon image.</summary>
      <returns>The fully-qualified name of the icon image.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.ToolboxBrowsableAttribute">
      <summary>Specifies whether a control is visible in a designer's toolbox browser. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.ToolboxBrowsableAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.ToolboxBrowsableAttribute" /> class.</summary>
      <param name="browsable">true to enable visibility for a control in a toolbox browser; otherwise, false. </param>
    </member>
    <member name="P:Microsoft.Windows.Design.ToolboxBrowsableAttribute.Browsable">
      <summary>Gets the <see cref="P:Microsoft.Windows.Design.ToolboxBrowsableAttribute.Browsable" /> flag associated with this attribute.</summary>
      <returns>true if a control is visible in the toolbox browser; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.ToolboxBrowsableAttribute.No">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.ToolboxBrowsableAttribute" /> with <see cref="P:Microsoft.Windows.Design.ToolboxBrowsableAttribute.Browsable" /> set to false.</summary>
      <returns>A pre-defined static instance of the <see cref="T:Microsoft.Windows.Design.ToolboxBrowsableAttribute" /> with <see cref="P:Microsoft.Windows.Design.ToolboxBrowsableAttribute.Browsable" /> set to false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.ToolboxBrowsableAttribute.Yes">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.ToolboxBrowsableAttribute" /> with <see cref="P:Microsoft.Windows.Design.ToolboxBrowsableAttribute.Browsable" /> set to true.</summary>
      <returns>A pre-defined static instance of the <see cref="T:Microsoft.Windows.Design.ToolboxBrowsableAttribute" /> with <see cref="P:Microsoft.Windows.Design.ToolboxBrowsableAttribute.Browsable" /> set to false.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.ToolboxCategoryAttribute">
      <summary>Specifies the category in which a class appears in a designer's toolbox. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.ToolboxCategoryAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.ToolboxCategoryAttribute" /> class with the specified category path. </summary>
      <param name="categoryPath">The path under which this class is categorized. Represents multiple levels by using the forward slash (/) as a delimiter.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.ToolboxCategoryAttribute.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.ToolboxCategoryAttribute" /> class with the specified category path and parent category visibility. </summary>
      <param name="categoryPath">The path under which this class is categorized. Represents multiple levels by using the forward slash (/) as a delimiter.</param>
      <param name="alwaysShows">true to indicate whether this class appears in all parent categories; otherwise, false. </param>
    </member>
    <member name="P:Microsoft.Windows.Design.ToolboxCategoryAttribute.AlwaysShows">
      <summary>Gets a value that indicates whether this class appears in all parent categories. </summary>
      <returns>true if this class appears in all parent categories; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.ToolboxCategoryAttribute.CategoryPath">
      <summary>Gets the path under which this class is categorized. </summary>
      <returns>The path under which this class is categorized.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.ToolboxExampleAttribute">
      <summary>Specifies the type that implements the <see cref="T:Microsoft.Windows.Design.IToolboxExampleFactory" /> interface.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.ToolboxExampleAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.ToolboxExampleAttribute" /> class. </summary>
      <param name="toolboxExampleFactoryType">A type that implements the <see cref="T:Microsoft.Windows.Design.IToolboxExampleFactory" /> interface.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.ToolboxExampleAttribute.ToolboxExampleFactoryType">
      <summary>Gets a <see cref="T:System.Type" /> that provides a list of examples in an asset toolbox that references the associated <see cref="T:System.Type" />. </summary>
      <returns>A <see cref="T:System.Type" /> that provides a list of examples in an asset toolbox that references the associated <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.ToolboxTabNameAttribute">
      <summary>Specifies the tab in which a class appears in a designer's toolbox. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.ToolboxTabNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.ToolboxTabNameAttribute" /> class. </summary>
      <param name="tabName">The name of the Visual Studio toolbox tab. </param>
    </member>
    <member name="F:Microsoft.Windows.Design.ToolboxTabNameAttribute.CommonTab">
      <summary>Specifies the Common tab of the toolbox.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.ToolboxTabNameAttribute.TabName">
      <summary>Gets the Visual Studio toolbox tab that is used when this item is installed.</summary>
      <returns>The name of the toolbox tab.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.Adapter">
      <summary>Used to adapt logic for a particular item. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.Adapter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.Adapter" /> class.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.Adapter.AdapterType">
      <summary>When overridden in a derived class, gets the type of adapter this object represents. </summary>
      <returns>A <see cref="T:System.Type" /> that represents the adapter type.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.AdornerColors">
      <summary>Provides a set of common brushes that can be used on adorners.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.AlignmentMarkBrush">
      <summary>Gets the brush used for the alignment marks.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> representing the standard brush for alignment marks in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.AlignmentMarkBrushKey">
      <summary>Gets a resource key for the color of alignment marks.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard brush for alignment marks in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.AlignmentMarkColor">
      <summary>Gets the color that is used for the alignment marks.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> representing the standard color for alignment marks in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.AlignmentMarkColorKey">
      <summary>Gets a resource key for the color of alignment marks.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard color for alignment marks in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.ElementBorderBrush">
      <summary>Gets the brush used for the borders of elements.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> representing the standard brush for elements in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.ElementBorderBrushKey">
      <summary>Gets a resource key for the brush of borders of elements.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard brush for elements in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.ElementBorderColor">
      <summary>Gets the color that is used for the borders of elements.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> representing the standard color for elements in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.ElementBorderColorKey">
      <summary>Gets a resource key for the color of borders of elements.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard color for elements in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.GlyphFillBrush">
      <summary>Gets the brush used for the fill of any glyph.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> representing the standard brush for glyphs in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.GlyphFillBrushKey">
      <summary>Gets a resource key for the brush used to fill a glyph.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard brush for glyphs in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.GlyphFillColor">
      <summary>Gets the color that is used for the fill of any glyph.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> representing the standard color for glyphs in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.GlyphFillColorKey">
      <summary>Gets a resource key for the color that is used to fill a glyph.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard color for glyphs in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleBorderBrush">
      <summary>Gets a brush to paint the border of a handle.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> representing the standard brush for handle borders in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleBorderBrushKey">
      <summary>Gets a resource key for the border brush of a handle.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard border brush for handles in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleBorderColor">
      <summary>Gets the color of a handle border.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> representing the standard color for handle borders in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleBorderColorKey">
      <summary>Gets a resource key for the color of a handle border.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard border color for handles in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleEmptyFillBrush">
      <summary>Gets the brush to paint the fill of a handle when it is not resizable.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> that represents the standard brush for a handle in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleEmptyFillBrushKey">
      <summary>Gets the resource key for the brush of a handle when it is not resizable.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary that represents the standard brush for a handle in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleEmptyFillColor">
      <summary>Gets the color of a handle when not it is not resizable.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> that represents the standard color for a handle in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleEmptyFillColorKey">
      <summary>Gets the resource key for the color of a handle when it is not resizable.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary that represents the standard color for a handle in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleFillBrush">
      <summary>Gets a brush to paint the fill of a handle.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> representing the standard brush for handles in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleFillBrushKey">
      <summary>Gets a resource key for the brush of a handle.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard brush for handles in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleFillColor">
      <summary>Gets the color of a handle.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> representing the standard color for handles in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleFillColorKey">
      <summary>Gets a resource key for the color of a handle.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard color for handles in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleFillHoverBrush">
      <summary>Gets a brush to paint the fill of a handle when the mouse pointer is over it.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> representing the standard brush for a handle when the mouse pointer is moved over it in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleFillHoverBrushKey">
      <summary>Gets a resource key for the brush of a handle when the mouse pointer is over it.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard brush for a handle when the mouse pointer is moved over it in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleFillHoverColor">
      <summary>Gets the color of a handle when the mouse pointer is over it.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> representing the standard color for a handle when the mouse pointer is moved over it in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleFillHoverColorKey">
      <summary>Gets a resource key for the color of a handle when the mouse pointer is over it.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard color for a handle when the mouse pointer is moved over it in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleFillPressedBrush">
      <summary>Gets a brush to paint the fill of a handle when it is pressed.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> representing the standard brush for a pressed handle in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleFillPressedBrushKey">
      <summary>Gets a resource key for the brush of a handle when it is pressed.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard brush for a pressed handle in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleFillPressedColor">
      <summary>Gets the color of a handle when it is pressed.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> representing the standard color for a pressed handle in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.HandleFillPressedColorKey">
      <summary>Gets a resource key for the color of a handle when it is pressed.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard color for a pressed handle in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.MoveHandleContentBrush">
      <summary>Gets the brush used for the content of a move handle.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> representing the standard brush for a move handle's content in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.MoveHandleContentBrushKey">
      <summary>Gets a resource key for the brush used for the content of a move handle.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard brush for the content of a move handle in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.MoveHandleContentColor">
      <summary>Gets the color that is used for the content of a move handle.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> representing the standard color for a move handle's content in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.MoveHandleContentColorKey">
      <summary>Gets a resource key for the color that is used for the content of a move handle.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard color for the content of a move handle in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.MoveHandleFillBrush">
      <summary>Gets the brush used for the fill of a move handle when the mouse pointer is not over it.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> representing the standard brush for move handles in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.MoveHandleFillBrushKey">
      <summary>Gets a resource key for the brush used for the fill of a move handle when the mouse pointer is not over it.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard brush for move handles in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.MoveHandleFillColor">
      <summary>Gets the color that is used for the fill of a move handle when the mouse pointer is not over it.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> representing the standard color for move handles content in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.MoveHandleFillColorKey">
      <summary>Gets a resource key for the color that is used for the fill of a move handle when the mouse pointer is not over it.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard color for move handles in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.MoveHandleFillHoverBrush">
      <summary>Gets the brush used for the fill of a move handle when the mouse pointer is over it.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> representing the standard brush for a move handle when the mouse pointer is moved over it in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.MoveHandleFillHoverBrushKey">
      <summary>Gets a resource key for the brush used for the fill of a move handle when the mouse pointer is over it.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard brush for a move handle when the mouse pointer is moved over it in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.MoveHandleFillHoverColor">
      <summary>Gets the color that is used for the fill of a move handle when the mouse pointer is over it.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> representing the standard color for a move handle when the mouse pointer is moved over it in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.MoveHandleFillHoverColorKey">
      <summary>Gets a resource key for the color that is used for the fill of a move handle when the mouse pointer is over it.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard color for a move handle when the mouse pointer is moved over it in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.RailFillBrush">
      <summary>Gets the fill brush for rails.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> representing the standard brush for rails in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.RailFillBrushKey">
      <summary>Gets a resource key for the brush used for rails.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard brush for rails in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.RailFillColor">
      <summary>Gets the fill color for rails.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> representing the standard color for rails in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.RailFillColorKey">
      <summary>Gets a resource key for the color that is used for rails.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard color for rails in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.SelectionFrameBorderBrush">
      <summary>Gets the brush used for the selection frame around controls.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> representing the standard brush for the selection frame in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.SelectionFrameBorderBrushKey">
      <summary>Gets a resource key for the brush used for the selection frame around controls.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard brush for the selection frame in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.SelectionFrameBorderColor">
      <summary>Gets the color that is used for the selection frame around controls.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> representing the standard color for the selection frame in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.SelectionFrameBorderColorKey">
      <summary>Gets a resource key for the color that is used for the selection frame around controls.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard color for the selection frame in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.SelectionFrameFillBrush">
      <summary>Gets the fill brush for the selection frame used on controls.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> representing the standard fill brush for the selection frame in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.SelectionFrameFillBrushKey">
      <summary>Gets a resource key for the brush used for the selection frame used on controls.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard fill brush for the selection frame in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.SelectionFrameFillColor">
      <summary>Gets the fill color for the selection frame used on controls.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> representing the standard fill color for the selection frame in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.SelectionFrameFillColorKey">
      <summary>Gets a resource key for the color that is used for the selection frame on controls.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard fill color for the selection frame in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.SimpleWashBrush">
      <summary>Gets a simple wash brush.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> representing the standard brush for a simple wash in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.SimpleWashBrushKey">
      <summary>Gets a resource key for the brush used for simple washes.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard brush for a simple wash in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.SimpleWashColor">
      <summary>Gets a simple wash color.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> representing the standard color for a simple wash in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.SimpleWashColorKey">
      <summary>Gets a resource key for the color that is used for simple washes.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard color for a simple wash in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.ToggledGlyphFillBrush">
      <summary>Gets the brush for a toggled glyph’s fill.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> representing the standard brush for a toggled glyph in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.ToggledGlyphFillBrushKey">
      <summary>Gets a resource key for the brush used for a toggled glyph's fill.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard brush for a toggled glyph in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.ToggledGlyphFillColor">
      <summary>Gets the color for a toggled glyph’s fill.</summary>
      <returns>A <see cref="T:System.Windows.Media.Color" /> representing the standard color for a toggled glyph in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerColors.ToggledGlyphFillColorKey">
      <summary>Gets a resource key for the color for a toggled glyph's fill.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard color for a toggled glyph in the WPF Designer.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.AdornerCoordinateSpace">
      <summary>Defines a 2D coordinate space for use in <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" />.  </summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.AdornerCoordinateSpaces">
      <summary>Defines the two common coordinate spaces used in the designer. </summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerCoordinateSpaces.Default">
      <summary>Gets the default coordinate space for adorners.</summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.Interaction.AdornerCoordinateSpace" /> specifying the default adorner space.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.AdornerFonts">
      <summary>Provides a set of common brushes that can be used on adorners.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerFonts.FontFamily">
      <summary>Gets a <see cref="T:System.Windows.Media.FontFamily" /> for the current item.</summary>
      <returns>A <see cref="T:System.Windows.Media.FontFamily" /> representing the standard font family in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerFonts.FontFamilyKey">
      <summary>Gets a resource key for the <see cref="T:System.Windows.Media.FontFamily" /> for the adorner.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard font family in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerFonts.FontSize">
      <summary>Gets the font size to paint the current <see cref="T:System.Windows.Media.FontFamily" />.</summary>
      <returns>A double representing the standard font size in the WPF Designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerFonts.FontSizeKey">
      <summary>Gets a resource key for the font size for the adorner.</summary>
      <returns>A <see cref="T:System.Windows.ResourceKey" /> for the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerResources" /> dictionary representing the standard font size in the WPF Designer.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.AdornerHorizontalAlignment">
      <summary>An enumeration that defines the horizontal alignment of an adorner relative to an element on a design surface. </summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerHorizontalAlignment.Left">
      <summary>The adorner is aligned to the left.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerHorizontalAlignment.Center">
      <summary>The adorner is centered.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerHorizontalAlignment.Right">
      <summary>The adorner is aligned to the right.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerHorizontalAlignment.Stretch">
      <summary>The adorner is stretched.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerHorizontalAlignment.OutsideLeft">
      <summary>The adorner is aligned to the left, on the outside.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerHorizontalAlignment.OutsideRight">
      <summary>The adorner is aligned to the right, on the outside.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.AdornerLayout">
      <summary>Performs the layout of an adorner on the <see cref="T:Microsoft.Windows.Design.Interaction.DesignerView" />. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerLayout.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerLayout" /> class. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerLayout.AdornerPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invoked on the adorner layout whenever one of the properties stored in the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerProperties" /> class changes. </summary>
      <param name="adorner">The adorner whose property has changed.</param>
      <param name="args">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />  that contains details of the property change.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerLayout.Arrange(System.Windows.UIElement)">
      <summary>Performs the layout arrangement on the specified adorner.</summary>
      <param name="adorner">The adorner to be arranged.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerLayout.ArrangeChildren(System.Windows.FrameworkElement,System.Windows.Controls.UIElementCollection,System.Windows.Size)">
      <summary>Performs the layout arrangement on the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" />.</summary>
      <returns>The size of the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" /> after the layout arrangement.</returns>
      <param name="parent">The parent <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" />.</param>
      <param name="internalChildren">The <see cref="T:System.Windows.Controls.UIElementCollection" /> in the parent.</param>
      <param name="finalSize">The final size that <paramref name="parent" /> wants the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" /> to assume. </param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerLayout.EvaluateLayout(Microsoft.Windows.Design.Interaction.DesignerView,System.Windows.UIElement)">
      <summary>Gets a value indicating whether the adorner remains in the UI tree. </summary>
      <returns>true if <paramref name="adorner" /> should remain in the UI tree. false if one or more visuals it is associated with are no longer part of the UI tree.</returns>
      <param name="view">The designer view that is evaluating the layout.</param>
      <param name="adorner">The adorner to be evaluated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="view" /> or <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerLayout.IsAssociated(System.Windows.UIElement,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Gets a value indicating whether the specified model item is associated with this adorner.  </summary>
      <returns>true if the adorner is associated with the specified model item.</returns>
      <param name="adorner">The adorner to check.</param>
      <param name="item">The item to compare.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> or <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerLayout.Measure(System.Windows.UIElement,System.Windows.Size)">
      <summary>Performs the layout measurement on the specified adorner. </summary>
      <param name="adorner">The adorner to be measured.</param>
      <param name="constraint">The constrained size of the adorner.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.AdornerOrder">
      <summary>Specifies the z-order of adorners in Design view. </summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerOrder.Background">
      <summary>Gets a value indicating that the adorner is placed after the content. </summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.Interaction.AdornerOrder" /> specifying the bottom of the z-order.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerOrder.Content">
      <summary>Gets a value indicating that the adorner is placed with other content adorners. This is the default.</summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.Interaction.AdornerOrder" /> specifying the z-order of the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" />.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerOrder.CreateAbove(Microsoft.Windows.Design.Interaction.AdornerOrder)">
      <summary>Creates a new adorner order that places the adorner above the provided reference in the z-order.</summary>
      <returns>A new <see cref="T:Microsoft.Windows.Design.Interaction.AdornerOrder" /> that places the adorner above adorners with the specified reference.</returns>
      <param name="reference">The <see cref="T:Microsoft.Windows.Design.Interaction.AdornerOrder" /> to place the adorner above.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reference" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerOrder.CreateBelow(Microsoft.Windows.Design.Interaction.AdornerOrder)">
      <summary>Creates a new adorner order that places the adorner below the provided reference in the z-order.</summary>
      <returns>A new <see cref="T:Microsoft.Windows.Design.Interaction.AdornerOrder" /> that places the adorner below adorners with the specified reference.</returns>
      <param name="reference">The <see cref="T:Microsoft.Windows.Design.Interaction.AdornerOrder" /> to place the adorner below.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reference" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerOrder.Foreground">
      <summary>Gets a value indicating that the adorner is placed before content adorners.</summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.Interaction.AdornerOrder" /> specifying the top of the z-order.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.AdornerPanel">
      <summary>Provides a container for Windows Presentation foundation (WPF) controls, which are used at design time as adorners. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" /> class.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerHorizontalAlignment">
      <summary>Gets or sets the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerHorizontalAlignment" /> value of a child element within a parent <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" />.</summary>
      <returns>The <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerHorizontalAlignment" /> of the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" />.</returns>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerHorizontalAlignmentProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerHorizontalAlignment" /> dependency property.</summary>
      <returns>Identifier for the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerHorizontalAlignment" /> dependency property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerMargin">
      <summary>Gets or sets the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerMargin" /> value of a child element within a parent <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" />.  </summary>
      <returns>A <see cref="T:System.Windows.Thickness" /> that represents the margin of the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" />.</returns>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerMarginProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerMargin" /> dependency property.</summary>
      <returns>Identifier for the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerMargin" /> dependency property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerVerticalAlignment">
      <summary>Gets or sets the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerVerticalAlignment" /> value of a child element within a parent <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" />.</summary>
      <returns>The <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerVerticalAlignment" /> of the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" />.</returns>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerVerticalAlignmentProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerVerticalAlignment" /> dependency property.</summary>
      <returns>Identifier for the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerVerticalAlignment" /> dependency property.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.ArrangeOverride(System.Windows.Size)">
      <returns>A <see cref="T:System.Windows.Size" /> object that represents the arranged size.</returns>
      <param name="finalSize">The final size allowed for the arrange.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.FromVisual(System.Windows.DependencyObject)">
      <summary>Returns the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" /> that is the parent of the specified <see cref="T:System.Windows.Media.Visual" />.</summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" /> that is the parent of the visual, or null if the visual does not have a parent view.</returns>
      <param name="visual">A <see cref="T:System.Windows.Media.Visual" /> or <see cref="T:System.Windows.Media.Media3D.Visual3D" /> that is a child of the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visual" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.GetAdornerHorizontalAlignment(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerHorizontalAlignment" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.  </summary>
      <returns>The <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerHorizontalAlignment" /> property value for <paramref name="obj" />. </returns>
      <param name="obj">The element from which the property value is read. </param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.GetAdornerMargin(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerMargin" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />. </summary>
      <returns>A <see cref="T:System.Windows.Thickness" /> that represents the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerMargin" /> for <paramref name="obj" />.</returns>
      <param name="obj">The element from which the property value is read.  </param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.GetAdornerVerticalAlignment(System.Windows.DependencyObject)">
      <summary>Gets the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerVerticalAlignment" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.  </summary>
      <returns>The <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerVerticalAlignment" /> property value for <paramref name="obj" />.</returns>
      <param name="obj">The element from which the property value is read. </param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.GetHorizontalStretch(System.Windows.UIElement)">
      <summary>Gets the value of the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.HorizontalStretch" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />. </summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.Interaction.AdornerStretch" /> for the adorner panel along the x-axis. The default value is <see cref="F:Microsoft.Windows.Design.Interaction.AdornerStretch.None" />. </returns>
      <param name="adorner">The <see cref="T:System.Windows.UIElement" /> from which to read the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.HorizontalStretch" /> attached property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.GetLayoutClip(System.Windows.Size)">
      <summary>Returns the layout clip of the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" />.</summary>
      <returns>A <see cref="T:System.Windows.Media.Geometry" /> that represents the layout clip of the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" />.</returns>
      <param name="layoutSlotSize">The size of the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.GetPlacements(System.Windows.UIElement)">
      <summary>Note: This API is now obsolete. Gets the value of the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.Placements" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />. </summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection" /> which holds <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPlacementValue" /> objects representing <paramref name="adorner" />'s size and position. </returns>
      <param name="adorner">The <see cref="T:System.Windows.UIElement" /> to get placements for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.GetTask(System.Windows.UIElement)">
      <summary>Reads the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerProperties.Task" /> attached property from the specified element. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.Task" /> that represents the task associated with <paramref name="adorner" />.</returns>
      <param name="adorner">The <see cref="T:System.Windows.UIElement" /> from which to read the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerProperties.Task" /> attached property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.GetVerticalStretch(System.Windows.UIElement)">
      <summary>Gets the value of the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.VerticalStretch" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />. </summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.Interaction.AdornerStretch" /> for the adorner panel along the y-axis. The default value is <see cref="F:Microsoft.Windows.Design.Interaction.AdornerStretch.None" />. </returns>
      <param name="adorner">The <see cref="T:System.Windows.UIElement" /> from which to read the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.VerticalStretch" /> attached property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerPanel.HorizontalStretch">
      <summary>Gets or sets the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerStretch" /> value for the x-axis. </summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.Interaction.AdornerStretch" /> for the adorner panel along the x-axis. The default value is <see cref="F:Microsoft.Windows.Design.Interaction.AdornerStretch.None" />. </returns>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerPanel.HorizontalStretchProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.HorizontalStretch" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.HorizontalStretch" /> dependency property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerPanel.IsContentFocusable">
      <summary>Gets or sets the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.IsContentFocusable" /> value. </summary>
      <returns>true if the adorner panel's content may receive focus; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerPanel.IsContentFocusableProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.IsContentFocusable" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.IsContentFocusable" /> dependency property.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.MeasureOverride(System.Windows.Size)">
      <summary>Measure adorner. </summary>
      <returns>A Size object that represents the size of the element.</returns>
      <param name="availableSize">The available size the element can occupy.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerPanel.Model">
      <summary>Gets or sets the <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> associated with the adorner panel. </summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> associated with the adorner panel. </returns>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerPanel.ModelProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.Model" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.Model" /> dependency property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerPanel.OffsetRect">
      <summary>Get or sets the rectangle that defines the adorner panel offset from the adorned control. </summary>
      <returns>A rectangle that defines the adorner panel offset from the adorned control.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class..</summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerPanel.Order">
      <summary>Gets or sets the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.Order" /> value.</summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.Interaction.AdornerOrder" /> instance that specifies the z-order of the adorner panel. </returns>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerPanel.OrderProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.Order" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.Order" /> dependency property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerPanel.Placements">
      <summary>Note: This API is now obsolete. Gets or sets a collection of <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPlacementValue" /> objects specifying the size and position of adorners in the adorner panel. </summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection" /> which holds <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPlacementValue" /> objects representing <paramref name="adorner" />'s size and position. </returns>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerPanel.PlacementsProperty">
      <summary>Note: This API is now obsolete. Identifies the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.Placements" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.Placements" /> dependency property.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.SetAdornerHorizontalAlignment(System.Windows.DependencyObject,Microsoft.Windows.Design.Interaction.AdornerHorizontalAlignment)">
      <summary>Sets the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerHorizontalAlignment" /> attached property for the provided element. </summary>
      <param name="obj">The element to which the attached property is written.</param>
      <param name="value">
        <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerHorizontalAlignment" /> to be set to the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.SetAdornerMargin(System.Windows.DependencyObject,System.Windows.Thickness)">
      <summary>Sets the specified <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerMargin" /> attached property for the provided element.</summary>
      <param name="obj">The element to which the attached property is written. </param>
      <param name="value">The <see cref="T:System.Windows.Thickness" /> of the margin to be set to the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.SetAdornerVerticalAlignment(System.Windows.DependencyObject,Microsoft.Windows.Design.Interaction.AdornerVerticalAlignment)">
      <summary>Sets the specified <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerVerticalAlignment" /> attached property for the provided element.  </summary>
      <param name="obj">The element to which the attached property is written.</param>
      <param name="value">The <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.AdornerVerticalAlignment" /> to be set to the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.SetHorizontalStretch(System.Windows.UIElement,Microsoft.Windows.Design.Interaction.AdornerStretch)">
      <summary>Sets the value of the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.HorizontalStretch" /> attached property for the provided element. </summary>
      <param name="adorner">The <see cref="T:System.Windows.UIElement" /> to which the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.HorizontalStretch" /> attached property is written.</param>
      <param name="value">The <see cref="T:Microsoft.Windows.Design.Interaction.AdornerStretch" /> value for the horizontal dimension.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.SetPlacements(System.Windows.UIElement,Microsoft.Windows.Design.Interaction.AdornerPlacementCollection)">
      <summary>Note: This API is now obsolete. Sets the value of the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.Placements" /> attached property for the provided element. </summary>
      <param name="adorner">The <see cref="T:System.Windows.UIElement" /> to which the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.HorizontalStretch" /> attached property is written.</param>
      <param name="value">An <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection" /> which holds <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPlacementValue" /> objects representing <paramref name="adorner" />'s size and position.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.SetTask(System.Windows.UIElement,Microsoft.Windows.Design.Interaction.Task)">
      <summary>Writes the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerProperties.Task" /> attached property to the specified element. </summary>
      <param name="adorner">The element to which the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerProperties.Task" /> attached property is written.</param>
      <param name="value">The <see cref="T:Microsoft.Windows.Design.Interaction.Task" /> to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPanel.SetVerticalStretch(System.Windows.UIElement,Microsoft.Windows.Design.Interaction.AdornerStretch)">
      <summary>Sets the value of the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.VerticalStretch" /> attached property for the provided element. </summary>
      <param name="adorner">The element to which the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.VerticalStretch" /> attached property is written.</param>
      <param name="value">The <see cref="T:Microsoft.Windows.Design.Interaction.AdornerStretch" /> value for the vertical dimension.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerPanel.UseMirrorTransform">
      <summary>Determines whether to use the mirror transform.</summary>
      <returns>true if mirror transform is being used; otherwise, false. Always returns true.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerPanel.VerticalStretch">
      <summary>Gets or sets the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerStretch" /> value for the y-axis. </summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.Interaction.AdornerStretch" /> for the adorner panel along the y-axis. The default value is <see cref="F:Microsoft.Windows.Design.Interaction.AdornerStretch.None" />. </returns>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerPanel.VerticalStretchProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.VerticalStretch" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerPanel.VerticalStretch" /> dependency property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerPanel.View">
      <summary>Gets or sets the adorner panel's associated view. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> that represents the associated view.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection">
      <summary>Enables precise placement of adorners within an <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPanel" />.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection" /> class. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection.PositionRelativeToAdornerHeight(System.Double,System.Double)">
      <summary>Adds a placement term that positions the adorner panel relative to the adorner's height.</summary>
      <param name="factor">A factor that is multiplied against the adorner's height.</param>
      <param name="offset">An offset that is added to the result.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection.PositionRelativeToAdornerHeight(System.Double,System.Double,System.Windows.DependencyObject)">
      <summary>Adds a placement term that positions the adorner panel relative to the specified adorner's height.</summary>
      <param name="factor">A factor that is multiplied against the adorner's height.</param>
      <param name="offset">An offset that is added to the result.</param>
      <param name="relativeTo">An optional adorner. If provided, the position is relative to the adorner's height.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection.PositionRelativeToAdornerWidth(System.Double,System.Double)">
      <summary>Adds a placement term that positions the adorner panel relative to the adorner's width.</summary>
      <param name="factor">A factor that is multiplied against the adorner's width.</param>
      <param name="offset">An offset that is added to the result.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection.PositionRelativeToAdornerWidth(System.Double,System.Double,System.Windows.DependencyObject)">
      <summary>Adds a placement term that positions the adorner panel relative to the specified adorner's width.</summary>
      <param name="factor">A factor that is multiplied against the adorner's width.</param>
      <param name="offset">An offset that is added to the result.</param>
      <param name="relativeTo">An optional adorner. If provided, the position is relative to the adorner's width.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection.PositionRelativeToContentHeight(System.Double,System.Double)">
      <summary>Adds a placement term that positions the adorner panel relative to the adorned content's height.</summary>
      <param name="factor">A factor that is multiplied against the adorned content's height.</param>
      <param name="offset">An offset that is added to the result.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection.PositionRelativeToContentHeight(System.Double,System.Double,Microsoft.Windows.Design.Interaction.ViewItem)">
      <summary>Adds a placement term to this group that positions the adorner panel relative to the content's height.</summary>
      <param name="factor">A factor that is multiplied against the content's height.</param>
      <param name="offset">An offset that is added to the result.</param>
      <param name="relativeTo">If provided, the position is relative to the element's height, rather than the height of the content. This an optional element.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection.PositionRelativeToContentWidth(System.Double,System.Double)">
      <summary>Adds a placement term that positions the adorner panel relative to the adorned content's width.</summary>
      <param name="factor">A factor that is multiplied against the adorned content's width.</param>
      <param name="offset">An offset that is added to the result.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection.PositionRelativeToContentWidth(System.Double,System.Double,Microsoft.Windows.Design.Interaction.ViewItem)">
      <summary>Adds a placement term to this group that positions the adorner panel relative to the content's width.</summary>
      <param name="factor">A factor that is multiplied against the content's width.</param>
      <param name="offset">An offset that is added to the result.</param>
      <param name="relativeTo">If provided, the position is relative to the element's width, rather than the width of the content. This is an optional element.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection.SizeRelativeToAdornerDesiredHeight(System.Double,System.Double)">
      <summary>Adds a placement term that sizes the adorner panel relative to the adorner's desired height.</summary>
      <param name="factor">A factor that is multiplied against the adorner's desired height.</param>
      <param name="offset">An offset that is added to the result.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection.SizeRelativeToAdornerDesiredHeight(System.Double,System.Double,System.Windows.DependencyObject)">
      <summary>Add a placement term that sizes the adorner panel relative to the specified adorner's desired height.</summary>
      <param name="factor">A factor that is multiplied against the specified adorner's desired height.</param>
      <param name="offset">An offset that is added to the result.</param>
      <param name="relativeTo">An optional adorner. If provided, the size is relative to the adorner's height.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection.SizeRelativeToAdornerDesiredWidth(System.Double,System.Double)">
      <summary>Adds a placement term that sizes the adorner panel relative to the adorner's desired width.</summary>
      <param name="factor">A factor that is multiplied against the adorner's desired width.</param>
      <param name="offset">An offset that is added to the result.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection.SizeRelativeToAdornerDesiredWidth(System.Double,System.Double,System.Windows.DependencyObject)">
      <summary>Adds a placement term that sizes the adorner panel relative to the specified adorner's desired width.</summary>
      <param name="factor">A factor that is multiplied against the adorner's desired width.</param>
      <param name="offset">An offset that is added to the result.</param>
      <param name="relativeTo">An optional adorner. If provided, the size is relative to the adorner's width.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection.SizeRelativeToContentHeight(System.Double,System.Double)">
      <summary>Adds a placement term that sizes the adorner panel relative to the adorned content's height.</summary>
      <param name="factor">A factor that is multiplied against the content's height.</param>
      <param name="offset">An offset that is added to the result.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection.SizeRelativeToContentHeight(System.Double,System.Double,Microsoft.Windows.Design.Interaction.ViewItem)">
      <summary>Adds a placement term to this group that sizes the adorner panel relative to the content's height.</summary>
      <param name="factor">A factor that is multiplied against the content's height.</param>
      <param name="offset">An offset that is added to the result.</param>
      <param name="relativeTo">If provided, the size is relative to the element's height. This is an optional element. </param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection.SizeRelativeToContentWidth(System.Double,System.Double)">
      <summary>Adds a placement term that sizes the adorner panel relative to the adorned content's width.</summary>
      <param name="factor">A factor that is multiplied against the content's width.</param>
      <param name="offset">An offset that is added to the result.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection.SizeRelativeToContentWidth(System.Double,System.Double,Microsoft.Windows.Design.Interaction.ViewItem)">
      <summary>Adds a placement term to this group that sizes the adorner panel relative to the content's width.</summary>
      <param name="factor">A factor that is multiplied against the content's width.</param>
      <param name="offset">An offset that is added to the result.</param>
      <param name="relativeTo">If provided, the size is relative to the element's width. This is an optional element. </param>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.AdornerPlacementDimension">
      <summary>An enumeration that defines the dimension that should be applied to an <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPlacementValue" /> structure.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerPlacementDimension.Left">
      <summary>The left side.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerPlacementDimension.Top">
      <summary>The top side.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerPlacementDimension.Right">
      <summary>The right side.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerPlacementDimension.Bottom">
      <summary>The bottom side.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerPlacementDimension.Width">
      <summary>The width.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerPlacementDimension.Height">
      <summary>The height.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.AdornerPlacementValue">
      <summary>Represents a single value in an <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection" />. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementValue.#ctor(Microsoft.Windows.Design.Interaction.AdornerPlacementDimension,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPlacementValue" /> class.</summary>
      <param name="term">The term that should be applied to this value.</param>
      <param name="contribution">The contribution this value makes to the overall placement.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerPlacementValue.Contribution">
      <summary>Gets or sets the distance the placement term is affected by.</summary>
      <returns>A double that is the distance the placement term is affected by.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementValue.Equals(Microsoft.Windows.Design.Interaction.AdornerPlacementValue)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPlacementValue" />.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="value">The value to test.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementValue.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">The object to test.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementValue.GetHashCode">
      <summary>Returns the hash code for this structure.</summary>
      <returns>The hash code of the structure.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementValue.op_Equality(Microsoft.Windows.Design.Interaction.AdornerPlacementValue,Microsoft.Windows.Design.Interaction.AdornerPlacementValue)">
      <summary>Determines whether the two specified <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPlacementValue" /> objects have the same value.</summary>
      <returns>true if the values are equal; otherwise, false.</returns>
      <param name="placementValue1">The first value to test.</param>
      <param name="placementValue2">The second value to test.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerPlacementValue.op_Inequality(Microsoft.Windows.Design.Interaction.AdornerPlacementValue,Microsoft.Windows.Design.Interaction.AdornerPlacementValue)">
      <summary>Determines whether the two specified <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPlacementValue" /> objects have different values.</summary>
      <returns>true if the values are not equal; otherwise, false.</returns>
      <param name="placementValue1">The first value to test.</param>
      <param name="placementValue2">The second value to test.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerPlacementValue.Term">
      <summary>Gets or sets the placement term affected by this contribution amount.</summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPlacementDimension" /> that is the placement term affected by this contribution amount.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.AdornerProperties">
      <summary>Defines a set of attached properties for a UI element to enable adorner appearance and behavior. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerProperties.GetLayout(System.Windows.DependencyObject)">
      <summary>Gets a layout that is used to arrange the adorner with regard to its model or view.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Interaction.AdornerLayout" /> for <paramref name="adorner" />.</returns>
      <param name="adorner">The adorner element to retrieve the layout for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerProperties.GetModel(System.Windows.DependencyObject)">
      <summary>Gets the model item associated with the specified adorner.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> associated with <paramref name="adorner" />.</returns>
      <param name="adorner">The adorner element to retrieve the model item for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerProperties.GetOrder(System.Windows.DependencyObject)">
      <summary>Gets the relative z-order of the specified adorner.</summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.Interaction.AdornerOrder" /> specifying the relative z-order of <paramref name="adorner" />.</returns>
      <param name="adorner">The adorner element to retrieve the order for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerProperties.GetRenderTransform(System.Windows.DependencyObject)">
      <summary>Gets the render transform for the adorner.</summary>
      <returns>The render transform associated with <paramref name="adorner" />, or null if no view has been set.</returns>
      <param name="adorner">The adorner element to retrieve the render transform for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerProperties.GetTask(System.Windows.DependencyObject)">
      <summary>Gets the task for the specified adorner.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Interaction.Task" /> associated with <paramref name="adorner" />.</returns>
      <param name="adorner">The adorner element to retrieve the task for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerProperties.GetView(System.Windows.DependencyObject)">
      <summary>Gets the view for the specified adorner.</summary>
      <returns>The view associated with <paramref name="adorner" />, or null if no view has been set.</returns>
      <param name="adorner">The adorner element to retrieve the task for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerProperties.Layout">
      <summary>Gets a layout that is used to arrange the adorner with regard to its model or view. This is an attached property.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Interaction.AdornerLayout" /> for the adorner.</returns>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerProperties.LayoutProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerProperties.Layout" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerProperties.Layout" /> attached property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerProperties.Model">
      <summary>Gets the model item associated with the adorner. This is an attached property.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> associated with the adorner.</returns>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerProperties.ModelProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerProperties.Model" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerProperties.Model" /> attached property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerProperties.Order">
      <summary>Gets the relative z-order of the adorner. This is an attached property.</summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.Interaction.AdornerOrder" /> specifying the relative z-order of the adorner.</returns>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerProperties.OrderProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerProperties.Order" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerProperties.Order" /> attached property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerProperties.RenderTransform">
      <summary>Gets or sets the render transform for the adorner. This is an attached property.</summary>
      <returns>The render transform associated with the adorner, or null if no render transform has been set.</returns>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerProperties.RenderTransformProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerProperties.RenderTransform" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerProperties.RenderTransform" /> attached property.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerProperties.SetLayout(System.Windows.DependencyObject,Microsoft.Windows.Design.Interaction.AdornerLayout)">
      <summary>Sets the layout for the specified adorner. </summary>
      <param name="adorner">The adorner element to set the layout for.</param>
      <param name="value">The <see cref="T:Microsoft.Windows.Design.Interaction.AdornerLayout" /> to associate with <paramref name="adorner" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerProperties.SetModel(System.Windows.DependencyObject,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Sets the model item associated with the specified adorner.</summary>
      <param name="adorner">The adorner element to set the model for.</param>
      <param name="value">The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" />  to associate with <paramref name="adorner" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerProperties.SetOrder(System.Windows.DependencyObject,Microsoft.Windows.Design.Interaction.AdornerOrder)">
      <summary>Sets the relative z-order of the specified adorner.</summary>
      <param name="adorner">The adorner element to set the model for.</param>
      <param name="value">An <see cref="T:Microsoft.Windows.Design.Interaction.AdornerOrder" /> specifying the relative z-order of <paramref name="adorner" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerProperties.SetRenderTransform(System.Windows.DependencyObject,System.Windows.Media.Transform)"></member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerProperties.SetTask(System.Windows.DependencyObject,Microsoft.Windows.Design.Interaction.Task)">
      <summary>Sets the task for the specified adorner.</summary>
      <param name="adorner">The adorner element to set the task for.</param>
      <param name="value">The <see cref="T:Microsoft.Windows.Design.Interaction.Task" /> to associate with <paramref name="adorner" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerProperties.Task">
      <summary>Gets the task for the specified adorner. This is an attached property.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Interaction.Task" /> associated with the adorner.</returns>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerProperties.TaskProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerProperties.Task" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.Interaction.AdornerProperties.Task" /> attached property.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.AdornerProvider">
      <summary>A feature provider that you can add to a class to automatically add adorners to the designer surface. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.AdornerProvider" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerProvider.Activate(Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Called when adorners are requested for the first time by the designer.</summary>
      <param name="item">A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> representing the adorned element.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerProvider.Adorners">
      <summary>Gets the collection of adorners that are provided by this adorner provider.</summary>
      <returns>A collection of <see cref="T:System.Windows.UIElement" /> objects that have adorner attached properties.  </returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerProvider.AdornersVisible">
      <summary>Gets or sets the visibility of a set of adorners.</summary>
      <returns>true if the adorners are added to the designer view. false if the adorners are removed from the designer view.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.AdornerProvider.Context">
      <summary>Gets the editing context that activated this adorner provider. </summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.EditingContext" /> that activated this adorner provider.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerProvider.Deactivate">
      <summary>Called when an adorner provider is about to be discarded by the designer. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerProvider.IsToolSupported(Microsoft.Windows.Design.Interaction.Tool)">
      <summary>Gets a value indicating if the adorner provider supports the provided <see cref="T:Microsoft.Windows.Design.Interaction.Tool" />.</summary>
      <returns>true if the adorner provider supports <paramref name="tool" />; otherwise, false.</returns>
      <param name="tool">The <see cref="T:Microsoft.Windows.Design.Interaction.Tool" /> to be checked.</param>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.AdornerResources">
      <summary>Used to define a set of resources that can be used in XAML. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerResources.CreateResourceKey(System.Type,System.String)">
      <summary>Creates a resource key for the specified type and member name. </summary>
      <returns>A new resource key.</returns>
      <param name="owningType">The type that owns this resource.</param>
      <param name="publicMember">The name of the public static member that exposes this resource.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owningType" /> or <paramref name="publicMember" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerResources.FindResource(System.Windows.ResourceKey)">
      <summary>Locates a resource with the specified key.</summary>
      <returns>The resource that corresponds with <paramref name="key" />.</returns>
      <param name="key">The resource key to find.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.Windows.ResourceReferenceKeyNotFoundException">
        <paramref name="key" /> does not have a resource.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerResources.Refresh">
      <summary>Updates the adorner resource dictionary.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerResources.RegisterResources(Microsoft.Windows.Design.Interaction.LoadResourcesCallback)">
      <summary>Registers a callback that can provide a resource dictionary. </summary>
      <param name="callback">A callback used to return the resource dictionary.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.AdornerResources.TryFindResource(System.Windows.ResourceKey)">
      <summary>Locates a resource with the specified key.</summary>
      <returns>The resource if it exists.-or-null if the specified resource does not exist.</returns>
      <param name="key">The key of the resource to find.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.AdornerStretch">
      <summary>An enumeration used to identify how the particular dimension (X or Y) of an adorner behaves when Design view is scaled.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerStretch.None">
      <summary>The dimension remains the same during scaling. Therefore, the adorner does not change size or scale during scaling.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerStretch.Stretch">
      <summary>The dimension stretches during scaling. Therefore, the adorner gets larger, but the stroke of rendered elements/lines/pens does not increase.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.AdornerVerticalAlignment">
      <summary>An enumeration that defines the vertical alignment of an adorner relative to an element on a design surface. </summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerVerticalAlignment.Top">
      <summary>The adorner is aligned to the top.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerVerticalAlignment.Center">
      <summary>The adorner is centered.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerVerticalAlignment.Bottom">
      <summary>The adorner is aligned to the bottom.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerVerticalAlignment.Stretch">
      <summary>The adorner is stretched.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerVerticalAlignment.OutsideTop">
      <summary>The adorner is aligned to the top, on the outside.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.AdornerVerticalAlignment.OutsideBottom">
      <summary>The adorner is aligned to the bottom, on the outside.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Windows.Design.Interaction.ToolCommandBinding.CanExecute" /> event. </summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs.CanExecute">
      <summary>Get or sets whether the command can be executed.</summary>
      <returns>true if the command can be executed; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs.Command">
      <summary>Gets the command associated with this <see cref="T:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs" />.</summary>
      <returns>An <see cref="T:System.Windows.Input.ICommand" /> that represents a command associated with this <see cref="T:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs.Parameter">
      <summary>Gets the parameter associated with this <see cref="T:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs" />.</summary>
      <returns>An object that represents the parameter associated with this <see cref="T:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs" />. The return value may be null.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.CanExecuteToolEventHandler">
      <summary>Represents the method that will handle the <see cref="E:Microsoft.Windows.Design.Interaction.ToolCommandBinding.CanExecute" /> events for tool commands.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.CommandExceptionEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Windows.Design.Interaction.DesignerView.CommandException" /> event defined on the <see cref="T:Microsoft.Windows.Design.Interaction.DesignerView" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.CommandExceptionEventArgs.#ctor(System.Windows.Input.ICommand,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.CommandExceptionEventArgs" /> class.</summary>
      <param name="command">The command that raised the exception.</param>
      <param name="exception">The exception that the command threw.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="command" /> or <paramref name="exception" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.CommandExceptionEventArgs.Command">
      <summary>Gets the command that was passed to the constructor.</summary>
      <returns>An <see cref="T:System.Windows.Input.ICommand" /> that represents the command that was passed to the constructor.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.CommandExceptionEventArgs.Exception">
      <summary>Gets the exception that was passed into the constructor.</summary>
      <returns>An <see cref="T:System.Exception" /> that was passed into the constructor.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.ContextMenuProvider">
      <summary>Defines a set of menu items that are shown in a context menu.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ContextMenuProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.ContextMenuProvider" /> class.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ContextMenuProvider.Items">
      <summary>Gets the items to add to the context menu.</summary>
      <returns>An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> of <see cref="T:Microsoft.Windows.Design.Interaction.MenuBase" /> items.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ContextMenuProvider.Update(Microsoft.Windows.Design.EditingContext)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.Interaction.ContextMenuProvider.UpdateItemStatus" /> event so the visibility and enabled status of menu items can be refreshed.</summary>
      <param name="context">The <see cref="T:Microsoft.Windows.Design.EditingContext" /> to send in the <see cref="T:Microsoft.Windows.Design.Interaction.MenuActionEventArgs" />. </param>
    </member>
    <member name="E:Microsoft.Windows.Design.Interaction.ContextMenuProvider.UpdateItemStatus">
      <summary>Occurs when the menu item is about to be shown.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.CreationCommands">
      <summary>Represents a set of static command definitions for tool creation commands.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.CreationCommands.Create">
      <summary>Gets a command identifier for creating new objects. </summary>
      <returns>A command identifier for creating new objects.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.CreationCommands.CreateAt">
      <summary>Gets a tool command identifier for creating new objects at the current position. </summary>
      <returns>A tool command identifier for creating new objects at the current position.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.CreationCommands.CreateWithin">
      <summary>Gets a tool command identifier for creating new objects within gesture positions. </summary>
      <returns>A tool command identifier for creating new objects within gesture positions.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.CreationTool">
      <summary>A tool that is used to create new instances of objects on the designer.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.CreationTool.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.CreationTool" /> class.</summary>
    </member>
    <member name="E:Microsoft.Windows.Design.Interaction.CreationTool.CreationComplete">
      <summary>Occurs when the tool completes the creation of its object. </summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.CreationTool.CreationType">
      <summary>Gets or sets the type of object this tool should create. </summary>
      <returns>A <see cref="T:System.Type" /> object representing the type of object this tool should create. For example, if this tool is to create a button, this property should be typeof(Button).</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.CreationTool.OnCreationComplete(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.Interaction.CreationTool.CreationComplete" /> event.</summary>
      <param name="e">The event to give to the creation complete event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.CreationTool.PerformCreationComplete">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.Interaction.CreationTool.CreationComplete" /> event.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.CreationToolAttribute">
      <summary>Identifies the creation tool that should be used to create an instance of a specified type.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.CreationToolAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.CreationToolAttribute" /> class.</summary>
      <param name="toolType">The type of tool this attribute describes. You can specify null to prevent a <see cref="T:Microsoft.Windows.Design.Interaction.CreationTool" /> base class from surfacing.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toolType" /> does not derive from <see cref="T:Microsoft.Windows.Design.Interaction.CreationTool" />.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.CreationToolAttribute.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <returns>true if the object is equal to this object; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.CreationToolAttribute.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>An integer hash code.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.CreationToolAttribute.ToolType">
      <summary>Gets the <see cref="T:Microsoft.Windows.Design.Interaction.CreationTool" /> type to instantiate.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the type of the <see cref="T:Microsoft.Windows.Design.Interaction.CreationTool" /> to be instantiated.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.CurrentDesignerView">
      <summary>A context item that is used to store and report the current designer view that is being used in the editing context. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.CurrentDesignerView.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.CurrentDesignerView" /> class.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.CurrentDesignerView.ItemType">
      <summary>Gets the item type of this item. </summary>
      <returns>A <see cref="T:System.Type" /> that represents the type of this item.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.CurrentDesignerView.View">
      <summary>Gets the designer view that is currently being used. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.DesignerView" /> that is currently being used; or null if no view has been installed yet.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.DesignerCommands">
      <summary>Represents commands associated with a designer.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.DesignerCommands.Cancel">
      <summary>Gets a command that cancels the current operation.</summary>
      <returns>A command that cancels the current operation.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.DesignerView">
      <summary>Provides a visual design surface for the designer.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.DesignerView.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.DesignerView" /> class.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.DesignerView.Adorners">
      <summary>Gets the collection of adorners on this view.</summary>
      <returns>A collection of all adorner panels on the design surface. </returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.DesignerView.AdornersVisible">
      <summary>Gets or sets a value that indicates whether the adorners on the designer view are visible or hidden. </summary>
      <returns>true if adorners are visible; otherwise, false. </returns>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.DesignerView.AdornersVisibleProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.Interaction.DesignerView.AdornersVisible" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.Interaction.DesignerView.AdornersVisible" /> dependency property.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.DesignerView.ArrangeOverride(System.Windows.Size)">
      <summary>
        <see cref="T:Microsoft.Windows.Design.Interaction.DesignerView" /> overrides <see cref="M:Microsoft.Windows.Design.Interaction.DesignerView.ArrangeOverride(System.Windows.Size)" /> so it can make sure that all the layers it maintains are the same size as the view.</summary>
      <returns>A <see cref="T:System.Windows.Size" /> object that represents the arranged size.</returns>
      <param name="arrangeSize">The final size allowed for the arrange.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.DesignerView.Child">
      <summary>Gets or sets the root element of the designer's UI.</summary>
      <returns>The root <see cref="T:System.Windows.UIElement" /> of the designer's UI.</returns>
    </member>
    <member name="E:Microsoft.Windows.Design.Interaction.DesignerView.CommandException">
      <summary>Occurs when an exception is raised in a command. </summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.DesignerView.Context">
      <summary>Gets or sets the editing context for this view. </summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.EditingContext" /> associated with the view.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.DesignerView.DesignerView">
      <summary>Gets or sets the designer view attached property. </summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Interaction.DesignerView" /> for the UI tree.</returns>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.DesignerView.DesignerViewProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.Interaction.DesignerView.DesignerView" /> dependency property.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.DesignerView.FromContext(Microsoft.Windows.Design.EditingContext)">
      <summary>Returns the designer view stored in the specified context.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.DesignerView" /> stored in <paramref name="context" />, or null if a view does not exist.</returns>
      <param name="context">The editing context to retrieve the designer view from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.DesignerView.GetDesignerView(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:Microsoft.Windows.Design.Interaction.DesignerView.DesignerView" /> attached property for the specified element.</summary>
      <returns>The <see cref="P:Microsoft.Windows.Design.Interaction.DesignerView.DesignerView" /> attached property for <paramref name="element" />.</returns>
      <param name="element">The element in the tree to return the designer view for.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.DesignerView.GetVisualChild(System.Int32)">
      <summary>Returns the visual children of the designer view.</summary>
      <returns>A <see cref="T:System.Windows.Media.Visual" /> at the specified index.</returns>
      <param name="index">The zero-based index of the visual child collection.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.DesignerView.GetZoomTransform">
      <summary>Represents the zoom transform that is to the <see cref="T:Microsoft.Windows.Design.Interaction.DesignerView" />.</summary>
      <returns>The <see cref="T:System.Windows.Media.Transform" /> that represents the zoom factor. </returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.DesignerView.IsContentHitTestVisible">
      <summary>Gets or sets whether the content of the <see cref="T:Microsoft.Windows.Design.Interaction.DesignerView" /> is hit-tested and can receive mouse and keyboard input. </summary>
      <returns>true if the <see cref="T:Microsoft.Windows.Design.Interaction.DesignerView" /> content is hit-tested; otherwise, false. The default is false.</returns>
    </member>
    <member name="E:Microsoft.Windows.Design.Interaction.DesignerView.MatchGesture">
      <summary>Occurs when the <see cref="T:Microsoft.Windows.Design.Interaction.DesignerView" /> is matching a user input gesture to a command. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.DesignerView.MeasureOverride(System.Windows.Size)">
      <summary>Override <see cref="M:Microsoft.Windows.Design.Interaction.DesignerView.MeasureOverride(System.Windows.Size)" /> to measure the layers.</summary>
      <returns>A <see cref="T:System.Windows.Size" /> object that represents the size of the element.</returns>
      <param name="constraint">The available size the element can occupy.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.DesignerView.OnCommandException(Microsoft.Windows.Design.Interaction.CommandExceptionEventArgs)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.Interaction.DesignerView.CommandException" /> event.</summary>
      <param name="e">The <see cref="T:Microsoft.Windows.Design.Interaction.CommandExceptionEventArgs" /> used when raising this event.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.DesignerView.OnCreateAutomationPeer">
      <summary>Creates and returns an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for use by the automation infrastructure.</summary>
      <returns>An <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for this object.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.DesignerView.OnMatchGesture(Microsoft.Windows.Design.Interaction.MatchGestureEventArgs)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.Interaction.DesignerView.MatchGesture" /> event.</summary>
      <param name="e">The <see cref="T:Microsoft.Windows.Design.Interaction.MatchGestureEventArgs" /> used when raising this event.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.DesignerView.RootView">
      <summary>Returns a <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> that represents the <see cref="T:Microsoft.Windows.Design.Interaction.DesignerView" />.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> that represents the <see cref="T:Microsoft.Windows.Design.Interaction.DesignerView" />.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.DesignerView.SetZoomTransform">
      <summary>Performs the processing of changes to the zoom level.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.DesignerView.VisualChildrenCount">
      <summary>Gets the count of visual children on this object. </summary>
      <returns>An integer representing the number of visual children on this object. </returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.DesignerView.ZoomLevel">
      <summary>Represents the current zoom level of the <see cref="T:Microsoft.Windows.Design.Interaction.DesignerView" />.</summary>
      <returns>The zoom level of the <see cref="T:Microsoft.Windows.Design.Interaction.DesignerView" />.</returns>
    </member>
    <member name="E:Microsoft.Windows.Design.Interaction.DesignerView.ZoomLevelChanged">
      <summary>Occurs when the zoom level has changed.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.DesignerView.ZoomLevelProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.Interaction.DesignerView.ZoomLevel" /> dependency property.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.DragGestureData">
      <summary>Provides additional information during a drag-and-drop operation.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.DragGestureData.#ctor(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem,System.Windows.Media.Visual,System.Windows.Point,System.Windows.Point,System.Windows.DragDropEffects,System.Windows.IDataObject)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.DragGestureData" /> class.</summary>
      <param name="context">The editing context that owns this gesture data.</param>
      <param name="sourceModel">The model where the gesture began.</param>
      <param name="targetModel">The model the gesture is currently over.</param>
      <param name="coordinateReference">The input element representing the coordinate reference for the points. This should be an element that never moves around, such as the <see cref="T:Microsoft.Windows.Design.Interaction.DesignerView" /> class.</param>
      <param name="startPosition">The position of the mouse when the gesture was first initiated.</param>
      <param name="currentPosition">The current position of the mouse.</param>
      <param name="allowedEffects">The allowed drag-and-drop effects.</param>
      <param name="data">The data for the drag.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" />, <paramref name="sourceModel" />, <paramref name="targetModel" />, or <paramref name="data" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.DragGestureData.#ctor(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem,System.Windows.Media.Visual,System.Windows.Point,System.Windows.Point,System.Windows.DragDropEffects,System.Windows.IDataObject,System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.DragGestureData" /> class.</summary>
      <param name="context">The editing context that owns this gesture data.</param>
      <param name="sourceModel">This is the model where the gesture began.</param>
      <param name="targetModel">This is the model the gesture is currently over.</param>
      <param name="coordinateReference">The input element representing the coordinate reference for the points. This should be an element that never moves around, such as the <see cref="T:Microsoft.Windows.Design.Interaction.DesignerView" /> class.</param>
      <param name="startPosition">The position of the mouse when the gesture was first initiated.</param>
      <param name="currentPosition">The current position of the mouse.</param>
      <param name="allowedEffects">The allowed drag-and-drop effects.</param>
      <param name="data">The data for the drag.</param>
      <param name="sourceAdorner">The source adorner to associate with the gesture, if it exists. This parameter can be null.</param>
      <param name="targetAdorner">The target adorner to associate with the gesture, if it exists. This parameter can be null.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.DragGestureData.AllowedEffects">
      <summary>Gets the set of allowed drag-and-drop effects.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DragDropEffects" /> object that represents the set of allowed drag-and-drop effects.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.DragGestureData.Data">
      <summary>Gets the data passed in for the drag-and-drop operation.</summary>
      <returns>An <see cref="T:System.Windows.IDataObject" /> that represents drag-and-drop operation data.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.DragGestureData.Effects">
      <summary>Gets or sets the current drag-and-drop effects. </summary>
      <returns>A <see cref="T:System.Windows.DragDropEffects" /> object that represents the current drag-and-drop effects.</returns>
      <exception cref="T:System.ArgumentException">The effects are not in the allowed effects.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.DragGestureData.FromEventArgs(Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs)">
      <summary>Provides a simple utility that returns a <see cref="T:Microsoft.Windows.Design.Interaction.DragGestureData" /> object from a <see cref="T:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs" /> object.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Interaction.DragGestureData" /> object that is contained in the <see cref="P:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs.Parameter" /> property of the <see cref="T:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs" /> object.</returns>
      <param name="e">The <see cref="T:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs" /> object passed into a command callback.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.DragGestureData.FromEventArgs(Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs)">
      <summary>Provides a simple utility that returns a <see cref="T:Microsoft.Windows.Design.Interaction.DragGestureData" /> from an <see cref="T:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs" /> object.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Interaction.DragGestureData" /> object that is contained in the <see cref="P:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs.Parameter" /> property of the <see cref="T:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs" /> object.</returns>
      <param name="e">The <see cref="T:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs" /> object passed into a command callback.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs.Command">
      <summary>Gets the command associated with this <see cref="T:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs" /> object.</summary>
      <returns>An <see cref="T:System.Windows.Input.ICommand" /> that represents a command associated with this <see cref="T:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs.Parameter">
      <summary>Gets the parameter associated with this <see cref="T:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs" /> object.</summary>
      <returns>An object that represents the parameter associated with this <see cref="T:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs" /> object. The return value can be null.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.ExecutedToolEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> events for tool commands.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">An <see cref="T:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.FocusedTask">
      <summary>Contains the task that currently has the focus in a tool.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.FocusedTask.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.FocusedTask" /> class. </summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.FocusedTask.ItemType">
      <summary>Gets the key that is used in the context item dictionary to identify this type of context item.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the type of the <see cref="T:Microsoft.Windows.Design.Interaction.FocusedTask" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.FocusedTask.Task">
      <summary>Gets the task that has the focus.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.Task" /> object representing the task that has the focus.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.GestureData">
      <summary>Provides information about a gesture. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.GestureData.#ctor(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.GestureData" /> class.</summary>
      <param name="context">The editing context that owns this gesture data.</param>
      <param name="sourceModel">The model where the gesture began.</param>
      <param name="targetModel">The model the gesture is currently over.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" />, <paramref name="sourceModel" />, or <paramref name="targetModel" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.GestureData.#ctor(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem,System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.GestureData" /> class. </summary>
      <param name="context">The editing context that owns this gesture data.</param>
      <param name="sourceModel">The model where the gesture began.</param>
      <param name="targetModel">The model the gesture is currently over.</param>
      <param name="sourceAdorner">The source adorner to associate with the gesture, if it exists. This parameter can be null.</param>
      <param name="targetAdorner">The target adorner to associate with the gesture, if it exists. This parameter can be null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" />, <paramref name="sourceModel" />, or <paramref name="targetModel" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.GestureData.Adorners">
      <summary>Gets the adorner collection for the designer view stored in the context. </summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> that contains the adorner collection for this context's designer view.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.GestureData.Context">
      <summary>Gets the editing context associated with this gesture data.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.EditingContext" /> associated with this gesture data.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.GestureData.FromEventArgs(Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs)">
      <summary>Provides a <see cref="T:Microsoft.Windows.Design.Interaction.GestureData" /> object from an <see cref="T:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs" /> object.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Interaction.GestureData" /> object that is contained in the <see cref="P:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs.Parameter" /> property of the <see cref="T:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs" /> object.</returns>
      <param name="e">The <see cref="T:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs" /> object passed into a command callback.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.GestureData.FromEventArgs(Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs)">
      <summary>Provides a <see cref="T:Microsoft.Windows.Design.Interaction.GestureData" /> object from an <see cref="T:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs" /> object.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Interaction.GestureData" /> object that is contained in the <see cref="P:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs.Parameter" /> property of the <see cref="T:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs" /> object.</returns>
      <param name="e">The <see cref="T:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs" /> object passed into a command callback.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.GestureData.ImpliedSource">
      <summary>Gets the model that is the source of this gesture. </summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that is the source of this gesture.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.GestureData.ImpliedTarget">
      <summary>Gets the model that is the target of this gesture. </summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that represents the target of this gesture.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.GestureData.SourceAdorner">
      <summary>Gets the source adorner in the view. </summary>
      <returns>A <see cref="T:System.Windows.UIElement" /> that is the adorner that initiated the gesture. The return value can be null if the gesture was not initiated by an adorner.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.GestureData.SourceModel">
      <summary>Gets the object that is the source of this gesture. </summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that is the source of this gesture.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.GestureData.TargetAdorner">
      <summary>Gets the target adorner in the view. </summary>
      <returns>A <see cref="T:System.Windows.UIElement" /> that is the adorner the gesture is currently over. The return value can be null if the gesture is not over an adorner.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.GestureData.TargetModel">
      <summary>Gets the object that is the target of this gesture. </summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that represents the target of this gesture.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.IAdornerPlacement">
      <summary>Specifies a placement term for an <see cref="T:Microsoft.Windows.Design.Interaction.AdornerPlacementCollection" />.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.IAdornerPlacement.GetPositionTerms(Microsoft.Windows.Design.Interaction.AdornerCoordinateSpace,System.Windows.UIElement,Microsoft.Windows.Design.Interaction.ViewItem,System.Windows.Vector,System.Windows.Size)">
      <summary>Returns an enumeration of positioning terms that is used to position an adorner.</summary>
      <returns>An enumeration of positioning terms. If no positioning terms are used, returns an empty enumeration.</returns>
      <param name="space">The coordinate space of the owning adorner panel.</param>
      <param name="adorner">The adorner to get position terms for.</param>
      <param name="view">The view being adorned by the adorner.</param>
      <param name="zoom">A vector that indicates the zoom for the designer.</param>
      <param name="computedAdornerSize">The resulting size of the adorner after the terms returned by the <see cref="M:Microsoft.Windows.Design.Interaction.IAdornerPlacement.GetSizeTerms(Microsoft.Windows.Design.Interaction.AdornerCoordinateSpace,System.Windows.UIElement,Microsoft.Windows.Design.Interaction.ViewItem,System.Windows.Vector,System.Windows.Size)" /> method have been processed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adorner" /> or <paramref name="view" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.IAdornerPlacement.GetSizeTerms(Microsoft.Windows.Design.Interaction.AdornerCoordinateSpace,System.Windows.UIElement,Microsoft.Windows.Design.Interaction.ViewItem,System.Windows.Vector,System.Windows.Size)">
      <summary>Returns an enumeration of sizing terms that is used to size the adorner.</summary>
      <returns>An enumeration of sizing terms. If no size terms are used, this method must return an empty enumeration.</returns>
      <param name="space">The coordinate space of the owning adorner panel.</param>
      <param name="adorner">The adorner to get size terms for.</param>
      <param name="view">The view being adorned by the adorner.</param>
      <param name="zoom">A vector that indicates the zoom for the designer.</param>
      <param name="viewFinalSize">The final size of the view after it has been arranged.</param>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.LoadResourcesCallback">
      <summary>Used when a resource for the specified key must be located.</summary>
      <returns>A <see cref="T:System.Windows.ResourceDictionary" /> to be inserted into the default theme dictionary. </returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.MatchGestureEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Windows.Design.Interaction.DesignerView.MatchGesture" /> event. </summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.MatchGestureEventArgs.Binding">
      <summary>Gets or sets the input binding that was mapped to the input event. </summary>
      <returns>The input binding that was mapped to the input event.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.MatchGestureEventArgs.Data">
      <summary>Gets or sets the gesture data associated with the input event. </summary>
      <returns>The gesture data associated with the input event.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.MatchGestureEventArgs.InputEvent">
      <summary>Gets the input event that caused this event to be raised.</summary>
      <returns>An <see cref="T:System.Windows.Input.InputEventArgs" /> for the input event that caused this event to be raised.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.MenuAction">
      <summary>A context menu item which represents an action to take in the designer.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.MenuAction.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.MenuAction" /> class. </summary>
      <param name="displayName">The text that appears in the context menu.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.MenuAction.Checkable">
      <summary>Gets or sets a value indicating whether the menu item requires user interface (UI) that displays a check box. </summary>
      <returns>true if the menu item requires a check box; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.MenuAction.Checked">
      <summary>Gets or sets a value indicating whether the menu item is checked. </summary>
      <returns>true if the menu item should be rendered with a check mark; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.MenuAction.Command">
      <summary>Gets the command which represents the menu action.</summary>
      <returns>An <see cref="T:System.Windows.Input.ICommand" /> which represents the menu action. </returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.MenuAction.Enabled">
      <summary>Gets or sets a value indicating whether the menu action item is available to the user.</summary>
      <returns>true if the menu action item is available to the user; otherwise, false. The default is true.</returns>
    </member>
    <member name="E:Microsoft.Windows.Design.Interaction.MenuAction.Execute">
      <summary>Occurs when the menu item is executed. </summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.MenuAction.ImageUri">
      <summary>Gets or sets the path to an image associated with the <see cref="T:Microsoft.Windows.Design.Interaction.MenuAction" />.</summary>
      <returns>A <see cref="T:System.Uri" /> to the image associated with the <see cref="T:Microsoft.Windows.Design.Interaction.MenuAction" />. The default value is null.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.MenuAction.Visible">
      <summary>Gets or sets a value indicating whether the item is displayed in the menu.</summary>
      <returns>true if the action is displayed in the menu; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.MenuActionEventArgs">
      <summary>Provides data for <see cref="T:Microsoft.Windows.Design.Interaction.MenuAction" /> events.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.MenuActionEventArgs.#ctor(Microsoft.Windows.Design.EditingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.MenuActionEventArgs" /> class.</summary>
      <param name="context">The associated <see cref="T:Microsoft.Windows.Design.EditingContext" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.MenuActionEventArgs.Context">
      <summary>Gets the currently active editing context.</summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.EditingContext" /> representing the active editing batch. </returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.MenuActionEventArgs.Selection">
      <summary>Gets the current selection on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.Selection" /> representing the currently selected control.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.MenuBase">
      <summary>Provides a base class for both actions and groups.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.MenuBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.MenuBase" /> class.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.MenuBase.Context">
      <summary>Gets the current editing context.</summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.EditingContext" /> for the current context or null.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.MenuBase.DisplayName">
      <summary>Gets or sets the localized text to display for the menu item.</summary>
      <returns>The localized text to display for the menu item.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.MenuBase.Name">
      <summary>Gets or sets the unique identifier for the menu item.</summary>
      <returns>The unique identifier for the menu item.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.MenuBase.OnPropertyChanged(System.String)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.Interaction.MenuBase.PropertyChanged" /> event.</summary>
      <param name="propertyName">The name of the property that is changing.</param>
    </member>
    <member name="E:Microsoft.Windows.Design.Interaction.MenuBase.PropertyChanged">
      <summary>Occurs when a property has changed.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.MenuGroup">
      <summary>Represents a group of menu items. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.MenuGroup.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.MenuGroup" /> class that has the specified group name.</summary>
      <param name="groupName">The name of the <see cref="T:Microsoft.Windows.Design.Interaction.MenuGroup" /> instance. </param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.MenuGroup.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.MenuGroup" /> class that has the specified group name and display name.</summary>
      <param name="groupName">The name of the <see cref="T:Microsoft.Windows.Design.Interaction.MenuGroup" /> instance.</param>
      <param name="displayName">Localized text to display when <see cref="P:Microsoft.Windows.Design.Interaction.MenuGroup.HasDropDown" /> equals true.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.MenuGroup.HasDropDown">
      <summary>Gets or sets a value indicating whether the menu items in the <see cref="P:Microsoft.Windows.Design.Interaction.MenuGroup.Items" /> collection are added to a submenu. </summary>
      <returns>true if the menu items in the items collection will be added to a submenu; false if the items in the collection will be added directly to the current menu, rendered with a separator on each end. </returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.MenuGroup.Items">
      <summary>Gets a list of menu items to display as siblings within the same menu group.</summary>
      <returns>An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> of <see cref="T:Microsoft.Windows.Design.Interaction.MenuAction" /> items. </returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.ModelHitTestFilterCallback">
      <summary>A callback delegate that can be assigned to the <see cref="P:Microsoft.Windows.Design.Interaction.Task.ModelFilter" /> property of a transacted task. </summary>
      <returns>The filter behavior for this filter.</returns>
      <param name="potentialHitTestTarget">A model item under the mouse pointer.</param>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.MouseGestureData">
      <summary>Provides information about the mouse position. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.MouseGestureData.#ctor(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem,System.Windows.Media.Visual,System.Windows.Point,System.Windows.Point)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.MouseGestureData" /> class.</summary>
      <param name="context">The editing context that owns this gesture data.</param>
      <param name="sourceModel">The model where the gesture began.</param>
      <param name="targetModel">The model the gesture is currently over.</param>
      <param name="coordinateReference">The input element representing the coordinate reference for the points. This should be an element that never moves around, such as the <see cref="T:Microsoft.Windows.Design.Interaction.DesignerView" />.</param>
      <param name="startPosition">The position of the mouse when the gesture was first initiated.</param>
      <param name="currentPosition">The current position of the mouse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" />, <paramref name="sourceModel" />, <paramref name="targetModel" />, or <paramref name="coordinateReference" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.MouseGestureData.#ctor(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem,System.Windows.Media.Visual,System.Windows.Point,System.Windows.Point,System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.MouseGestureData" /> class. </summary>
      <param name="context">The editing context that owns this gesture data.</param>
      <param name="sourceModel">The model where the gesture began.</param>
      <param name="targetModel">The model the gesture is currently over.</param>
      <param name="coordinateReference">The input element representing the coordinate reference for the points. This should be an element that never moves around, such as the <see cref="T:Microsoft.Windows.Design.Interaction.DesignerView" />.</param>
      <param name="startPosition">The position of the mouse when the gesture was first initiated.</param>
      <param name="currentPosition">The current position of the mouse.</param>
      <param name="sourceAdorner">The source adorner to associate with the gesture, if it exists. This parameter can be null.</param>
      <param name="targetAdorner">The target adorner to associate with the gesture, if it exists. This parameter can be null.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.MouseGestureData.CurrentPosition">
      <summary>Gets the current position of the mouse. </summary>
      <returns>A <see cref="T:System.Windows.Point" /> object that represents the current position of the mouse.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.MouseGestureData.FromEventArgs(Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs)">
      <summary>Provides a <see cref="T:Microsoft.Windows.Design.Interaction.MouseGestureData" /> object from an <see cref="T:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs" /> object.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Interaction.MouseGestureData" /> object contained in the <see cref="P:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs.Parameter" /> property of the <see cref="T:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs" /> object.</returns>
      <param name="e">The <see cref="T:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs" /> object passed into a command callback.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.MouseGestureData.FromEventArgs(Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs)">
      <summary>Provides a <see cref="T:Microsoft.Windows.Design.Interaction.MouseGestureData" /> from an <see cref="T:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs" /> object.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Interaction.MouseGestureData" /> object contained in the <see cref="P:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs.Parameter" /> property of the <see cref="T:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs" /> object.</returns>
      <param name="e">The <see cref="T:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs" /> object passed into a command callback.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.MouseGestureData.PositionDelta">
      <summary>Gets the offset between starting and ending positions.</summary>
      <returns>A <see cref="T:System.Windows.Vector" /> object that represents the offset between the starting and ending positions of the mouse.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.MouseGestureData.StartPosition">
      <summary>Gets the starting position of the mouse. </summary>
      <returns>A <see cref="T:System.Windows.Point" /> object that represents the starting position of the mouse.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.MouseGestureData.TranslatePoint(System.Windows.Point,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Translates the specified point to the coordinate system of the visual for the specified model. </summary>
      <returns>A <see cref="T:System.Windows.Point" /> object that represents the translated point.</returns>
      <param name="pt">The point to translate.</param>
      <param name="referenceTo">The model to translate coordinates into.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="referenceTo" /> is null.</exception>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.NudgeIntent">
      <summary>An enumeration that indicates the method a <see cref="T:Microsoft.Windows.Design.Interaction.PlacementAdapter" /> uses to move controls during keyboard nudges.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.NudgeIntent.Left">
      <summary>Indicates that the intent of the placement call is to nudge the control to the left.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.NudgeIntent.Right">
      <summary>Indicates that the intent of the placement call is to nudge the control to the right.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.NudgeIntent.Up">
      <summary>Indicates that the intent of the placement call is to nudge the control upward.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.NudgeIntent.Down">
      <summary>Indicates that the intent of the placement call is to nudge the control downward.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.ParentAdapter">
      <summary>Provides an extension point for any type that can be a parent of child objects.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ParentAdapter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.ParentAdapter" /> class.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ParentAdapter.AdapterType">
      <summary>Gets the type of adapter this class represents.</summary>
      <returns>A <see cref="T:System.Type" /> representing the class type of parent adapter. </returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ParentAdapter.CanParent(Microsoft.Windows.Design.Model.ModelItem,System.Type)">
      <summary>Gets a value indicating whether the specified parent object can be a parent to an object of the specified type. </summary>
      <returns>true if the specified parent can accept a child of the specified type; otherwise, false. The default is true.</returns>
      <param name="parent">A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> representing the parent.</param>
      <param name="childType">The type of child item.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parent" /> or <paramref name="childType" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ParentAdapter.IsParent(Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Gets a value indicating whether the specified child item is a child of the specified parent item. </summary>
      <returns>true if <paramref name="child" /> is a child item of <paramref name="parent" />; otherwise, false. </returns>
      <param name="parent">The parent item.</param>
      <param name="child">The child item.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ParentAdapter.Parent(Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Changes the parent of an object to another parent. </summary>
      <param name="newParent">The new parent item for <paramref name="child" />.</param>
      <param name="child">The child item.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newParent" /> or <paramref name="child" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ParentAdapter.Parent(Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem,System.Int32)">
      <summary>Changes the parent of an object to another parent.</summary>
      <param name="newParent">The new parent item for the child.</param>
      <param name="child">The child item.</param>
      <param name="insertionIndex">The order of control in the children collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newParent" /> or <paramref name="child" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ParentAdapter.RedirectParent(Microsoft.Windows.Design.Model.ModelItem,System.Type)">
      <summary>Redirect a reference from one parent to another. .</summary>
      <returns>A redirected parent. The default implementation returns <paramref name="parent" />.</returns>
      <param name="parent">The parent item.</param>
      <param name="childType">The type of child item.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parent" /> or <paramref name="childType" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ParentAdapter.RemoveParent(Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Replaces the current parent of the specified child with a new parent.</summary>
      <param name="currentParent">The item that is currently the parent of <paramref name="child" />.</param>
      <param name="newParent">The item that will become the new parent of <paramref name="child" />.</param>
      <param name="child">The child item.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="currentParent" />, <paramref name="newParent" />, or <paramref name="child" /> is null.</exception>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.PlacementAdapter">
      <summary>An adapter that is used to get and set positions of objects in parent coordinates. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.PlacementAdapter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.PlacementAdapter" /> class.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.PlacementAdapter.AdapterType">
      <summary>Gets the type of adapter this class represents. </summary>
      <returns>Returns a <see cref="T:Microsoft.Windows.Design.Interaction.PlacementAdapter" /> type.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.PlacementAdapter.BeginPlacement(Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Begins the placement operation.</summary>
      <param name="item">The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> for which the placement operation is started.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.PlacementAdapter.CanSetPosition(Microsoft.Windows.Design.Interaction.PlacementIntent,Microsoft.Windows.Design.Interaction.RelativePosition)">
      <summary>Returns a value that indicates whether the specified coordinate can be set.</summary>
      <returns>true if the coordinate can be set; otherwise, false.</returns>
      <param name="intent">Specifies the reason for this placement call. </param>
      <param name="position">Coordinate to be set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="position" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.PlacementAdapter.EndPlacement">
      <summary>Ends the placement operation.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.PlacementAdapter.GetPlacement(Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Interaction.RelativePosition[])">
      <summary>Returns a collection of positions that describe the placement of the specified item.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativeValueCollection" /> object that is a collection of placement coordinates.</returns>
      <param name="item">The item to request placement information for.</param>
      <param name="positions">The positions to request placement information for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.PlacementAdapter.GetPlacementBoundary(Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Gets the boundary of the specified item parent.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> representing the boundary of the <paramref name="item" />.</returns>
      <param name="item">The parent <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> to find the boundary for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.PlacementAdapter.GetPlacementBoundary(Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Interaction.PlacementIntent,Microsoft.Windows.Design.Interaction.RelativeValue[])">
      <summary>Gets the boundary of the specified item's parent.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> representing the boundary of the parent of <paramref name="item" />.</returns>
      <param name="item">Item parent boundary to find.</param>
      <param name="intent">Specifies the reason for this placement call. </param>
      <param name="positions">Array of placement positions to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.PlacementAdapter.SetNudgePlacements(Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Interaction.NudgeIntent,Microsoft.Windows.Design.Interaction.RelativeValue[])">
      <summary>Assigns the specified array of positions for moving controls during keyboard nudges.</summary>
      <param name="item">The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> to position.</param>
      <param name="intent">A <see cref="T:Microsoft.Windows.Design.Interaction.NudgeIntent" />   that specifies the intent of this placement call.</param>
      <param name="positions">An array of placement positions to set.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.PlacementAdapter.SetNudgePlacements(Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Interaction.NudgeIntent,Microsoft.Windows.Design.Interaction.RelativeValueCollection)">
      <summary>Assigns the specified collection of positions for moving controls during keyboard nudges.</summary>
      <param name="item">The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> to position.</param>
      <param name="intent">A <see cref="T:Microsoft.Windows.Design.Interaction.NudgeIntent" />  that specifies the intent of this placement call.</param>
      <param name="placement">A collection of placement positions to set.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.PlacementAdapter.SetPlacements(Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Interaction.PlacementIntent,Microsoft.Windows.Design.Interaction.RelativeValue[])">
      <summary>Assigns the specified array of positions to the specified model item. </summary>
      <param name="item">The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> to position.</param>
      <param name="intent">A <see cref="T:Microsoft.Windows.Design.Interaction.PlacementIntent" />  that specifies the intent of this placement call.</param>
      <param name="positions">An array of placement positions to set.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.PlacementAdapter.SetPlacements(Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Interaction.PlacementIntent,Microsoft.Windows.Design.Interaction.RelativeValueCollection)">
      <summary>Assigns the specified collection of positions to the specified model item. </summary>
      <param name="item">The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> to position.</param>
      <param name="intent">A <see cref="T:Microsoft.Windows.Design.Interaction.PlacementIntent" />  that specifies the intent of this placement call.</param>
      <param name="placement">A collection of placement positions to set.</param>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.PlacementIntent">
      <summary>An enumeration that indicates the method a <see cref="T:Microsoft.Windows.Design.Interaction.PlacementAdapter" /> uses to place controls. </summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.PlacementIntent.Move">
      <summary>Indicates that the intent of the placement call is to move the control.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.PlacementIntent.Size">
      <summary>Indicates that the intent of the placement call is to size the control.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.PrimarySelectionAdornerProvider">
      <summary>Offers a set of adorners that are shown for the primary selection.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.PrimarySelectionAdornerProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.PrimarySelectionAdornerProvider" /> class.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.PrimarySelectionContextMenuProvider">
      <summary>Offers a set of <see cref="T:Microsoft.Windows.Design.Interaction.MenuGroup" /> items that are shown for the current selection.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.PrimarySelectionContextMenuProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.PrimarySelectionContextMenuProvider" /> class. </summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.PrimarySelectionTaskProvider">
      <summary>Provides a set of tasks that are available from the selection tool when a class is in the primary selection.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.PrimarySelectionTaskProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.PrimarySelectionTaskProvider" /> class.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.RelativePoint">
      <summary>Defines a point that consists of an X and Y location and a <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> class that defines the relationship of those coordinates to some other object.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativePoint.#ctor(Microsoft.Windows.Design.Interaction.RelativePosition,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> structure for specified <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" />, X, and Y values.</summary>
      <param name="position">A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> object that defines the relationship between the specified X and Y locations and some other object.</param>
      <param name="x">An X coordinate.</param>
      <param name="y">A Y coordinate.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativePoint.#ctor(Microsoft.Windows.Design.Interaction.RelativePosition,System.Windows.Point)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> class for a specified a non-relative point.</summary>
      <param name="position">A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> object that defines the relationship between the specified X and Y locations and some other object.</param>
      <param name="point">A <see cref="T:System.Windows.Point" /> structure containing the coordinates to create for this <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativePoint.Equals(Microsoft.Windows.Design.Interaction.RelativePoint)">
      <summary>Specifies whether this <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> contains the same coordinates as the specified <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" />.</summary>
      <returns>true if the <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> objects have the same coordinates; otherwise, false.</returns>
      <param name="value">The <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> to test.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativePoint.Equals(System.Object)">
      <summary>Specifies whether this <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> contains the same coordinates as the specified <see cref="T:System.Object" />. </summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> and has the same coordinates as this <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" />.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to test.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativePoint.FromPoint(System.Windows.Point)">
      <summary>Converts the specified <see cref="T:System.Windows.Point" /> to a <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> that is relative to the top left corner.</summary>
      <returns>A new <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" />.</returns>
      <param name="point">The <see cref="T:System.Windows.Point" /> structure to convert.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativePoint.GetHashCode"></member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativePoint.op_Equality(Microsoft.Windows.Design.Interaction.RelativePoint,Microsoft.Windows.Design.Interaction.RelativePoint)">
      <summary>Compares two <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> structures. The result specifies whether the values of the Position, X, and Y properties of the two <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> structures are equal. </summary>
      <returns>true if the Position, X, and Y properties are equal; otherwise, false.</returns>
      <param name="point1">The first <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> to compare.</param>
      <param name="point2">The second <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> to compare.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativePoint.op_Implicit(System.Windows.Point)~Microsoft.Windows.Design.Interaction.RelativePoint">
      <summary>Converts the specified <see cref="T:System.Windows.Point" /> structure to a <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> structure. </summary>
      <returns>A new <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> created from <paramref name="point" />.</returns>
      <param name="point">The <see cref="T:System.Windows.Point" /> structure to convert.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativePoint.op_Inequality(Microsoft.Windows.Design.Interaction.RelativePoint,Microsoft.Windows.Design.Interaction.RelativePoint)">
      <summary>Compares two <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> structures. The result specifies whether the values of the Position, X, or Y properties of the two <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> structures are not equal.</summary>
      <returns>true if the values of either the Position, X, or Y properties of <paramref name="p1" /> and <paramref name="p2" /> are not equal; otherwise, false.</returns>
      <param name="point1">The first <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> to compare.</param>
      <param name="point2">The second <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> to compare.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePoint.Position">
      <summary>Gets or sets the relative position of the <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> structure. </summary>
      <returns>The relative position of the <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> structure.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePoint.X">
      <summary>Gets or sets the X coordinate of the <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> structure.</summary>
      <returns>The X coordinate of the <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> structure.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePoint.Y">
      <summary>Gets or sets the Y coordinate of the <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> structure.</summary>
      <returns>The Y coordinate of the <see cref="T:Microsoft.Windows.Design.Interaction.RelativePoint" /> structure.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.RelativePosition">
      <summary>Represents a position on the designer that remains independent of coordinate systems. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativePosition.#ctor(Microsoft.Windows.Design.Interaction.RelativePosition[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> class that contains zero or more existing reference positions.</summary>
      <param name="values">An array of <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> objects included in a composite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativePosition.#ctor(System.String,Microsoft.Windows.Design.Interaction.RelativePosition[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> class that contains zero or more existing reference positions. </summary>
      <param name="name">A name that describes this <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" />. This is only used for diagnostic purposes.</param>
      <param name="values">An array of <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> objects included in a composite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativePosition.Contains(Microsoft.Windows.Design.Interaction.RelativePosition)">
      <summary>Returns a value indicating whether the specified <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> exists inside of this <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" />.</summary>
      <returns>true if <paramref name="value" /> is contained within this <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> to check.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativePosition.Equals(Microsoft.Windows.Design.Interaction.RelativePosition)">
      <summary>Determines whether the specified <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> is equal to this <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" />. </summary>
      <returns>true if the <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> objects are equal; otherwise, false.</returns>
      <param name="position">The <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> to test.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativePosition.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to this <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> object.</summary>
      <returns>true if the specified object and this <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> are equal; otherwise, false.</returns>
      <param name="obj">The object to test.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativePosition.GetHashCode">
      <summary>Returns the hash code for this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativePosition.op_Equality(Microsoft.Windows.Design.Interaction.RelativePosition,Microsoft.Windows.Design.Interaction.RelativePosition)">
      <summary>Compares two <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> objects.</summary>
      <returns>true if the two <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> objects are equal; otherwise, false.</returns>
      <param name="point1">The first <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> to compare.</param>
      <param name="point2">The second <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> to compare.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativePosition.op_Inequality(Microsoft.Windows.Design.Interaction.RelativePosition,Microsoft.Windows.Design.Interaction.RelativePosition)">
      <summary>Compares two <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> objects.</summary>
      <returns>true if the two <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> objects are not equal; otherwise, false.</returns>
      <param name="point1">The first <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> to compare.</param>
      <param name="point2">The second <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> to compare.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativePosition.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An enumeration of context items <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> objects.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativePosition.ToString">
      <summary>Returns the name of this position.</summary>
      <returns>The name of this position. If the object is not named, returns the base implementation.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.RelativePositions">
      <summary>Represents a set of static instances of common <see cref="T:Microsoft.Windows.Design.Interaction.RelativePositions" /> objects.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.BottomLeft">
      <summary>Gets the bottom-left corner of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the bottom-left corner of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.BottomRight">
      <summary>Gets the bottom-right corner of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the bottom-right corner of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.BottomSide">
      <summary>Gets the bottom side of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the bottom side of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.Bounds">
      <summary>Gets the <see cref="P:Microsoft.Windows.Design.Interaction.RelativePositions.LeftSide" />, <see cref="P:Microsoft.Windows.Design.Interaction.RelativePositions.TopSide" />, <see cref="P:Microsoft.Windows.Design.Interaction.RelativePositions.RightSide" />, and <see cref="P:Microsoft.Windows.Design.Interaction.RelativePositions.BottomSide" /> of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePositions" /> that represents the left side, top side, right side, and bottom side of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.Center">
      <summary>Gets the center of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the center of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.ExternalBottomLeft">
      <summary>Gets the external bottom-left corner of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the external bottom-left corner of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.ExternalBottomRight">
      <summary>Gets the external bottom-right corner of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the external bottom-right corner of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.ExternalBottomSide">
      <summary>Gets the external bottom side of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the external bottom side of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.ExternalLeftSide">
      <summary>Gets the external left side of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the external left side of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.ExternalRightSide">
      <summary>Gets the external right side of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the external right side of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.ExternalTopLeft">
      <summary>Gets the external top-left corner of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the external top-left corner of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.ExternalTopRight">
      <summary>Gets the external top-right corner of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the external top-right corner of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.ExternalTopSide">
      <summary>Gets the external top side of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the external top side of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.InternalBottomLeft">
      <summary>Gets the internal bottom-left corner of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the internal bottom-left corner of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.InternalBottomRight">
      <summary>Gets the internal bottom-right corner of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the internal bottom-right corner of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.InternalBottomSide">
      <summary>Gets the internal bottom side of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the internal bottom side of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.InternalLeftSide">
      <summary>Gets the internal left side of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the internal left side of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.InternalRightSide">
      <summary>Gets the internal right side of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the internal right side of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.InternalTopLeft">
      <summary>Gets the internal top-left corner of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the internal top-left corner of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.InternalTopRight">
      <summary>Gets the internal top-right corner of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the internal top-right corner of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.InternalTopSide">
      <summary>Gets the internal top side of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the internal top side of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.LeftSide">
      <summary>Gets the left side of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the left side of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.RightSide">
      <summary>Gets the right side of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the right side of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.TopLeft">
      <summary>Gets the top-left corner of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the top-left corner of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.TopRight">
      <summary>Gets the top-right corner of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the top-right corner of an item on the design surface.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativePositions.TopSide">
      <summary>Gets the top side of an item on the design surface.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that represents the top side of an item on the design surface.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.RelativeValue">
      <summary>Represents a coordinate on the designer. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativeValue.#ctor(Microsoft.Windows.Design.Interaction.RelativePosition,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.RelativeValue" /> structure using a <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> and a value.</summary>
      <param name="reference">The known relative position type for this value.</param>
      <param name="value">The value for this relative position.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativeValue.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to this <see cref="T:Microsoft.Windows.Design.Interaction.RelativeValue" /> structure.</summary>
      <returns>true if the specified object and this <see cref="T:Microsoft.Windows.Design.Interaction.RelativeValue" /> are equal; otherwise, false.</returns>
      <param name="obj">The object to test.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativeValue.GetHashCode"></member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativeValue.op_Equality(Microsoft.Windows.Design.Interaction.RelativeValue,Microsoft.Windows.Design.Interaction.RelativeValue)">
      <summary>Compares two <see cref="T:Microsoft.Windows.Design.Interaction.RelativeValue" /> structures.</summary>
      <returns>true if the two <see cref="T:Microsoft.Windows.Design.Interaction.RelativeValue" /> structures are equal; otherwise, false.</returns>
      <param name="first">The first <see cref="T:Microsoft.Windows.Design.Interaction.RelativeValue" /> to compare.</param>
      <param name="second">The second <see cref="T:Microsoft.Windows.Design.Interaction.RelativeValue" /> to compare.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativeValue.op_Inequality(Microsoft.Windows.Design.Interaction.RelativeValue,Microsoft.Windows.Design.Interaction.RelativeValue)">
      <summary>Compares two <see cref="T:Microsoft.Windows.Design.Interaction.RelativeValue" /> structures.</summary>
      <returns>true if the two <see cref="T:Microsoft.Windows.Design.Interaction.RelativeValue" /> structures are not equal; otherwise, false.</returns>
      <param name="first">The first <see cref="T:Microsoft.Windows.Design.Interaction.RelativeValue" /> to compare.</param>
      <param name="second">The second <see cref="T:Microsoft.Windows.Design.Interaction.RelativeValue" /> to compare.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativeValue.Position">
      <summary>Gets or sets the <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that identifies the kind for this value.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> that identifies the kind for this value.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RelativeValue.Value">
      <summary>Gets or sets the actual value of this position or coordinate.</summary>
      <returns>The actual value of this position or coordinate.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.RelativeValueCollection">
      <summary>Represents a collection of values that describe the placement of an item within a panel or container on the designer surface. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativeValueCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.RelativeValueCollection" /> class. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RelativeValueCollection.Find(Microsoft.Windows.Design.Interaction.RelativePosition)">
      <summary>Finds the position value of the specified position.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.RelativeValue" /> of the specified position.</returns>
      <param name="position">A <see cref="T:Microsoft.Windows.Design.Interaction.RelativePosition" /> to find.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="position" /> is null.</exception>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.RootPlacementAdapter">
      <summary>Provides placement support for any element that does not have a parent. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.RootPlacementAdapter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.RootPlacementAdapter" /> class.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.RootPlacementAdapter.AdapterType">
      <summary>Gets the adapter type.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.Selection">
      <summary>Represents a set of objects selected by a user in a designer. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.Selection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.Selection" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.Selection.#ctor(Microsoft.Windows.Design.Model.ModelItem[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.Selection" /> class with the specified array of <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> objects.</summary>
      <param name="selectedObjects">An array of <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> objects to add to the selection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="selectedObjects" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.Selection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Windows.Design.Model.ModelItem})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.Selection" /> class with the specified enumeration of <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> objects.</summary>
      <param name="selectedObjects">An enumeration of <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> objects to add to the selection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="selectedObjects" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.Selection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Windows.Design.Model.ModelItem},System.Predicate{Microsoft.Windows.Design.Model.ModelItem})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.Selection" /> class by using the specified enumeration of <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> objects and predicate.</summary>
      <param name="selectedObjects">An enumeration of <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> objects to add to the selection.</param>
      <param name="match">Only those objects in <paramref name="selectedObjects" /> that match the predicate are added to the selection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="selectedObjects" /> or <paramref name="match" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.Selection.#ctor(System.Collections.IEnumerable)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.Selection" /> class with the specified enumeration of objects.</summary>
      <param name="selectedObjects">An enumeration of objects to add to the selection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="selectedObjects" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.Selection.#ctor(System.Collections.IEnumerable,System.Predicate{Microsoft.Windows.Design.Model.ModelItem})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.Selection" /> class with the specified enumeration of objects and predicate.</summary>
      <param name="selectedObjects">An enumeration of objects to add to the selection.</param>
      <param name="match">Only those objects in <paramref name="selectedObjects" /> that match the predicate are added to the selection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="selectedObjects" /> or <paramref name="match" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.Selection.ItemType">
      <summary>Gets the type of <see cref="T:Microsoft.Windows.Design.Interaction.Selection" />.</summary>
      <returns>The type of <see cref="T:Microsoft.Windows.Design.Interaction.Selection" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.Selection.PrimarySelection">
      <summary>Gets the primary selection object.</summary>
      <returns>If the selection contains objects, the primary selection object; otherwise, null.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.Selection.SelectedObjects">
      <summary>Gets an enumeration of the objects in the selection.</summary>
      <returns>An enumeration of the objects in the selection.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.Selection.SelectionCount">
      <summary>Gets the number of objects in the selection.</summary>
      <returns>The number of objects in the selection.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.Selection.ViewSelection">
      <summary>Gets a selection that contains model items that provide a view.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.Selection" /> that contains model items that provide a view. </returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.SelectionCommands">
      <summary>Provides standard commands that control the selection of objects in a designer. </summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.SelectionCommands.Clear">
      <summary>Gets a <see cref="T:System.Windows.Input.RoutedCommand" /> that represents a request to clear the existing selection.</summary>
      <returns>A request to clear the existing selection.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.SelectionCommands.SelectAll">
      <summary>Gets a <see cref="T:System.Windows.Input.RoutedCommand" /> that represents a request to select all objects in the designer.</summary>
      <returns>A request to select all objects in the designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.SelectionCommands.SelectNext">
      <summary>Gets a <see cref="T:System.Windows.Input.RoutedCommand" /> that represents a request to select the next object in the designer.</summary>
      <returns>A request to select the next object in the designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.SelectionCommands.SelectOnlyTarget">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.Interaction.ToolCommand" /> that represents a request to select only the object under the mouse pointer in the designer.</summary>
      <returns>A request to select only the object under the mouse pointer in the designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.SelectionCommands.SelectPrevious">
      <summary>Gets a <see cref="T:System.Windows.Input.RoutedCommand" /> that represents a request to select the previous object in the designer.</summary>
      <returns>A request to select the previous object in the designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.SelectionCommands.SelectTarget">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.Interaction.ToolCommand" /> that represents a request to select the object under the mouse pointer in the designer.</summary>
      <returns>A request to select the object under the mouse pointer in the designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.SelectionCommands.ShowEvent">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.Interaction.ToolCommand" /> that represents a request to display the default event handler for the primary selection object in the designer.</summary>
      <returns>A request to display the default event handler for the primary selection object in the designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.SelectionCommands.ToggleSelectTarget">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.Interaction.ToolCommand" /> that represents a request to toggle the selection state of the object under the mouse pointer in the designer.</summary>
      <returns>A request to toggle the selection state of the object under the mouse pointer in the designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.SelectionCommands.UnionSelectTarget">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.Interaction.ToolCommand" /> that represents a request to add the object under the mouse pointer in the designer to the existing selection.</summary>
      <returns>A request to add the object under the mouse pointer in the designer to the existing selection.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.SelectionOperations">
      <summary>Provides standard operations that control the programmatic selection of objects in a designer. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.SelectionOperations.Select(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Processes a request to programmatically select an object in the designer.</summary>
      <returns>A new empty selection, a new selection containing new objects, or the existing selection. See the remarks section for more information.</returns>
      <param name="context">The current editing context.</param>
      <param name="itemToSelect">The object to select.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> or <paramref name="itemToSelect" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.SelectionOperations.SelectOnly(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Processes a request to programmatically select a single object in the designer.</summary>
      <returns>A selection containing the object to select.</returns>
      <param name="context">The current editing context.</param>
      <param name="itemToSelect">The object to select.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> or <paramref name="itemToSelect" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.SelectionOperations.Subscribe(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.SubscribeContextCallback{Microsoft.Windows.Design.Interaction.Selection})">
      <summary>Adds a callback method that is invoked when the selection in the editing context changes.</summary>
      <param name="context">The editing context of interest.</param>
      <param name="handler">The method to invoke when the selection changes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.SelectionOperations.Toggle(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Processes a request to programmatically toggle the selection state of an object in the designer.</summary>
      <returns>A new selection that contains or does not contain the object to toggle. See the remarks section for more information.</returns>
      <param name="context">The current editing context.</param>
      <param name="itemToToggle">The object to select or deselect.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> or <paramref name="itemToToggle" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.SelectionOperations.Union(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Processes a request to programmatically add an object in the designer to the existing selection.</summary>
      <returns>A new selection containing the new object, or the existing selection. See the remarks section for more information.</returns>
      <param name="context">The current editing context.</param>
      <param name="itemToAdd">The object to select.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> or <paramref name="itemToAdd" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.SelectionOperations.Unsubscribe(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.SubscribeContextCallback{Microsoft.Windows.Design.Interaction.Selection})">
      <summary>Removes a callback method so that it is not invoked when the selection in the editing context changes.</summary>
      <param name="context">The editing context of interest.</param>
      <param name="handler">The method that is removed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.SelectionTool">
      <summary>Represents a tool that selects objects in a designer, such as a mouse pointer. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.SelectionTool.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.SelectionTool" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.SelectionTool.OnActivate(Microsoft.Windows.Design.Interaction.Tool)">
      <summary>Called when a <see cref="T:Microsoft.Windows.Design.Interaction.SelectionTool" /> is activated.</summary>
      <param name="previousTool">The tool that was previously active.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.SelectionTool.OnDeactivate">
      <summary>Called when a <see cref="T:Microsoft.Windows.Design.Interaction.SelectionTool" /> is deactivated.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.Task">
      <summary>Represents a collection of commands and input bindings to those commands. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.Task.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.Task" /> class.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.Task.AdornerFilter">
      <summary>Gets or sets the filter that is used to filter the set of adorners seen by the designer's hit test algorithm. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.ModelHitTestFilterCallback" /> that is used to filter the set of adorners seen by the designer's hit test algorithm.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.Task.BeginFocus(Microsoft.Windows.Design.Interaction.GestureData)">
      <summary>Begins to set the focus for the task. </summary>
      <param name="data">The gesture data for the focus.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The task already has the focus.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.Task.CommandBindings">
      <summary>Gets the <see cref="T:System.Windows.Input.CommandBindingCollection" /> for a task. </summary>
      <returns>A <see cref="T:System.Windows.Input.CommandBindingCollection" /> instance containing the command bindings for this task,</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.Task.Complete">
      <summary>Completes changes that were made while this task has the focus. </summary>
      <exception cref="T:System.InvalidOperationException">The task does not have the focus.</exception>
    </member>
    <member name="E:Microsoft.Windows.Design.Interaction.Task.Completed">
      <summary>Occurs when this task has completed.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.Task.Cursor">
      <summary>Gets or sets the cursor for a task.</summary>
      <returns>A <see cref="T:System.Windows.Input.Cursor" /> for a task.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.Task.Description">
      <summary>Gets or sets the description for this task. </summary>
      <returns>A description for this task.</returns>
    </member>
    <member name="E:Microsoft.Windows.Design.Interaction.Task.FocusDeactivated">
      <summary>Occurs when focus for this task is deactivated.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.Task.InputBindings">
      <summary>Gets the <see cref="T:System.Windows.Input.InputBindingCollection" /> for a task.</summary>
      <returns>An <see cref="T:System.Windows.Input.InputBindingCollection" /> instance that contains the input bindings for this task.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.Task.IsFocused">
      <summary>Gets a value indicating whether this task has the focus.</summary>
      <returns>true if this task has the focus; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.Task.ModelFilter">
      <summary>Gets or sets the filter that is used to filter the set of model items seen by the designer's hit test algorithm. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.ModelHitTestFilterCallback" /> that is used to filter the set of model items seen by the designer's hit test algorithm.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.Task.OnCompleted(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.Interaction.Task.Completed" /> event. </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.Task.OnFocusDeactivated(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.Interaction.Task.FocusDeactivated" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.Task.OnReverted(System.EventArgs)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.Interaction.Task.Reverted" /> event. </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.Task.Revert">
      <summary>Reverts this task.</summary>
      <exception cref="T:System.InvalidOperationException">The task is not active.</exception>
    </member>
    <member name="E:Microsoft.Windows.Design.Interaction.Task.Reverted">
      <summary>Occurs when this task is reverted.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.Task.ToolCommandBindings">
      <summary>Gets the <see cref="T:Microsoft.Windows.Design.Interaction.ToolCommandBindingCollection" /> for a task.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.ToolCommandBindingCollection" /> instance that contains the tool command bindings for this task.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.TaskProvider">
      <summary>A feature provider that you can add to a class to automatically add tasks to the active tool. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.TaskProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.TaskProvider" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.TaskProvider.Activate(Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Called when a task provider's tasks are about to be requested for the first time.</summary>
      <param name="item">A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> object. </param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.TaskProvider.Context">
      <summary>Gets the editing context that activated this task provider. </summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.EditingContext" /> object that represents the object that activated the current task provider.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.TaskProvider.Deactivate">
      <summary>Called when a task provider is about to be discarded by the designer.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.TaskProvider.IsToolSupported(Microsoft.Windows.Design.Interaction.Tool)">
      <summary>Returns a value indicating whether this task provider supports the specified tool. </summary>
      <returns>true if the specified tool is supported; otherwise, false.</returns>
      <param name="tool">A <see cref="T:Microsoft.Windows.Design.Interaction.Tool" /> object to check.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.TaskProvider.Tasks">
      <summary>Gets a collection of tasks this task provider offers.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> that contains all of the tasks that this <see cref="T:Microsoft.Windows.Design.Interaction.TaskProvider" /> offers.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.Tool">
      <summary>Represents a tool that determines the mode of the designer. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.Tool.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.Tool" /> class.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.Tool.Context">
      <summary>Gets the editing context for code within the tool. </summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.EditingContext" /> for code within the tool.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.Tool.Cursor">
      <summary>Gets or sets the default cursor for the mouse. </summary>
      <returns>A <see cref="T:System.Windows.Input.Cursor" /> for the mouse.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.Tool.FocusedTask">
      <summary>Gets the currently focused task, if one exists.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.Task" /> object that represents the task that currently has focus.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.Tool.ItemType">
      <summary>Gets the type of the tool.</summary>
      <returns>A <see cref="T:System.Type" /> that represents the type of the tool.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.Tool.OnActivate(Microsoft.Windows.Design.Interaction.Tool)">
      <summary>Called when a tool is activated. </summary>
      <param name="previousTool">The tool that was in the context before this tool became active. The default <see cref="T:Microsoft.Windows.Design.Interaction.Tool" /> implementation does nothing with this parameter.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.Tool.OnDeactivate">
      <summary>Called when a tool is being deactivated. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.Tool.OnItemChanged(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.ContextItem)">
      <summary>Adds activate and deactivate semantics to the <see cref="T:Microsoft.Windows.Design.Interaction.Tool" /> class.</summary>
      <param name="context">The editing context where the change is occurring.</param>
      <param name="previousItem">The previous tool.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.Tool.Tasks">
      <summary>Gets the set of tasks this tool provides. </summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of tasks this tool provides.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.ToolAction">
      <summary>Represents a user gesture. </summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.ToolAction.None">
      <summary>No action.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.ToolAction.Down">
      <summary>A mouse button has been pressed.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.ToolAction.Up">
      <summary>A mouse button has been released.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.ToolAction.Move">
      <summary>The mouse has been moved.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.ToolAction.Wheel">
      <summary>The mouse wheel has been moved.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.ToolAction.Click">
      <summary>A mouse button has been clicked.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.ToolAction.DoubleClick">
      <summary>A mouse button has been double-clicked. Double-click and single-click interact as follows: <see cref="F:Microsoft.Windows.Design.Interaction.ToolAction.Click" />, <see cref="F:Microsoft.Windows.Design.Interaction.ToolAction.Click" />, <see cref="F:Microsoft.Windows.Design.Interaction.ToolAction.DoubleClick" />.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.ToolAction.Enter">
      <summary>The mouse has entered an element. If the mouse enters an adorner, an <see cref="F:Microsoft.Windows.Design.Interaction.ToolAction.Enter" /> event is only raised if the target of the adorner is different from the last target.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.ToolAction.Leave">
      <summary>The mouse has left an element. If the mouse leaves an adorner, a <see cref="F:Microsoft.Windows.Design.Interaction.ToolAction.Leave" /> event is only raised if the new target is different from the adorner’s target.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.ToolAction.Hover">
      <summary>The mouse has stopped for a short time over an element or adorner. A new hover event is raised when the mouse passes over a different element.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.ToolAction.DragIntent">
      <summary>The user has held a mouse button down and moved the mouse beyond a certain threshold. This indicates the user’s intent to begin a drag operation.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.ToolAction.DragEnter">
      <summary>A <see cref="F:Microsoft.Windows.Design.Interaction.ToolAction.DragEnter" /> event that occurs because of a prior call to DragDrop.DoDragDrop. The source and target objects always refer to the elements, not the adorners.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.ToolAction.DragOver">
      <summary>A <see cref="F:Microsoft.Windows.Design.Interaction.ToolAction.DragOver" /> event that occurs because of a prior call to DragDrop.DoDragDrop. The source and target objects always refer to the elements, not the adorners.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.ToolAction.DragLeave">
      <summary>A <see cref="F:Microsoft.Windows.Design.Interaction.ToolAction.DragLeave" /> event that occurs because of a prior call to DragDrop.DoDragDrop. The source and target objects always refer to the elements, not the adorners.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.ToolAction.DragDrop">
      <summary>A <see cref="F:Microsoft.Windows.Design.Interaction.ToolAction.DragDrop" /> event that occurs because of a prior call to DragDrop.DoDragDrop. The source and target objects always refer to the elements, not the adorners.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.ToolAction.DragFeedback">
      <summary>A <see cref="F:Microsoft.Windows.Design.Interaction.ToolAction.DragFeedback" /> event that occurs because of a prior call to DragDrop.DoDragDrop. The source and target objects always refer to the elements, not the adorners.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.ToolAction.DragComplete">
      <summary>The user held a mouse button down and moved the mouse. This causes a <see cref="F:Microsoft.Windows.Design.Interaction.ToolAction.DragIntent" /> to be signaled. Next, the user has released that mouse button, signaling the drag has completed.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Interaction.ToolAction.DragOutside">
      <summary>The user has dragged an item off the edge of the design surface. You may bind a command to this gesture to invoke a drag-and-drop operation.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.ToolActionEventArgs">
      <summary>Provides data for <see cref="T:Microsoft.Windows.Design.Interaction.ToolAction" /> events.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolActionEventArgs.#ctor(Microsoft.Windows.Design.Interaction.ToolAction,System.EventArgs,System.Windows.Input.InputDevice,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.ToolActionEventArgs" /> class.</summary>
      <param name="toolAction">The tool action associated with this event.</param>
      <param name="sourceEvent">The event that caused this action.</param>
      <param name="inputDevice">The input device to associate with this event.</param>
      <param name="timestamp">The time when the input occurred.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceEvent" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolActionEventArgs.#ctor(Microsoft.Windows.Design.Interaction.ToolAction,System.Windows.Input.InputEventArgs)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.ToolActionEventArgs" /> class.</summary>
      <param name="toolAction">The tool action associated with this event.</param>
      <param name="sourceEvent">The event that caused this action.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceEvent" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ToolActionEventArgs.SourceEvent">
      <summary>Gets the input event that caused this tool action event to occur.</summary>
      <returns>An <see cref="T:System.EventArgs" /> that represents the input event that caused this tool action event to occur.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ToolActionEventArgs.ToolAction">
      <summary>Gets the tool action associated with this event.</summary>
      <returns>The tool action associated with this event.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolActionEventArgs.ToString">
      <summary>Returns a string describing the event for diagnostic purposes.</summary>
      <returns>A diagnostic string describing the event.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.ToolCommand">
      <summary>Acts as a command identifier and as a unified way of invoking a particular command.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.ToolCommand" /> class. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolCommand.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.ToolCommand" /> class with the specified command name. </summary>
      <param name="commandName">The name of the command.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="commandName" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolCommand.CanExecute(Microsoft.Windows.Design.Interaction.GestureData)">
      <summary>Locates a command binding for the command and asks if it is enabled. </summary>
      <returns>true if the command is enabled; false if it is disabled or there is no binding for it.</returns>
      <param name="data">The gesture data that is to be passed to the command. Gesture data is required as it provides a context object from which the <see cref="M:Microsoft.Windows.Design.Interaction.ToolCommand.CanExecute(Microsoft.Windows.Design.Interaction.GestureData)" /> method can locate the active tool.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="data" />.Context is null.</exception>
    </member>
    <member name="E:Microsoft.Windows.Design.Interaction.ToolCommand.CanExecuteChanged">
      <summary>Occurs when the status of this command changes.</summary>
      <exception cref="T:System.NotSupportedException">When used.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolCommand.Execute(Microsoft.Windows.Design.Interaction.GestureData)">
      <summary>Locates a command binding for the command and executes it. </summary>
      <param name="data">The gesture data that is to be passed to the command. Gesture data is required as it provides a context object from which the <see cref="M:Microsoft.Windows.Design.Interaction.ToolCommand.Execute(Microsoft.Windows.Design.Interaction.GestureData)" /> method can locate the active tool.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="data" />.Context is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ToolCommand.Name">
      <summary>Gets the name of this command.</summary>
      <returns>A string representing the name of this command, or an empty string if the command has no name.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</summary>
      <returns>true if this command can be executed; otherwise, false.</returns>
      <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolCommand.System#Windows#Input#ICommand#Execute(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</summary>
      <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolCommand.ToString">
      <summary>Returns the name of this command.</summary>
      <returns>The name of this command. </returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.ToolCommandBinding">
      <summary>Acts as a bridge between a command and an event handler which implements it.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolCommandBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.ToolCommandBinding" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolCommandBinding.#ctor(Microsoft.Windows.Design.Interaction.ToolCommand)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.ToolCommandBinding" /> class.</summary>
      <param name="command">The command to bind.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="command" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolCommandBinding.#ctor(Microsoft.Windows.Design.Interaction.ToolCommand,Microsoft.Windows.Design.Interaction.ExecutedToolEventHandler)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.ToolCommandBinding" /> class.</summary>
      <param name="command">The command to bind.</param>
      <param name="executedToolEventHandler">The event handler to raise when the command is executed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="command" /> or <paramref name="executedToolEventHandler" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolCommandBinding.#ctor(Microsoft.Windows.Design.Interaction.ToolCommand,Microsoft.Windows.Design.Interaction.ExecutedToolEventHandler,Microsoft.Windows.Design.Interaction.CanExecuteToolEventHandler)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.ToolCommandBinding" /> class.</summary>
      <param name="command">The command to bind.</param>
      <param name="executedToolEventHandler">The event handler to raise when the command is executed.</param>
      <param name="canExecuteToolEventHandler">The event handler to raise when the <see cref="M:Microsoft.Windows.Design.Interaction.ToolCommand.CanExecute(Microsoft.Windows.Design.Interaction.GestureData)" /> method is invoked.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="command" />, <paramref name="executeRoutedEventHandler" />, or <paramref name="canExecuteRoutedEventHandler" /> is null.</exception>
    </member>
    <member name="E:Microsoft.Windows.Design.Interaction.ToolCommandBinding.CanExecute">
      <summary>Occurs when QueryEnabled for the command is called.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ToolCommandBinding.Command">
      <summary>Gets or sets the tool command associated with this binding.</summary>
      <returns>The tool command associated with this binding.</returns>
    </member>
    <member name="E:Microsoft.Windows.Design.Interaction.ToolCommandBinding.Execute">
      <summary>Occurs when the command is executed.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.ToolCommandBindingCollection">
      <summary>Represents a collection of tool command bindings.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolCommandBindingCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.ToolCommandBindingCollection" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolCommandBindingCollection.AddRange(System.Collections.Generic.ICollection{Microsoft.Windows.Design.Interaction.ToolCommandBinding})">
      <summary>Adds the specified bindings to the collection.</summary>
      <param name="bindings">The bindings to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindings" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolCommandBindingCollection.InsertItem(System.Int32,Microsoft.Windows.Design.Interaction.ToolCommandBinding)">
      <summary>Inserts an item in to the collection.</summary>
      <param name="index">The index where to add the item.</param>
      <param name="item">The item to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolCommandBindingCollection.SetItem(System.Int32,Microsoft.Windows.Design.Interaction.ToolCommandBinding)">
      <summary>Sets the value of an item in the collection.</summary>
      <param name="index">The index of the value to set.</param>
      <param name="item">The value to set at the index.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.ToolGesture">
      <summary>Represents a tool interaction with the mouse. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolGesture.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.ToolGesture" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolGesture.#ctor(Microsoft.Windows.Design.Interaction.ToolAction)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.ToolGesture" /> class.</summary>
      <param name="action">The action to take.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolGesture.#ctor(Microsoft.Windows.Design.Interaction.ToolAction,System.Windows.Input.MouseButton)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.ToolGesture" /> class.</summary>
      <param name="action">The action to take.</param>
      <param name="button">Modifies the button states to only allow the specified button. For example, if you wanted to make a "Click" action only valid for the left mouse button, you would pass <see cref="F:System.Windows.Input.MouseButton.Left" /> in this parameter. The default is to allow all buttons.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolGesture.#ctor(Microsoft.Windows.Design.Interaction.ToolAction,System.Windows.Input.MouseButton,System.Windows.Input.ModifierKeys)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.ToolGesture" /> class.</summary>
      <param name="action">The action to take.</param>
      <param name="button">Modifies the button states to only allow the specified button. For example, if you wanted to make a "Click" action only valid for the left mouse button, you would pass <see cref="F:System.Windows.Input.MouseButton.Left" /> in this parameter. The default is to allow all buttons.</param>
      <param name="modifiers">The keyboard modifiers to use. By default, any keyboard modifiers are valid. You can restrict the set of valid modifiers by supplying them in this parameter.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ToolGesture.LeftButton">
      <summary>Gets or sets whether this gesture is allowed to be performed while the left mouse button is pressed.</summary>
      <returns>Returns <see cref="F:System.Windows.Input.MouseButtonState.Pressed" /> if this gesture is allowed to be performed while the left mouse button is pressed. The default returns <see cref="F:System.Windows.Input.MouseButtonState.Pressed" />.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)">
      <summary>Returns a value indicating whether this gesture matches an input event.</summary>
      <returns>true if this gesture matches the input event; otherwise, false.</returns>
      <param name="targetElement">The target element for this gesture.</param>
      <param name="inputEventArgs">The input event to compare with this gesture.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputEventArgs" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ToolGesture.MiddleButton">
      <summary>Gets or sets whether if this gesture is allowed to be performed while the middle mouse button is pressed. </summary>
      <returns>Returns <see cref="F:System.Windows.Input.MouseButtonState.Pressed" /> if this gesture is allowed to be performed while the middle mouse button is pressed. The default returns <see cref="F:System.Windows.Input.MouseButtonState.Pressed" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ToolGesture.Modifiers">
      <summary>Gets or sets the modifier keys that are allowed to be pressed for this gesture. </summary>
      <returns>Returns the modifier keys that are allowed to be pressed for this gesture. The default returns the combination of all modifier keys.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ToolGesture.RightButton">
      <summary>Gets or sets whether this gesture is allowed to be performed while the right mouse button is pressed. </summary>
      <returns>Returns <see cref="F:System.Windows.Input.MouseButtonState.Pressed" /> if this gesture is allowed to be performed while the right mouse button is pressed. The default returns <see cref="F:System.Windows.Input.MouseButtonState.Pressed" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ToolGesture.ToolAction">
      <summary>Gets or sets the action associated with this gesture.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.ToolAction" /> associated with this gesture.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ToolGesture.ToString">
      <summary>Returns a string that describes the gesture for diagnostic purposes.</summary>
      <returns>A diagnostic string that describes the gesture.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ToolGesture.XButton1">
      <summary>Gets or sets whether this gesture is allowed to be performed while the xbutton1 mouse button is pressed. </summary>
      <returns>Returns <see cref="F:System.Windows.Input.MouseButtonState.Pressed" /> if this gesture is allowed to be performed while the xbutton1 mouse button is pressed. The default returns <see cref="F:System.Windows.Input.MouseButtonState.Pressed" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ToolGesture.XButton2">
      <summary>Gets or sets whether this gesture is allowed to be performed while the xbutton2 mouse button is pressed. </summary>
      <returns>Returns <see cref="F:System.Windows.Input.MouseButtonState.Pressed" /> if this gesture is allowed to be performed while the xbutton2 mouse button is pressed. The default returns <see cref="F:System.Windows.Input.MouseButtonState.Pressed" />.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.ViewHitTestFilterCallback">
      <summary>Represents the callback method that specifies which parts of the visual tree to omit from hit test processing in the <see cref="M:Microsoft.Windows.Design.Interaction.ViewItem.HitTest(Microsoft.Windows.Design.Interaction.ViewHitTestFilterCallback,Microsoft.Windows.Design.Interaction.ViewHitTestResultCallback,System.Windows.Media.HitTestParameters)" /> method.</summary>
      <returns>A <see cref="T:System.Windows.Media.HitTestFilterBehavior" /> that specifies the hit testing behavior for <paramref name="potentialHitTestTarget" />.</returns>
      <param name="potentialHitTestTarget">A <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" />  to hit test. </param>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.ViewHitTestResult">
      <summary>Represents the return value from a hit test in the <see cref="M:Microsoft.Windows.Design.Interaction.ViewItem.HitTest(Microsoft.Windows.Design.Interaction.ViewHitTestFilterCallback,Microsoft.Windows.Design.Interaction.ViewHitTestResultCallback,System.Windows.Media.HitTestParameters)" /> method. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ViewHitTestResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.ViewHitTestResult" /> class. </summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ViewHitTestResult.ViewHit">
      <summary>Gets the <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> object that was hit.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> that was hit.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.ViewHitTestResultCallback">
      <summary>Represents a callback that is used to customize hit testing in the <see cref="M:Microsoft.Windows.Design.Interaction.ViewItem.HitTest(Microsoft.Windows.Design.Interaction.ViewHitTestFilterCallback,Microsoft.Windows.Design.Interaction.ViewHitTestResultCallback,System.Windows.Media.HitTestParameters)" /> method.</summary>
      <returns>A <see cref="T:System.Windows.Media.HitTestFilterBehavior" /> that specifies the hit testing behavior for <paramref name="result" />. </returns>
      <param name="result">A <see cref="T:Microsoft.Windows.Design.Interaction.ViewHitTestResult" /> to get hit test behavior for. </param>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.ViewItem">
      <summary>An abstract class that enables interaction with view objects.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ViewItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> class. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ViewItem.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> is equal to the current <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" />. </summary>
      <returns>true if the specified <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> is equal to the current <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" />; otherwise, false.</returns>
      <param name="obj">The <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> to compare with the current <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" />.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ViewItem.FlowDirection">
      <summary>Gets the FlowDirection property of the view.</summary>
      <returns>The <see cref="T:System.Windows.FlowDirection" /> value for the view.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ViewItem.GetHashCode">
      <summary>Serves as a hash function for a <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" />.</summary>
      <returns>A hash code for the current <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" />.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ViewItem.HitTest(Microsoft.Windows.Design.Interaction.ViewHitTestFilterCallback,Microsoft.Windows.Design.Interaction.ViewHitTestResultCallback,System.Windows.Media.HitTestParameters)">
      <summary>Initiates a hit test on the <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" />, with caller-defined <see cref="T:System.Windows.Media.HitTestFilterCallback" /> and <see cref="T:System.Windows.Media.HitTestResultCallback" /> methods.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.ViewHitTestResult" /> that holds the visual objects that were hit.  </returns>
      <param name="filterCallback">A delegate that specifies parts of the visual tree to omit from the hit test.</param>
      <param name="resultCallback">A delegate that customizes the hit test. </param>
      <param name="hitTestParameters">A <see cref="T:System.Windows.Media.HitTestParameters" /> that defines the hit test.  </param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ViewItem.IsDescendantOf(Microsoft.Windows.Design.Interaction.ViewItem)">
      <summary>Determines whether the visual object is a descendant of the ancestor visual object.</summary>
      <returns>true if the <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> is a descendant of <paramref name="ancestor" />; otherwise, false.</returns>
      <param name="ancestor">The <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> to test for an ancestor relationship.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ViewItem.IsDescendantOf(System.Windows.Media.Visual)">
      <summary>Gets a value that indicates whether the visual object is a descendant of the specified visual object. </summary>
      <returns>true if the <see cref="T:System.Windows.Media.Visual" /> is a descendant of <paramref name="ancestor" />; otherwise, false.</returns>
      <param name="ancestor">The <see cref="T:System.Windows.Media.Visual" /> to test for an ancestor relationship. </param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ViewItem.IsOffscreen">
      <summary>Gets a value that indicates whether the element is off the screen.</summary>
      <returns>true if the element is off the screen; otherwise, false. </returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ViewItem.IsVisible">
      <summary>Gets a value that indicates whether an element is visible.</summary>
      <returns>true if the element is visible; otherwise, false. </returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ViewItem.ItemType">
      <summary>Gets the type of the underlying dependency object that represents this view. </summary>
      <returns>The <see cref="T:System.Type" /> of the underlying dependency object.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ViewItem.LayoutTransform">
      <summary>Gets the layout transform of the current <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" />.</summary>
      <returns>The layout transform of the current <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ViewItem.LogicalChildren">
      <summary>Gets a collection of the immediate logical children of the current <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" />.</summary>
      <returns>An enumeration of <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> objects that holds the logical children of the current <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ViewItem.LogicalParent">
      <summary>Gets the logical parent of the current <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" />.</summary>
      <returns>A <see cref="T:System.Windows.DependencyObject" /> that represents the logical parent of the current <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ViewItem.Offset">
      <summary>Gets the offset of the view.</summary>
      <returns>A <see cref="T:System.Windows.Vector" /> that represents the offset of the current view.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ViewItem.op_Equality(Microsoft.Windows.Design.Interaction.ViewItem,Microsoft.Windows.Design.Interaction.ViewItem)">
      <summary>Determines whether the specified <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> instances are considered equal.</summary>
      <returns>true if <paramref name="obj1" /> is equal to <paramref name="obj2" />; otherwise, false.</returns>
      <param name="obj1">The first <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> to compare. </param>
      <param name="obj2">The second <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> to compare. </param>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ViewItem.op_Inequality(Microsoft.Windows.Design.Interaction.ViewItem,Microsoft.Windows.Design.Interaction.ViewItem)">
      <summary>Determines whether the specified <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> instances are considered not equal.</summary>
      <returns>true if <paramref name="obj1" /> is not equal to <paramref name="obj2" />; otherwise, false.</returns>
      <param name="obj1">The first <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> to compare. </param>
      <param name="obj2">The second <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> to compare. </param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ViewItem.PlatformObject">
      <summary>Gets the underlying dependency object that represents this view. </summary>
      <returns>The underlying dependency object.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ViewItem.PointToScreen(System.Windows.Point)">
      <summary>Converts a <see cref="T:System.Windows.Point" /> that represents the current coordinate system of the <see cref="T:System.Windows.Media.Visual" /> into a <see cref="T:System.Windows.Point" /> in screen coordinates.</summary>
      <returns>The converted <see cref="T:System.Windows.Point" /> value in screen coordinates.</returns>
      <param name="point">The <see cref="T:System.Windows.Point" /> value that represents the current coordinate system of the <see cref="T:System.Windows.Media.Visual" />.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ViewItem.RenderSize">
      <summary>Gets the render size of the view.</summary>
      <returns>A <see cref="T:System.Windows.Size" /> that represents the render size of the view.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ViewItem.RenderSizeBounds">
      <summary>Gets the layout rectangle for the view. </summary>
      <returns>A <see cref="T:System.Windows.Rect" /> that represents the render size and offset relative to the logical parent.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ViewItem.SelectionFrameBounds">
      <summary>Gets the bounds of the selection frame. </summary>
      <returns>A <see cref="T:System.Windows.Rect" /> that represents the selection frame for the current <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ViewItem.Transform">
      <summary>Gets the transform value for the current <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" />.</summary>
      <returns>A <see cref="T:System.Windows.Media.Transform" /> that represents the transform of the current <see cref="T:System.Windows.Media.Visual" />. </returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ViewItem.TransformFromVisual(System.Windows.Media.Visual)">
      <summary>Returns a transform that can be used to transform coordinates from the specified visual object to the view.</summary>
      <returns>A <see cref="T:System.Windows.Media.Transform" /> that represents the conversion, or null if the transform could not be computed.</returns>
      <param name="visual">
        <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> to transform the coordinates to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visual" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ViewItem.TransformToView(Microsoft.Windows.Design.Interaction.ViewItem)">
      <summary>Returns a transform that can be used to transform coordinates from the view to the specified view object.</summary>
      <returns>A <see cref="T:System.Windows.Media.Transform" /> that represents the conversion, or null if the transform could not be computed.</returns>
      <param name="view">The <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> to transform the coordinates to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="view" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ViewItem.TransformToVisual(System.Windows.Media.Visual)">
      <summary>Returns a transform that can be used to transform coordinates from the view to the specified visual object.</summary>
      <returns>A <see cref="T:System.Windows.Media.Transform" /> that represents the conversion, or null if the transform could not be computed.</returns>
      <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> to transform the coordinates to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visual" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.ViewItem.UpdateLayout">
      <summary>Calls the UpdateLayout method on the underlying platform object. </summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ViewItem.Visibility">
      <summary>Gets the <see cref="T:System.Windows.Visibility" />  property of the view.</summary>
      <returns>The <see cref="T:System.Windows.Visibility" /> value of the view. </returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ViewItem.VisualChildren">
      <summary>Gets a collection of the immediate visual children of this <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" />.</summary>
      <returns>An enumeration of <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> objects that holds the visual children of the current <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.ViewItem.VisualParent">
      <summary>Gets the visual parent of the current <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" />.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" /> that represents the logical parent of the current <see cref="T:Microsoft.Windows.Design.Interaction.ViewItem" />.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Interaction.WheelGestureData">
      <summary>Provides gesture data about the mouse wheel.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.WheelGestureData.#ctor(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.WheelGestureData" /> class.</summary>
      <param name="context">The editing context that owns this gesture data.</param>
      <param name="sourceModel">The model where the gesture began.</param>
      <param name="targetModel">The model the gesture is currently over.</param>
      <param name="delta">The amount the wheel has moved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" />, <paramref name="sourceModel" />, or <paramref name="targetModel" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.WheelGestureData.#ctor(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem,System.Int32,System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Interaction.WheelGestureData" /> class. </summary>
      <param name="context">The editing context that owns this gesture data.</param>
      <param name="sourceModel">The model where the gesture began.</param>
      <param name="targetModel">The model the gesture is currently over.</param>
      <param name="delta">The amount the wheel has moved.</param>
      <param name="sourceAdorner">The source adorner to associate with the gesture, if it exists. This parameter can be null.</param>
      <param name="targetAdorner">The target adorner to associate with the gesture, if it exists. This parameter can be null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" />, <paramref name="sourceModel" /> or <paramref name="targetModel" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Interaction.WheelGestureData.Delta">
      <summary>Gets the scroll delta from the mouse scroll wheel.</summary>
      <returns>An integer representing the amount that the scroll wheel has moved.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.WheelGestureData.FromEventArgs(Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs)">
      <summary>Provides a <see cref="T:Microsoft.Windows.Design.Interaction.WheelGestureData" /> object from an <see cref="T:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs" /> object.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Interaction.WheelGestureData" /> object that is contained in the <see cref="P:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs.Parameter" /> property of the <see cref="T:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs" /> object.</returns>
      <param name="e">The <see cref="T:Microsoft.Windows.Design.Interaction.CanExecuteToolEventArgs" /> object passed into a command callback.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Interaction.WheelGestureData.FromEventArgs(Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs)">
      <summary>Provides a <see cref="T:Microsoft.Windows.Design.Interaction.WheelGestureData" /> object from an <see cref="T:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs" /> object.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Interaction.WheelGestureData" /> object that is contained in the <see cref="P:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs.Parameter" /> property of the <see cref="T:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs" /> object.</returns>
      <param name="e">The <see cref="T:Microsoft.Windows.Design.Interaction.ExecutedToolEventArgs" /> object passed into a command callback.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="T:Microsoft.Windows.Design.Model.CreateOptions">
      <summary>Specifies how to create a new item.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Model.CreateOptions.None">
      <summary>Just creates the object and does not perform any operations on it. This is the default.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.Model.CreateOptions.InitializeDefaults">
      <summary>Creates the item and specifies that the object should perform any default initialization. This flag is generally passed in when a new control or object is being created by a user.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Model.DefaultInitializer">
      <summary>Used to configure a new object in the designer. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.DefaultInitializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Model.DefaultInitializer" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.DefaultInitializer.InitializeDefaults(Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Initializes default values for the specified item.</summary>
      <param name="item">The item to initialize. This should not be null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.DefaultInitializer.InitializeDefaults(Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.EditingContext)">
      <summary>Initializes default values for the specified item using the provided editing context.</summary>
      <param name="item">The item to initialize. This should not be null.</param>
      <param name="context">The editing context. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="T:Microsoft.Windows.Design.Model.DesignModeValueProvider">
      <summary>Captures property changes that are made by the user in the designer and provides new values at design time.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.DesignModeValueProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Model.DesignModeValueProvider" /> class.</summary>
      <exception cref="T:System.InvalidOperationException">An invalid property is added to <see cref="P:Microsoft.Windows.Design.Model.DesignModeValueProvider.Properties" />.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.DesignModeValueProvider.InvalidateProperty(Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Metadata.PropertyIdentifier)">
      <summary>Invalidates the specified property.</summary>
      <param name="item">The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> to invalidate property changes for.</param>
      <param name="property">The property that is to be invalidated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.DesignModeValueProvider.Properties">
      <summary>Gets the set of properties to capture.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.PropertyIdentifierCollection" /> that contains the set of properties to capture.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.DesignModeValueProvider.TranslatePropertyValue(Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Metadata.PropertyIdentifier,System.Object)">
      <summary>Captures property changes that were made by the user in the designer and uses custom logic to provide new values at design time.</summary>
      <returns>The value to set the property to in the designer.</returns>
      <param name="item">The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> to capture property changes for.</param>
      <param name="identifier">The property that the user is changing the value of.</param>
      <param name="value">The new value that the user is changing the property to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> is empty.</exception>
    </member>
    <member name="T:Microsoft.Windows.Design.Model.FeatureExtensions">
      <summary>Adds LINQ extension methods to the <see cref="T:Microsoft.Windows.Design.Features.FeatureManager" /> and <see cref="T:Microsoft.Windows.Design.Features.FeatureConnector`1" /> classes to support model items.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.FeatureExtensions.CreateFeatureProviders(Microsoft.Windows.Design.Features.FeatureManager,System.Type,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Creates feature providers of the specified type and model item.</summary>
      <returns>An enumeration of created providers.</returns>
      <param name="source">The feature manager to use.</param>
      <param name="featureProviderType">The type of feature provider to create.</param>
      <param name="item">The model item to create the feature providers for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="featureProviderType" /> or <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.FeatureExtensions.CreateFeatureProviders(Microsoft.Windows.Design.Features.FeatureManager,System.Type,Microsoft.Windows.Design.Model.ModelItem,System.Predicate{System.Type})">
      <summary>Creates feature providers of the specified type and model item.</summary>
      <returns>An enumeration of created providers.</returns>
      <param name="source">The feature manager to use.</param>
      <param name="featureProviderType">The type of feature provider to create.</param>
      <param name="item">The model item to create the feature providers for.</param>
      <param name="match">A predicate to use when creating feature providers. If the predicate returns true, the feature provider is included in the enumeration.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="featureProviderType" />, <paramref name="item" />, or <paramref name="match" /> is null.</exception>
    </member>
    <member name="T:Microsoft.Windows.Design.Model.ModelEditingScope">
      <summary>Represents a group of changes to the editing store.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelEditingScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Model.ModelEditingScope" /> class. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelEditingScope.CanComplete">
      <summary>Determines whether the <see cref="M:Microsoft.Windows.Design.Model.ModelEditingScope.OnComplete" /> method can be called, or whether the change should instead be reverted.</summary>
      <returns>true if completion can occur; false if the change should instead be reverted.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelEditingScope.Complete">
      <summary>Completes the editing scope.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:Microsoft.Windows.Design.Model.ModelEditingScope" /> has already been completed or reverted.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelEditingScope.Description">
      <summary>Gets or sets a description for the group.</summary>
      <returns>A string containing the description for the group.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelEditingScope.Dispose">
      <summary>Releases all resources used by the <see cref="T:Microsoft.Windows.Design.Model.ModelEditingScope" />. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelEditingScope.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Microsoft.Windows.Design.Model.ModelEditingScope" /> class and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelEditingScope.Finalize">
      <summary>Called during finalization to abort the group.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelEditingScope.OnComplete">
      <summary>Performs the actual complete of the editing scope.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelEditingScope.OnRevert(System.Boolean)">
      <summary>Performs the actual revert of the editing scope.</summary>
      <param name="finalizing">true if the abort occurs because the object is being finalized. Some undo systems may try to abort in this case, while others may abandon the change and record it as a reactive undo.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelEditingScope.Revert">
      <summary>Abandons the changes that were made during the editing scope.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:Microsoft.Windows.Design.Model.ModelEditingScope" /> has already been committed.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelEditingScope.Update">
      <summary>Performs a synchronous refresh of the view.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Model.ModelEvent">
      <summary>Represents an event on an item. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelEvent.#ctor">
      <summary>When overridden in a derived class, initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Model.ModelEvent" /> class. </summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelEvent.EventType">
      <summary>When overridden in a derived class, gets the data type of the delegate for this event.</summary>
      <returns>A <see cref="T:System.Type" /> that represents the data type of this event.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelEvent.GetAttributes(Microsoft.Windows.Design.Metadata.TypeIdentifier)">
      <summary>Returns the attributes of the specified type that are declared on this event and the event's handler type.</summary>
      <returns>An enumeration of <see cref="T:Microsoft.Windows.Design.Metadata.TypeIdentifier" /> objects that represent the attributes of the specified type.</returns>
      <param name="attributeTypeIdentifier">A <see cref="T:Microsoft.Windows.Design.Metadata.TypeIdentifier" /> object for which attributes are needed.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelEvent.GetAttributes(System.Type)">
      <summary>Returns the attributes of the specified type that are declared on this event and the event's handler type.</summary>
      <returns>An enumeration of <see cref="T:System.Type" /> objects that represent the attributes of the specified type.</returns>
      <param name="attributeType">A <see cref="T:System.Type" /> object for which attributes are needed.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelEvent.Handlers">
      <summary>When overridden in a derived class, gets a collection of method names that should handle this event. </summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> that represents the names of methods that should handle this event.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelEvent.IsBrowsable">
      <summary>When overridden in a derived class, gets whether the event can be shown in a property window.</summary>
      <returns>true if the event is shown in a property window; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelEvent.IsEventOfType(Microsoft.Windows.Design.Metadata.TypeIdentifier)">
      <summary>Determines whether this event is of the specified type, or implements the interface of the specified type.</summary>
      <returns>true if this event is of the type represented by <paramref name="typeIdentifer" />; otherwise, false.</returns>
      <param name="typeIdentifier">A <see cref="T:Microsoft.Windows.Design.Metadata.TypeIdentifier" /> object that represents the type.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelEvent.IsEventOfType(System.Type)">
      <summary>Determines whether this event is of the specified type, or implements the interface of the specified type.</summary>
      <returns>true if this event is of the type represented by <paramref name="type" />; otherwise, false.</returns>
      <param name="type">A <see cref="T:System.Type" /> object that represents the type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelEvent.Name">
      <summary>When overridden in a derived class, gets the name of this event.</summary>
      <returns>A string representing the name of this event.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelEvent.Parent">
      <summary>When overridden in a derived class, gets the parent of this event. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> representing the parent of this event.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Model.ModelEventCollection">
      <summary>Represents an enumeration of events. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelEventCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Model.ModelEventCollection" /> class. </summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Model.ModelFactory">
      <summary>Used to create instances of model items in the designer. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelFactory.CreateItem(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.Metadata.TypeIdentifier,Microsoft.Windows.Design.Model.CreateOptions,System.Object[])">
      <summary>Creates a new model item for the specified type identifier.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that represents the newly created item type. This method might return null if the type identifier could not be resolved.</returns>
      <param name="context">The designer's editing context.</param>
      <param name="typeIdentifier">An identifier for the type of item to create.</param>
      <param name="options">A set of create options to use when creating the item. The default is <see cref="F:Microsoft.Windows.Design.Model.CreateOptions.None" />.</param>
      <param name="arguments">An optional array of arguments that should be passed to the constructor of the item.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelFactory.CreateItem(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.Metadata.TypeIdentifier,System.Object[])">
      <summary>Creates a new model item for the specified type identifier.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that represents the newly created item type. This method might return null if the type identifier could not be resolved.</returns>
      <param name="context">The designer's editing context.</param>
      <param name="typeIdentifier">An identifier for the type of item to create.</param>
      <param name="arguments">An optional array of arguments that should be passed to the constructor of the item.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelFactory.CreateItem(Microsoft.Windows.Design.EditingContext,System.Object)">
      <summary>Creates a new model item by creating a deep copy of the specified object.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that represents the newly created item.</returns>
      <param name="context">An <see cref="T:Microsoft.Windows.Design.EditingContext" /> representing the designer's editing context</param>
      <param name="item">An object representing the item to clone.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> or <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelFactory.CreateItem(Microsoft.Windows.Design.EditingContext,System.Type,Microsoft.Windows.Design.Model.CreateOptions,System.Object[])">
      <summary>Creates a new model item for the specified item type.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that represents the newly created item type.</returns>
      <param name="context">An <see cref="T:Microsoft.Windows.Design.EditingContext" /> representing the designer's editing context.</param>
      <param name="itemType">A <see cref="T:System.Type" /> representing the type of item to create.</param>
      <param name="options">A set of create options to use when creating the item. The default value is <see cref="F:Microsoft.Windows.Design.Model.CreateOptions.None" />.</param>
      <param name="arguments">An optional array of arguments that should be passed to the constructor of the item.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemType" /> or <paramref name="context" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> is not valid.</exception>
      <exception cref="T:System.InvalidOperationException">There is no editing model in the context that can create new items.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelFactory.CreateItem(Microsoft.Windows.Design.EditingContext,System.Type,System.Object[])">
      <summary>Creates a new model item for the specified item type.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that represents the newly created item type.</returns>
      <param name="context">An <see cref="T:Microsoft.Windows.Design.EditingContext" /> representing the designer's editing context.</param>
      <param name="itemType">A <see cref="T:System.Type" /> representing the type of item to create.</param>
      <param name="arguments">An optional array of arguments that should be passed to the constructor of the item.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemType" /> or <paramref name="context" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">There is no editing model in the context that can create new items.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelFactory.CreateStaticMemberItem(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.Metadata.TypeIdentifier,System.String)">
      <summary>Creates a new model item that represents the value of a static member of the specified class. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that represents the newly created item type. This method might return null if the type identifier could not be resolved.</returns>
      <param name="context">The designer's editing context.</param>
      <param name="typeIdentifier">An identifier for the type being referenced.</param>
      <param name="memberName">The name of the static member being referenced.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> or <paramref name="memberName" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelFactory.CreateStaticMemberItem(Microsoft.Windows.Design.EditingContext,System.Type,System.String)">
      <summary>Creates a new model item that represents the value of a static member of the specified class. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that represents the value of the static member specified by <paramref name="memberName" /> on the type specified by <paramref name="type" />.</returns>
      <param name="context">The designer's editing context.</param>
      <param name="type">The type that contains the static member being referenced.</param>
      <param name="memberName">The name of the static member being referenced.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" />, <paramref name="type" />, or <paramref name="memberName" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelFactory.ResolveType(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.Metadata.TypeIdentifier)">
      <summary>Gets a resolved type for the specified <see cref="T:Microsoft.Windows.Design.Metadata.TypeIdentifier" />.</summary>
      <returns>A type that matches <paramref name="typeIdentifier" /> from one of the designer's referenced assemblies.</returns>
      <param name="context">The designer's editing context.</param>
      <param name="typeIdentifier">A platform-agnostic identifier for the type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> or <paramref name="typeIdentifier" /> is null.</exception>
    </member>
    <member name="T:Microsoft.Windows.Design.Model.ModelItem">
      <summary>Represents a single item in the editing model.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> class. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItem.BeginEdit">
      <summary>When overridden in a derived class, this method is called when performing multiple operations on an object or group of objects. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelEditingScope" /> that must be either completed or reverted.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItem.BeginEdit(System.String)">
      <summary>When overridden in a derived class, this method is called when performing multiple operations on an object or group of objects. </summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.Model.ModelEditingScope" /> that must be either completed or reverted.</returns>
      <param name="description">An optional description that describes the change. This string is set into the editing scope’s <see cref="P:Microsoft.Windows.Design.Model.ModelEditingScope.Description" /> property.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItem.Content">
      <summary>When overridden in a derived class, gets a <see cref="T:Microsoft.Windows.Design.Model.ModelProperty" /> representing the item's <see cref="T:System.Windows.Markup.ContentPropertyAttribute" />.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelProperty" /> representing the item's <see cref="T:System.Windows.Markup.ContentPropertyAttribute" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItem.Context">
      <summary>Gets an object that contains contextual information about the designer this <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> was created for.</summary>
      <returns>An object that contains contextual information about the relevant designer.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItem.Events">
      <summary>When overridden in a derived class, gets the public events on this object.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelEventCollection" /> that contains the events on this object.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItem.GetAttributes(Microsoft.Windows.Design.Metadata.TypeIdentifier)">
      <summary>Gets the attributes of the requested type that are declared on this item.</summary>
      <returns>A collection of attributes of the requested type declared on this item.</returns>
      <param name="attributeTypeIdentifier">An identifier for the requested type.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItem.GetAttributes(System.Type)">
      <summary>Gets the attributes of the requested type that are declared on this item.</summary>
      <returns>A collection of attributes of the requested type declared on this item.</returns>
      <param name="attributeType">The requested type.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItem.GetCurrentValue">
      <summary>When overridden in a derived class, returns the current value of the underlying model object the <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> is wrapping. </summary>
      <returns>Returns an object that represents the current value of the underlying model object the <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> is wrapping.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItem.IsItemOfType(Microsoft.Windows.Design.Metadata.TypeIdentifier)">
      <summary>Gets a value that indicates whether this item is of the specified type or implements the specified interface.</summary>
      <returns>true if this item is of the specified type or implements the specified interface; otherwise, false.</returns>
      <param name="typeIdentifier">An identifier for the type or interface to test.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItem.IsItemOfType(System.Type)">
      <summary>Gets a value that indicates whether this item is of the specified type or implements the specified interface.</summary>
      <returns>true if this item is of the specified type or implements the specified interface; otherwise, false.</returns>
      <param name="type">The type or interface to test.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItem.ItemType">
      <summary>When overridden in a derived class, gets the type of object the item represents.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the type of the underlying object.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItem.Name">
      <summary>When overridden in a derived class, gets or sets the name or ID of the item. </summary>
      <returns>A string representing the name of the item.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItem.Parent">
      <summary>When overridden in a derived class, gets the item that is the parent of this item. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that represents the parent item of this object.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItem.Properties">
      <summary>When overridden in a derived class, gets the public properties on this object. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelPropertyCollection" /> that contains the properties on this <see cref="T:Microsoft.Windows.Design.Model.ModelItem" />.</returns>
    </member>
    <member name="E:Microsoft.Windows.Design.Model.ModelItem.PropertyChanged">
      <summary>When overridden in a derived class, occurs when a property on the model changes.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItem.Root">
      <summary>When overridden in a derived class, gets the item that is the root of this tree.</summary>
      <returns>The item that is the root of this tree, or null there if there is no root yet.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItem.Source">
      <summary>When overridden in a derived class, gets the property that provided this value. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelProperty" /> that represents the source of this <see cref="T:Microsoft.Windows.Design.Model.ModelItem" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItem.View">
      <summary>When overridden in a derived class, gets the visual or visual3D representing the UI for this item. </summary>
      <returns>A <see cref="T:System.Windows.DependencyObject" /> representing the UI for this item.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Model.ModelItemCollection">
      <summary>Implements support for a collection of <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> objects.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Model.ModelItemCollection" /> class. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.Add(Microsoft.Windows.Design.Model.ModelItem)">
      <summary>When overridden in a derived class, adds the specified item to the collection.</summary>
      <param name="item">A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> to be added to the collection.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.Add(System.Object)">
      <summary>When overridden in a derived class, adds the specified object to the collection. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> representing the value.</returns>
      <param name="value">An object to be added to the collection.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.Clear">
      <summary>When overridden in a derived class, clears the contents of the collection.</summary>
    </member>
    <member name="E:Microsoft.Windows.Design.Model.ModelItemCollection.CollectionChanged">
      <summary>When overridden in a derived class, occurs when the contents of this collection is changed.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.Contains(Microsoft.Windows.Design.Model.ModelItem)">
      <summary>When overridden in a derived class, returns a value indicating whether the collection contains the specified item.</summary>
      <returns>true if the <paramref name="item" /> is contained in the collection; otherwise, false.</returns>
      <param name="item">A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> to be tested.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.Contains(System.Object)">
      <summary>When overridden in a derived class, returns a value indicating whether the collection contains the specified value.</summary>
      <returns>true if the <paramref name="item" /> is contained in the collection; otherwise, false.</returns>
      <param name="value">An object to be tested.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.CopyTo(Microsoft.Windows.Design.Model.ModelItem[],System.Int32)">
      <summary>When overridden in a derived class, copies the contents of the collection into the specified array.</summary>
      <param name="array">The array for the current <see cref="T:Microsoft.Windows.Design.Model.ModelItemCollection" /> to be copied to.</param>
      <param name="arrayIndex">The location in the destination array to copy the items from the collection to.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemCollection.Count">
      <summary>When overridden in a derived class, gets the count of items in the collection.</summary>
      <returns>An integer that represents the number of items in the collection.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.GetEnumerator">
      <summary>When overridden in a derived class, returns an enumerator for the items in the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can act as an enumerator for the items in this dictionary.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.IndexOf(Microsoft.Windows.Design.Model.ModelItem)">
      <summary>When overridden in a derived class, returns the index of the specified item.</summary>
      <returns>Returns an integer representing the index of the specified <see cref="T:Microsoft.Windows.Design.Model.ModelItem" />. If the item is not found it returns -1.</returns>
      <param name="item">The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> to find the index of.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.Insert(System.Int32,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>When overridden in a derived class, inserts an item at the specified location. </summary>
      <param name="index">The index for the item to be inserted.</param>
      <param name="item">A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> to be inserted at the specified index.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.Insert(System.Int32,System.Object)">
      <summary>When overridden in a derived class, inserts an item at the specified location. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> representing the value.</returns>
      <param name="index">The index for the item to be inserted.</param>
      <param name="value">A object to be inserted at the specified index.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemCollection.IsFixedSize">
      <summary>When overridden in a derived class, gets a value indicating whether the collection is a fixed size. </summary>
      <returns>true if the collection is a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemCollection.IsReadOnly">
      <summary>When overridden in a derived class, gets a value indicating whether the collection can be modified.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemCollection.IsSynchronized">
      <summary>When overridden in a derived class, gets a value indicating whether the collection is synchronized.</summary>
      <returns>true if the collection is synchronized; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemCollection.Item(System.Int32)">
      <summary>When overridden in a derived class, gets or sets the item at the specified index. This is a dependency property.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> representing the item at the specified index.</returns>
      <param name="index">The index to be set or retrieved.</param>
    </member>
    <member name="F:Microsoft.Windows.Design.Model.ModelItemCollection.ItemProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.Model.ModelItemCollection.Item(System.Int32)" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.Model.ModelItemCollection.Item(System.Int32)" /> dependency property.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.Move(System.Int32,System.Int32)">
      <summary>When overridden in a derived class, moves an item to a new index. </summary>
      <param name="fromIndex">The index of the item to move.</param>
      <param name="toIndex">The index to move it to.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.Remove(Microsoft.Windows.Design.Model.ModelItem)">
      <summary>When overridden in a derived class, removes an item from the collection. </summary>
      <returns>true if the item is successfully removed; otherwise, false.</returns>
      <param name="item">The item to be removed.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.Remove(System.Object)">
      <summary>When overridden in a derived class, removes a value from the collection. </summary>
      <returns>true if the item is successfully removed; otherwise, false.</returns>
      <param name="value">The item to be removed from the collection.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.RemoveAt(System.Int32)">
      <summary>When overridden in a derived class, removes an item at the specified index.</summary>
      <param name="index">The index at which to remove the item.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemCollection.SyncRoot">
      <summary>When overridden in a derived class, gets an object that can be used to synchronize this collection. </summary>
      <returns>An object that can be used to synchronize the collection.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemCollection.System#Collections#ICollection#Count">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.Count" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemCollection.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemCollection.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.</returns>
      <param name="value">The object to add to the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.System#Collections#IList#Clear">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Clear" />.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted. </param>
      <param name="value">The object to insert into the <see cref="T:System.Collections.IList" />. </param>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemCollection.System#Collections#IList#IsFixedSize">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemCollection.System#Collections#IList#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsReadOnly" />.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemCollection.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="value">The object to remove from the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="T:Microsoft.Windows.Design.Model.ModelItemDictionary">
      <summary>Implements key/value dictionary support for <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> objects.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Model.ModelItemDictionary" /> class. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.Add(Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>When overridden in a derived class, adds the item to the dictionary under the specified key.</summary>
      <param name="key">A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that is the key for this dictionary entry.</param>
      <param name="value">A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that is the value for this dictionary entry.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.Add(System.Object,System.Object)">
      <summary>When overridden in a derived class, adds the value to the dictionary under the specified key. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> representing the key in the dictionary.</returns>
      <param name="key">A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that is the key for this dictionary entry.</param>
      <param name="value">A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that is the value for this dictionary entry.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.Clear">
      <summary>When overridden in a derived class, clears the contents of the dictionary.</summary>
    </member>
    <member name="E:Microsoft.Windows.Design.Model.ModelItemDictionary.CollectionChanged">
      <summary>When overridden in a derived class, occurs when the contents of this dictionary is changed.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.Contains(System.Collections.Generic.KeyValuePair{Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem})">
      <summary>When overridden in a derived class, returns whether the dictionary contains the specified key value pair.</summary>
      <returns>true if the dictionary contains the <paramref name="item" />; otherwise, false.</returns>
      <param name="item">The item to be tested for inclusion in the dictionary.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.ContainsKey(Microsoft.Windows.Design.Model.ModelItem)">
      <summary>When overridden in a derived class, returns a value indicating whether the dictionary contains the specified key.</summary>
      <returns>true if the dictionary contains the <paramref name="key" />; otherwise, false.</returns>
      <param name="key">A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that represents the key to be tested.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.ContainsKey(System.Object)">
      <summary>When overridden in a derived class, returns a value indicating whether the dictionary contains the specified key.</summary>
      <returns>true if the dictionary contains the <paramref name="key" />; otherwise, false.</returns>
      <param name="key">A object that represents the key to be tested.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.CopyTo(System.Collections.Generic.KeyValuePair{Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem}[],System.Int32)">
      <summary>When overridden in a derived class, copies the contents of the dictionary into the specified array beginning at the specified index.</summary>
      <param name="array">The array for the current <see cref="T:Microsoft.Windows.Design.Model.ModelItemDictionary" /> to be copied to.</param>
      <param name="arrayIndex">The location within the destination array to copy the items from the dictionary to.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemDictionary.Count">
      <summary>When overridden in a derived class, gets the count of items in the dictionary.</summary>
      <returns>An integer that represents the number of items in the dictionary.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.GetEnumerator">
      <summary>When overridden in a derived class, returns an enumerator for the items in the dictionary.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can act as an enumerator for the items in this dictionary.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemDictionary.IsFixedSize">
      <summary>When overridden in a derived class, gets a value indicating whether the dictionary is a fixed size. </summary>
      <returns>true if the dictionary is a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemDictionary.IsReadOnly">
      <summary>When overridden in a derived class, gets a value indicating whether the dictionary can be modified.</summary>
      <returns>true if the dictionary is read-only; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemDictionary.IsSynchronized">
      <summary>When overridden in a derived class, gets a value indicating whether the dictionary is synchronized.</summary>
      <returns>true if the dictionary is synchronized; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemDictionary.Item(Microsoft.Windows.Design.Model.ModelItem)">
      <summary>When overridden in a derived class, gets or sets the item at the specified key. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> representing the item at the specified key.</returns>
      <param name="key">A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that represents the key to an item in the <see cref="T:Microsoft.Windows.Design.Model.ModelItemDictionary" />.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemDictionary.Item(System.Object)">
      <summary>When overridden in a derived class, gets or sets the item at the specified key. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> representing the item at the specified key.</returns>
      <param name="key">An object that represents the key to an item in the <see cref="T:Microsoft.Windows.Design.Model.ModelItemDictionary" />.</param>
    </member>
    <member name="F:Microsoft.Windows.Design.Model.ModelItemDictionary.KeyProperty">
      <summary>ModelItemDictionary provides an attached property “Key”, which is adds to all items contained in the dictionary. The data type of the Key property is “ModelItem”.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemDictionary.Keys">
      <summary>When overridden in a derived class, gets the keys of the dictionary. </summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> that contains the keys of the <see cref="T:Microsoft.Windows.Design.Model.ModelItemDictionary" />. </returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.Remove(Microsoft.Windows.Design.Model.ModelItem)">
      <summary>When overridden in a derived class, removes the item from the dictionary. </summary>
      <returns>true if the item is successfully removed; otherwise, false.</returns>
      <param name="key">A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> representing the key of the item to be removed.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.Remove(System.Object)">
      <summary>When overridden in a derived class, removes the item from the dictionary. </summary>
      <returns>true if the item is successfully removed; otherwise, false.</returns>
      <param name="key">An object representing the key of the item to be removed.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemDictionary.SyncRoot">
      <summary>When overridden in a derived class, gets the object used to synchronize this dictionary. </summary>
      <returns>An object that can be used to synchronize the dictionary.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem})">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)" />.</summary>
      <param name="item">The key/value pair to add to the collection.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem})">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)" />.</summary>
      <returns>true if <paramref name="item" /> is found in the collection; otherwise, false.</returns>
      <param name="item">The key/value pair to locate in the collection.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem}[],System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins. </param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem})">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)" />.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the collection; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original collection.</returns>
      <param name="item">The key/value pair to remove from the collection.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemDictionary.System#Collections#ICollection#Count">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.Count" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemDictionary.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemDictionary.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />.</summary>
      <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add. </param>
      <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add. </param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.System#Collections#IDictionary#Clear">
      <summary>For a description of this member, see <see cref="M:System.Collections.IDictionary.Clear" />.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.System#Collections#IDictionary#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IDictionary.Contains(System.Object)" />.</summary>
      <returns>true if the dictionary contains an element with <paramref name="key" />; otherwise, false. </returns>
      <param name="key">The key to locate in the dictionary.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.System#Collections#IDictionary#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IDictionary.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemDictionary.System#Collections#IDictionary#IsFixedSize">
      <summary>For a description of this member, see <see cref="P:System.Collections.IDictionary.IsFixedSize" />.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemDictionary.System#Collections#IDictionary#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.IDictionary.IsReadOnly" />.</summary>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemDictionary.System#Collections#IDictionary#Item(System.Object)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IDictionary.Item(System.Object)" />.</summary>
      <returns>The element with the specified key.</returns>
      <param name="key">The key of the element to get or set.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemDictionary.System#Collections#IDictionary#Keys">
      <summary>For a description of this member, see <see cref="P:System.Collections.IDictionary.Keys" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.System#Collections#IDictionary#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IDictionary.Remove(System.Object)" />.</summary>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemDictionary.System#Collections#IDictionary#Values">
      <summary>For a description of this member, see <see cref="P:System.Collections.IDictionary.Values" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can act as an enumerator for the items in this dictionary.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.TryGetValue(Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem@)">
      <summary>When overridden in a derived class, retrieves the value for the specified key.</summary>
      <returns>true if a value associated with <paramref name="key" /> is found; otherwise, false.</returns>
      <param name="key">A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> representing the key to be tested.</param>
      <param name="value">If a value is found for the <paramref name="key" />, this out parameter contains the <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> value that is retrieved.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemDictionary.TryGetValue(System.Object,Microsoft.Windows.Design.Model.ModelItem@)">
      <summary>When overridden in a derived class, retrieves the value for the specified key.</summary>
      <returns>true if a value associated with <paramref name="key" /> is found; otherwise, false.</returns>
      <param name="key">An object representing the key to be tested.</param>
      <param name="value">If a value is found for the <paramref name="key" />, this out parameter contains the <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> value that is retrieved.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemDictionary.Values">
      <summary>When overridden in a derived class, gets the values of the dictionary. </summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> that contains the items of the <see cref="T:Microsoft.Windows.Design.Model.ModelItemDictionary" />. </returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Model.ModelItemEventArgs">
      <summary>Provides data for events that use <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> instances. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelItemEventArgs.#ctor(Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Model.ModelItemEventArgs" /> class. </summary>
      <param name="item">A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> to include.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelItemEventArgs.ModelItem">
      <summary>Gets the associated <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> instance. </summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> associated with the current <see cref="T:Microsoft.Windows.Design.Model.ModelItemEventArgs" /> instance.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Model.ModelMemberCollection`2">
      <summary>Represents a collection for model members.</summary>
      <typeparam name="TItemType">The type of item the collection represents.</typeparam>
      <typeparam name="TKeyType"></typeparam>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelMemberCollection`2.Find(System.String)">
      <summary>Searches the collection for an item with the specified key and returns it if it is found. </summary>
      <returns>A TItemType with the specified key. If not found, this method returns null.</returns>
      <param name="name">The key of the item to find.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelMemberCollection`2.Find(System.String,System.Boolean)">
      <summary>When overridden in a derived class, searches the collection for an item with the specified key and returns it if it is found. </summary>
      <returns>A TItemType with the specified key. If not found, this method throws an exception or returns null, depending on the value passed to <paramref name="throwOnError" />.</returns>
      <param name="name">The key of the item to find.</param>
      <param name="throwOnError">true if an exception should be thrown if the item is not found; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not found and <paramref name="throwOnError" /> is true.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelMemberCollection`2.Find(`1)">
      <summary>Searches the collection for an item with the specified key and returns it if it is found. </summary>
      <returns>A TItemType with the specified key. If not found, this method returns null.</returns>
      <param name="value">The key of the item to find.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelMemberCollection`2.Find(`1,System.Boolean)">
      <summary>When overridden in a derived class, searches the collection for an item with the specified key and returns it if it is found. </summary>
      <returns>A TItemType with the specified key. If not found, this method throws an exception or returns null, depending on the value passed to <paramref name="throwOnError" />.</returns>
      <param name="value">The key of the item to find.</param>
      <param name="throwOnError">true if an exception should be thrown if the item is not found; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not found and <paramref name="throwOnError" /> is true.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelMemberCollection`2.GetEnumerator">
      <summary>When overridden in a derived class, returns an enumerator to enumerate items.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> to enumerate items.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelMemberCollection`2.Item(System.String)">
      <summary>Searches the collection for an item with the specified key and returns it if it is found.</summary>
      <returns>A TItemType with the specified key. If not found, this property throws an exception.</returns>
      <param name="name">The key of the item to find.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not found.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelMemberCollection`2.Item(`1)">
      <summary>Searches the collection for an item with the specified key and returns it if it is found. </summary>
      <returns>A TItemType with the specified key. If not found, this property throws an exception.</returns>
      <param name="value">The key of the item to find.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not found.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelMemberCollection`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> to enumerate items.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Model.ModelParent">
      <summary>A class that can be used to help set the parent of an item. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelParent.CanParent(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.Model.ModelItem,System.Type)">
      <summary>Determines if the specified type can be the parent of the specified child type.</summary>
      <returns>true if the specified <paramref name="parent" /> item can accept instances of <paramref name="childType" /> as a child; otherwise, false.</returns>
      <param name="context">The editing context to use.</param>
      <param name="parent">The parent.</param>
      <param name="childType">The type of item you wish to parent.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelParent.FindParent(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Finds a viable parent for the specified child and editing context.</summary>
      <returns>An item that can accept a <paramref name="childItem" />, or null if no viable parent could be found.</returns>
      <param name="context">The editing context to use.</param>
      <param name="childItem">The item you wish to parent.</param>
      <param name="startingItem">The item to use as a starting point for the search.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelParent.FindParent(Microsoft.Windows.Design.EditingContext,System.Type,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Finds a viable parent for the specified type of child and editing context.</summary>
      <returns>An item that can accept an item of type <paramref name="childType" />, or null if no viable parent could be found.</returns>
      <param name="context">The editing context to use.</param>
      <param name="childType">The type of item you wish to parent.</param>
      <param name="startingItem">The item to use as a starting point for the search.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelParent.FindParent(System.Type,Microsoft.Windows.Design.Interaction.GestureData)">
      <summary>Finds a viable parent for the specified type of child.</summary>
      <returns>An item that can accept an item of type <paramref name="childType" />, or null if no viable parent could be found.</returns>
      <param name="childType">The type of item you wish to parent.</param>
      <param name="gestureData">Gesture data that can be used to determine the starting item and position of the search.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelParent.Parent(Microsoft.Windows.Design.EditingContext,Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Sets the specified item as the parent of the specified child item.</summary>
      <param name="context">The editing context to use.</param>
      <param name="parentItem">The parent to set the child into.</param>
      <param name="childItem">The child to be parented.</param>
    </member>
    <member name="T:Microsoft.Windows.Design.Model.ModelProperty">
      <summary>Represents a property on an item.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelProperty.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Model.ModelProperty" /> class. </summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelProperty.AttachedOwnerType">
      <summary>When overridden in a derived class, gets the type which defines this property.</summary>
      <returns>A <see cref="T:System.Type" /> which defines this property if the <see cref="P:Microsoft.Windows.Design.Model.ModelProperty.IsAttached" /> property returns true. Otherwise, returns null.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelProperty.ClearValue">
      <summary>When overridden in a derived class, clears the local value for the property.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelProperty.Collection">
      <summary>When overridden in a derived class, gets the <see cref="P:Microsoft.Windows.Design.Model.ModelProperty.Value" /> property cast as a <see cref="T:Microsoft.Windows.Design.Model.ModelItemCollection" />. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelItemCollection" /> that represents <see cref="P:Microsoft.Windows.Design.Model.ModelProperty.Value" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelProperty.ComputedValue">
      <summary>When overridden in a derived class, gets the currently computed value for this property.</summary>
      <returns>An object representing the computed value for this property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelProperty.DefaultValue">
      <summary>When overridden in a derived class, gets the default value for this property. </summary>
      <returns>An object representing the default value for this property. If the property does not define a default value, this property returns null.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelProperty.Dictionary">
      <summary>When overridden in a derived class, gets the <see cref="P:Microsoft.Windows.Design.Model.ModelProperty.Value" /> property cast as a <see cref="T:Microsoft.Windows.Design.Model.ModelItemDictionary" />. </summary>
      <returns>
        <see cref="P:Microsoft.Windows.Design.Model.ModelProperty.Value" /> cast as an <see cref="T:Microsoft.Windows.Design.Model.ModelItemDictionary" />. </returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelProperty.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to this <see cref="T:Microsoft.Windows.Design.Model.ModelProperty" /> object.</summary>
      <returns>true if the properties are equal; otherwise, false.</returns>
      <param name="obj">An object to be tested for equality.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelProperty.GetAttributes(Microsoft.Windows.Design.Metadata.TypeIdentifier)">
      <summary>Gets the attributes of the requested type that are declared on this property and the property's property type.</summary>
      <returns>A collection of attributes of the requested type that are declared on this property and the property's property type.</returns>
      <param name="attributeTypeIdentifier">An identifier for the requested type.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelProperty.GetAttributes(System.Type)">
      <summary>Gets the attributes of the requested type that are declared on this property and the property's property type.</summary>
      <returns>A collection of attributes of the requested type that are declared on this property and the property's property type.</returns>
      <param name="attributeType">The requested type.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelProperty.GetHashCode"></member>
    <member name="P:Microsoft.Windows.Design.Model.ModelProperty.IsAttached">
      <summary>When overridden in a derived class, gets a value indicating whether the property represents an attached property from a different type.</summary>
      <returns>true if the property represents an attached property from a different type; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelProperty.IsBrowsable">
      <summary>When overridden in a derived class, gets a value indicating whether the property can be shown in a property window.</summary>
      <returns>true if the property can be shown in a property window; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelProperty.IsCollection">
      <summary>When overridden in a derived class, gets a value indicating whether the value contained in the property is an ItemCollection.</summary>
      <returns>true if the property value is an ItemCollection; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelProperty.IsDictionary">
      <summary>When overridden in a derived class, gets a value indicating whether the value contained in the property is an ItemDictionary.</summary>
      <returns>true if the property value is an ItemDictionary; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelProperty.IsPropertyOfType(Microsoft.Windows.Design.Metadata.TypeIdentifier)">
      <summary>Gets a value that indicates whether this property is of the specified type or implements the specified interface.</summary>
      <returns>true if this property is of the specified type or implements the specified interface; otherwise, false.</returns>
      <param name="typeIdentifier">An identifier for the type or interface to test.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelProperty.IsPropertyOfType(System.Type)">
      <summary>Gets a value that indicates whether this property is of the specified type or implements the specified interface.</summary>
      <returns>true if this property is of the specified type or implements the specified interface; otherwise, false.</returns>
      <param name="type">The type or interface to test.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelProperty.IsReadOnly">
      <summary>When overridden in a derived class, gets a value indicating whether the property is read-only.</summary>
      <returns>true if the property is read only; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelProperty.IsSet">
      <summary>When overridden in a derived class, gets a value indicating whether the property's value is set locally.</summary>
      <returns>true if the property’s value is set locally; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelProperty.Name">
      <summary>When overridden in a derived class, gets the name of this property.</summary>
      <returns>A string representing the name of this property.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelProperty.op_Equality(Microsoft.Windows.Design.Model.ModelProperty,Microsoft.Windows.Design.Model.ModelProperty)">
      <summary>Determines whether two specified <see cref="T:Microsoft.Windows.Design.Model.ModelProperty" /> objects are equal.</summary>
      <returns>true if the properties are equal; otherwise, false.</returns>
      <param name="first">A <see cref="T:Microsoft.Windows.Design.Model.ModelProperty" /> to compare.</param>
      <param name="second">A <see cref="T:Microsoft.Windows.Design.Model.ModelProperty" /> to compare.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelProperty.op_Inequality(Microsoft.Windows.Design.Model.ModelProperty,Microsoft.Windows.Design.Model.ModelProperty)">
      <summary>Determines whether two specified <see cref="T:Microsoft.Windows.Design.Model.ModelProperty" /> objects are not equal.</summary>
      <returns>true if the properties are not equal; otherwise, false.</returns>
      <param name="first">A <see cref="T:Microsoft.Windows.Design.Model.ModelProperty" /> to compare.</param>
      <param name="second">A <see cref="T:Microsoft.Windows.Design.Model.ModelProperty" /> to compare.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelProperty.Parent">
      <summary>When overridden in a derived class, gets the parent of this property. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> instance representing the parent of this property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelProperty.PropertyType">
      <summary>When overridden in a derived class, gets the data type of the property.</summary>
      <returns>A <see cref="T:System.Type" /> representing the type of this property.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelProperty.SetValue(System.Object)">
      <summary>When overridden in a derived class, sets a local value on a property. </summary>
      <returns>If the value is already a <see cref="T:Microsoft.Windows.Design.Model.ModelItem" />, the input value is returned. If the value is not a <see cref="T:Microsoft.Windows.Design.Model.ModelItem" />, a newly created <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> wrapping the value is returned.</returns>
      <param name="value">An object representing the value to be set.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.ModelProperty.Value">
      <summary>When overridden in a derived class, gets the value of this property. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> instance representing the value of this property.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Model.ModelPropertyCollection">
      <summary>Represents a collection of properties. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.ModelPropertyCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Model.ModelPropertyCollection" /> class. </summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Model.PropertyIdentifierCollection">
      <summary>Represents a collection of property identifiers.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.PropertyIdentifierCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Model.PropertyIdentifierCollection" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.PropertyIdentifierCollection.Add(Microsoft.Windows.Design.Metadata.TypeIdentifier,System.String)">
      <summary>Adds a new property identifier.</summary>
      <param name="typeIdentifier">An identifier for the owning type of the property to be added.</param>
      <param name="name">The name of the property to be added to the collection.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.PropertyIdentifierCollection.Add(System.Type,System.String)">
      <summary>Adds a new property identifier.</summary>
      <param name="ownerType">The owning type of the property to be added.</param>
      <param name="name">The name of the property to be added.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.PropertyIdentifierCollection.InsertItem(System.Int32,Microsoft.Windows.Design.Metadata.PropertyIdentifier)">
      <summary>Inserts a new property identifier in the collection.</summary>
      <param name="index">The index at which <paramref name="item" /> will be inserted.</param>
      <param name="item">The property identifier to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item " />already exists in the collection.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.PropertyIdentifierCollection.SetItem(System.Int32,Microsoft.Windows.Design.Metadata.PropertyIdentifier)">
      <summary>Sets the property identifier at the specified index.</summary>
      <param name="index">The index that will be set to <paramref name="item" />.</param>
      <param name="item">The property identifier to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item " />already exists in the collection.</exception>
    </member>
    <member name="T:Microsoft.Windows.Design.Model.PropertyInvalidatedEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Windows.Design.Services.ValueTranslationService.PropertyInvalidated" /> event. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Model.PropertyInvalidatedEventArgs.#ctor(Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Metadata.PropertyIdentifier)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Model.PropertyInvalidatedEventArgs" /> class. </summary>
      <param name="item">The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> associated with the invalidated property.</param>
      <param name="property">The <see cref="T:Microsoft.Windows.Design.Metadata.PropertyIdentifier" /> of the property that was invalidated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> or <paramref name="property" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.PropertyInvalidatedEventArgs.InvalidatedProperty">
      <summary>Gets the <see cref="T:Microsoft.Windows.Design.Metadata.PropertyIdentifier" /> of the property that was invalidated.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Metadata.PropertyIdentifier" /> of the property that was invalidated.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Model.PropertyInvalidatedEventArgs.Item">
      <summary>Gets the <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> associated with the invalidated property.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> associated with the invalidated property.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Policies.ItemPolicy">
      <summary>A policy that specifies a set of rules in the designer.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.ItemPolicy.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Policies.ItemPolicy" /> class.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Policies.ItemPolicy.Context">
      <summary>Gets the editing context for the designer. </summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.EditingContext" /> for the designer.</returns>
      <exception cref="T:System.InvalidOperationException">The policy has not been activated.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.ItemPolicy.GetSurrogateItems(Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Returns an optional set of surrogate items for this item. </summary>
      <returns>An enumeration of surrogate items to check. The default returns an empty enumeration.</returns>
      <param name="item">The item to retrieve the surrogate for.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Policies.ItemPolicy.IsSurrogate">
      <summary>Gets a value indicating whether the policy is a surrogate policy. </summary>
      <returns>true if the policy is a surrogate policy; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.ItemPolicy.OnActivated">
      <summary>Called when a policy is activated. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.ItemPolicy.OnDeactivated">
      <summary>Called when the policy is deactivated. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.ItemPolicy.OnPolicyItemsChanged(Microsoft.Windows.Design.Policies.PolicyItemsChangedEventArgs)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.Policies.ItemPolicy.PolicyItemsChanged" /> event. </summary>
      <param name="e">A <see cref="T:Microsoft.Windows.Design.Policies.PolicyItemsChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Policies.ItemPolicy.PolicyItems">
      <summary>Gets an enumeration of all items in the policy.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the set of items in the policy.</returns>
    </member>
    <member name="E:Microsoft.Windows.Design.Policies.ItemPolicy.PolicyItemsChanged">
      <summary>Occurs when the policy changes. </summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Policies.PolicyAddedEventArgs">
      <summary>Provides data for the <see cref="T:Microsoft.Windows.Design.Policies.PolicyAddedEventArgs" /> event.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.PolicyAddedEventArgs.#ctor(Microsoft.Windows.Design.Policies.ItemPolicy)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Policies.PolicyAddedEventArgs" /> class. </summary>
      <param name="policy">The newly added policy.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Policies.PolicyAddedEventArgs.Policy">
      <summary>Gets the policy that was newly added.</summary>
      <returns>The newly added <see cref="T:Microsoft.Windows.Design.Policies.ItemPolicy" />.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Policies.PolicyDrivenFeatureConnector`1">
      <summary>Creates feature providers based on item policies. </summary>
      <typeparam name="TFeatureProviderType">The type of feature provider.</typeparam>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.PolicyDrivenFeatureConnector`1.#ctor(Microsoft.Windows.Design.Features.FeatureManager)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Policies.PolicyDrivenFeatureConnector`1" /> class. </summary>
      <param name="manager">The feature manager that manages this connector.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.PolicyDrivenFeatureConnector`1.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Microsoft.Windows.Design.Policies.PolicyDrivenFeatureConnector`1" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:Microsoft.Windows.Design.Policies.PolicyDrivenFeatureConnector`1.FeatureProviders">
      <summary>Gets an enumeration of all current feature providers.</summary>
      <returns>An enumeration of all current feature providers.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.PolicyDrivenFeatureConnector`1.FeatureProvidersAdded(Microsoft.Windows.Design.Model.ModelItem,System.Collections.Generic.IEnumerable{`0})">
      <summary>Called by the policy feature connector when a policy changes and feature providers are added to the set of active feature providers.</summary>
      <param name="item">The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that offers the feature providers.</param>
      <param name="featureProviders">An enumeration of feature providers that have been added.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.PolicyDrivenFeatureConnector`1.FeatureProvidersRemoved(Microsoft.Windows.Design.Model.ModelItem,System.Collections.Generic.IEnumerable{`0})">
      <summary>Called by the policy feature connector when a policy changes and feature providers are removed from the set of active feature providers.</summary>
      <param name="item">The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> that offers the feature providers.</param>
      <param name="featureProviders">An enumeration of feature providers that have been removed.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.PolicyDrivenFeatureConnector`1.IsValidProvider(Microsoft.Windows.Design.Features.FeatureProvider)">
      <summary>Tests if a feature provider is valid for invocation.</summary>
      <returns>true if <paramref name="featureProvider" /> is valid for invocation; otherwise, false. </returns>
      <param name="featureProvider">The feature provider to test for validity.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.PolicyDrivenFeatureConnector`1.UpdateFeatureProviders">
      <summary>Refreshes the feature providers based on the <see cref="T:Microsoft.Windows.Design.Policies.ItemPolicy" />. </summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Policies.PolicyDrivenFeatureConnector`1.ItemFeatureProvider">
      <summary>Identifies the feature providers that belong to a <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> instance.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Policies.PolicyDrivenFeatureConnector`1.ItemFeatureProvider.FeatureProvider">
      <summary>Gets the type of the feature provider. </summary>
      <returns>The <see cref="type" /> of the feature provider.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Policies.PolicyDrivenFeatureConnector`1.ItemFeatureProvider.Item">
      <summary>Gets the <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> associated with the feature provider.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> associated with the feature provider</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Policies.PolicyItemsChangedEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Windows.Design.Policies.ItemPolicy.PolicyItemsChanged" /> event.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.PolicyItemsChangedEventArgs.#ctor(Microsoft.Windows.Design.Policies.ItemPolicy,System.Collections.Generic.IEnumerable{Microsoft.Windows.Design.Model.ModelItem},System.Collections.Generic.IEnumerable{Microsoft.Windows.Design.Model.ModelItem})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Policies.PolicyItemsChangedEventArgs" /> class.</summary>
      <param name="policy">The policy that has changed.</param>
      <param name="itemsAdded">The items that have been added to the policy since the last change event.</param>
      <param name="itemsRemoved">The items that have been removed from the policy since the last change event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="policy" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Policies.PolicyItemsChangedEventArgs.ItemsAdded">
      <summary>Gets the items that have been added to the policy since the last change event.</summary>
      <returns>An enumeration of <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> objects that were added during the policy change. </returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Policies.PolicyItemsChangedEventArgs.ItemsRemoved">
      <summary>Gets the items that have been removed from the policy since the last change event.</summary>
      <returns>An enumeration of <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> objects that were removed during the policy change. </returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Policies.PolicyItemsChangedEventArgs.Policy">
      <summary>Gets the policy that changed.</summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.Policies.ItemPolicy" /> object representing the policy that changed.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Policies.PrimarySelectionPolicy">
      <summary>A policy that specifies the primarily selected element.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.PrimarySelectionPolicy.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Policies.PrimarySelectionPolicy" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.PrimarySelectionPolicy.GetPolicyItems(Microsoft.Windows.Design.Interaction.Selection)">
      <summary>Returns the policy item that represents the primary selection.</summary>
      <returns>Either a single element that is the primary selection, or an empty enumeration.</returns>
      <param name="selection">The current selection.</param>
    </member>
    <member name="T:Microsoft.Windows.Design.Policies.SecondarySelectionPolicy">
      <summary>A policy that specifies all items in the selection that are not the primary selection.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.SecondarySelectionPolicy.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Policies.SecondarySelectionPolicy" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.SecondarySelectionPolicy.IsInPolicy(Microsoft.Windows.Design.Interaction.Selection,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Gets a value indicating whether the specified item is in the selection and is not the primary selection. </summary>
      <returns>true if <paramref name="item" /> is not the primary selection; otherwise, false.</returns>
      <param name="selection">Selection state.</param>
      <param name="item">Item to be evaluated.</param>
    </member>
    <member name="T:Microsoft.Windows.Design.Policies.SelectionParentPolicy">
      <summary>A policy that specifies the set of unique parents for the current set of selected items.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.SelectionParentPolicy.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Policies.SelectionParentPolicy" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.SelectionParentPolicy.GetPolicyItems(Microsoft.Windows.Design.Interaction.Selection)">
      <summary>Overrides the default <see cref="M:Microsoft.Windows.Design.Policies.SelectionPolicy.GetPolicyItems(Microsoft.Windows.Design.Interaction.Selection)" /> method to return the unique parents of the specified selection.</summary>
      <returns>An enumeration of unique parents for the given selection.</returns>
      <param name="selection">The current selection.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.SelectionParentPolicy.IsInPolicy(Microsoft.Windows.Design.Interaction.Selection,Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Evaluates whether the specified parent item is to be included in the policy. </summary>
      <returns>true if <paramref name="parent" /> is to be included in the policy; otherwise, false.</returns>
      <param name="selection">Selection state.</param>
      <param name="item">Item to be evaluated.</param>
      <param name="parent">Parent of item to be evaluated.</param>
    </member>
    <member name="T:Microsoft.Windows.Design.Policies.SelectionPolicy">
      <summary>A policy that makes all items in the selection available. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.SelectionPolicy.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Policies.SelectionPolicy" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.SelectionPolicy.GetPolicyItems(Microsoft.Windows.Design.Interaction.Selection)">
      <summary>Returns the policy items from the specified selection. </summary>
      <returns>An enumeration of <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> objects to use for this policy. </returns>
      <param name="selection">The current selection.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.SelectionPolicy.IsInPolicy(Microsoft.Windows.Design.Interaction.Selection,Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Gets a value indicating whether the specified item is to be included in the policy. </summary>
      <returns>true if item is to be included in the policy; otherwise, false.</returns>
      <param name="selection">A <see cref="T:Microsoft.Windows.Design.Interaction.Selection" /> to filter with policy logic.</param>
      <param name="item">Item to be evaluated.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.SelectionPolicy.OnActivated">
      <summary>Called when this policy is activated. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.SelectionPolicy.OnDeactivated">
      <summary>Called when this policy is deactivated. </summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Policies.SelectionPolicy.PolicyItems">
      <summary>Gets an enumeration of items that are affected by this policy.</summary>
      <returns>An enumeration of <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> objects that are affected by this policy.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Policies.UsesItemPolicyAttribute">
      <summary>Restricts a feature provider to a specified policy. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.UsesItemPolicyAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Policies.UsesItemPolicyAttribute" /> class.</summary>
      <param name="itemPolicyType">The type of policy this extension can be associated with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemPolicyType" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Policies.UsesItemPolicyAttribute.AllRequired">
      <summary>Overrides the <see cref="P:Microsoft.Windows.Design.RequirementAttribute.AllRequired" /> property to return false. </summary>
      <returns>Always false.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.UsesItemPolicyAttribute.CreateSubscription(Microsoft.Windows.Design.EditingContext)">
      <summary>Returns a <see cref="T:Microsoft.Windows.Design.RequirementSubscription" /> object that can be used to be notified when this policy is available.</summary>
      <returns>A new <see cref="T:Microsoft.Windows.Design.RequirementSubscription" /> object.</returns>
      <param name="context">The editing context to check.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.UsesItemPolicyAttribute.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to this <see cref="T:Microsoft.Windows.Design.Policies.UsesItemPolicyAttribute" />.</summary>
      <returns>true if the specified object and this <see cref="T:Microsoft.Windows.Design.Policies.UsesItemPolicyAttribute" /> are equal; otherwise, false.</returns>
      <param name="obj">The object to test.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.UsesItemPolicyAttribute.GetHashCode">
      <summary>Returns the hash code for this attribute.</summary>
      <returns>A hash code for this attribute.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Policies.UsesItemPolicyAttribute.ItemPolicyType">
      <summary>Gets the type of policy the feature provider can be associated with.</summary>
      <returns>A <see cref="T:System.Type" /> that represents the policy associated with the feature provider. </returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Policies.UsesItemPolicyAttribute.MeetsRequirement(Microsoft.Windows.Design.EditingContext)">
      <summary>Returns a value indicating whether the specified editing context contains the <see cref="P:Microsoft.Windows.Design.Policies.UsesItemPolicyAttribute.ItemPolicyType" /> associated with this attribute instance.</summary>
      <returns>true if this requirement is met; otherwise, false.</returns>
      <param name="context">The editing context to check.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Policies.UsesItemPolicyAttribute.TypeId">
      <summary>Gets the type ID for this attribute.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.AlternateContentPropertyAttribute">
      <summary>Indicates that a non-content property should be displayed in the object tree.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.AlternateContentPropertyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.AlternateContentPropertyAttribute" /> class. </summary>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.CategoryEditor">
      <summary>An abstract class for creating custom category editors.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.CategoryEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.CategoryEditor" /> class. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.CategoryEditor.ConsumesProperty(Microsoft.Windows.Design.PropertyEditing.PropertyEntry)">
      <summary>When overridden in a derived class, called once for each property in the category to determine which properties are edited by this <see cref="T:Microsoft.Windows.Design.PropertyEditing.CategoryEditor" />. </summary>
      <returns>true if this editor edits that property; otherwise, false.</returns>
      <param name="propertyEntry">The <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" /> to check to see if it is edited by this <see cref="T:Microsoft.Windows.Design.PropertyEditing.CategoryEditor" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.CategoryEditor.CreateEditorAttribute(Microsoft.Windows.Design.PropertyEditing.CategoryEditor)">
      <summary>Utility method that creates a new <see cref="T:System.ComponentModel.EditorAttribute" /> for the specified <see cref="T:Microsoft.Windows.Design.PropertyEditing.CategoryEditor" />.</summary>
      <returns>New <see cref="T:System.ComponentModel.EditorAttribute" /> for the specified <see cref="T:Microsoft.Windows.Design.PropertyEditing.CategoryEditor" />.</returns>
      <param name="editor">
        <see cref="T:Microsoft.Windows.Design.PropertyEditing.CategoryEditor" /> instance for which to create the new <see cref="T:System.ComponentModel.EditorAttribute" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.CategoryEditor.CreateEditorAttribute(System.Type)">
      <summary>Utility method that creates a new <see cref="T:System.ComponentModel.EditorAttribute" /> for the specified <see cref="T:Microsoft.Windows.Design.PropertyEditing.CategoryEditor" /> type.</summary>
      <returns>New <see cref="T:System.ComponentModel.EditorAttribute" /> for the specified <see cref="T:Microsoft.Windows.Design.PropertyEditing.CategoryEditor" /> type.</returns>
      <param name="categoryEditorType">
        <see cref="T:Microsoft.Windows.Design.PropertyEditing.CategoryEditor" /> type for which to create the new <see cref="T:System.ComponentModel.EditorAttribute" />.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.CategoryEditor.EditorTemplate">
      <summary>When overridden in a derived class, gets a <see cref="T:System.Windows.DataTemplate" /> that acts as the UI for a <see cref="T:Microsoft.Windows.Design.PropertyEditing.CategoryEditor" />. </summary>
      <returns>The <see cref="T:System.Windows.DataTemplate" /> object that represents the editor template.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.CategoryEditor.GetImage(System.Windows.Size)">
      <summary>When overridden in a derived class, returns an object that the host can place into a <see cref="T:System.Windows.Controls.ContentControl" /> in order to display it. </summary>
      <returns>An object that contain an icon for the category editor.</returns>
      <param name="desiredSize">The desired size of the image to return. This method should make the best attempt in matching the requested size, but it does not guarantee it.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.CategoryEditor.TargetCategory">
      <summary>When overridden in a derived class, gets a localized string that indicates which category this editor belongs to. </summary>
      <returns>A string representing the category that this editor belongs to.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.CategoryEntry">
      <summary>Represents a category of properties.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.CategoryEntry.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.CategoryEntry" /> class.</summary>
      <param name="name">The localized name of the category as defined by the <see cref="T:System.ComponentModel.CategoryAttribute" /> attribute.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is empty or null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.CategoryEntry.ApplyFilter(Microsoft.Windows.Design.PropertyEditing.PropertyFilter)">
      <summary>Determines if the <see cref="T:Microsoft.Windows.Design.PropertyEditing.CategoryEntry" /> matches a filter and stores the information.</summary>
      <param name="filter">The filter to compare to.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.CategoryEntry.CategoryName">
      <summary>Gets the name of the category.</summary>
      <returns>The name of the category.</returns>
    </member>
    <member name="E:Microsoft.Windows.Design.PropertyEditing.CategoryEntry.FilterApplied">
      <summary>Represents the method that handles the <see cref="E:Microsoft.Windows.Design.PropertyEditing.CategoryEntry.FilterApplied" /> event of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.CategoryEntry" />.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.CategoryEntry.Item(System.String)">
      <summary>When overridden in a derived class, gets the specified property.</summary>
      <returns>The property specified by <paramref name="propertyName" />.</returns>
      <param name="propertyName">The name of the property to return.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.CategoryEntry.MatchesFilter">
      <summary>Gets or sets a value indicating whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.CategoryEntry" /> matches a filter.</summary>
      <returns>true if the <see cref="T:Microsoft.Windows.Design.PropertyEditing.CategoryEntry" /> matches the filter; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.CategoryEntry.MatchesPredicate(Microsoft.Windows.Design.PropertyEditing.PropertyFilterPredicate)">
      <summary>When overridden in a derived class, indicates whether a <see cref="T:Microsoft.Windows.Design.PropertyEditing.CategoryEntry" /> matches a predicate.</summary>
      <returns>true if the <see cref="T:Microsoft.Windows.Design.PropertyEditing.CategoryEntry" /> matches the predicate; otherwise, false.</returns>
      <param name="predicate">The predicate to compare to.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.CategoryEntry.OnFilterApplied(Microsoft.Windows.Design.PropertyEditing.PropertyFilter)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.PropertyEditing.CategoryEntry.FilterApplied" /> event.</summary>
      <param name="filter">The filter that is being applied.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.CategoryEntry.OnPropertyChanged(System.String)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.PropertyEditing.CategoryEntry.PropertyChanged" /> event.</summary>
      <param name="propertyName">The name of the property that is changing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.CategoryEntry.Properties">
      <summary>When overridden in a derived class, gets all the properties in the category.</summary>
      <returns>An enumerable collection of all the properties in the category.</returns>
    </member>
    <member name="E:Microsoft.Windows.Design.PropertyEditing.CategoryEntry.PropertyChanged">
      <summary>Represents the method that handles the <see cref="E:Microsoft.Windows.Design.PropertyEditing.CategoryEntry.PropertyChanged" /> event of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.CategoryEntry" />.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource">
      <summary>Represents the source of a dependency property value. </summary>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.Ambient">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents an ambient property.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents an ambient property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.Binding">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a bound property.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a bound property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.CustomMarkupExtension">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a property set to a custom markup extension.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> that represents a property set to a custom markup extension.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.DataBound">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a data-bound property.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> that represents a data-bound property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.DefaultValue">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a property set to its default value.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> tha represents a property set to its default value.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.DynamicResource">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a property set to a dynamic resource.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a property set to a dynamic resource.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.Inherited">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents an inherited property.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> that represents an inherited property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.InheritedValue">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a property whose value was inherited.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a property whose value was inherited.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.IsAmbient">
      <summary>Gets a value that indicates whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> represents an ambient property.</summary>
      <returns>true if this object represents an ambient property; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.IsBinding">
      <summary>Gets a value that indicates whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> represents a bound property.</summary>
      <returns>true if this object represents a bound property; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.IsCustomMarkupExtension">
      <summary>Gets a value that indicates whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> represents a property set to a custom markup extension.</summary>
      <returns>true if this object represents a property set to a custom markup extension; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.IsDataBound">
      <summary>Gets a value that indicates whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> represents a data-bound property.</summary>
      <returns>true if this object represents a data-bound property; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.IsDefaultValue">
      <summary>Gets a value that indicates whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> represents a property set to its default value.</summary>
      <returns>true if this objects represents a property set to its default value; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.IsDynamicResource">
      <summary>Gets a value that indicates whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> represents a property set to a dynamic resource.</summary>
      <returns>true if this object represents a property set to a dynamic resource; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.IsExpression">
      <summary>Gets a value that indicates whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> represents a property set to an expression.</summary>
      <returns>true if this object represents a property set to an expression; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.IsInherited">
      <summary>Gets a value that indicates whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> represents an inherited property.</summary>
      <returns>true if this object represent an inherited property; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.IsInheritedValue">
      <summary>Gets a value that indicates whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> represents a property whose value was inherited.</summary>
      <returns>true if this object represents a property whose value was inherited; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.IsLocal">
      <summary>Gets a value that indicates whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> represents a local property.</summary>
      <returns>true if this object represents a local property; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.IsLocalResource">
      <summary>Gets a value that indicates whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> represents a property set to a local resource.</summary>
      <returns>true if this object represents a property set to a <see cref="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.LocalDynamicResource" /> or a <see cref="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.LocalStaticResource" />; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.IsLocalValue">
      <summary>Gets a value that indicates whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> represents a property set to a local value.</summary>
      <returns>true if this object represents a property set to a local value; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.IsMarkupExtension">
      <summary>Gets a value indicating whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> represents a property set to a markup extension.</summary>
      <returns>true if this object represents a property set to a markup extension; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.IsNull">
      <summary>Gets a value that indicates whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> represents a property set to x:Null.</summary>
      <returns>true if this object represents a property set to x:Null; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.IsResource">
      <summary>Gets a value that indicates whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> represents a property set to a resource.</summary>
      <returns>true if this object represents a property set to a <see cref="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.SystemResource" />, <see cref="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.LocalDynamicResource" />, or a <see cref="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.LocalStaticResource" />; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.IsStatic">
      <summary>Gets a value that indicates whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> represents a property set to a static value.</summary>
      <returns>true if this object represents a property set to a static value; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.IsStaticResource">
      <summary>Gets a value that indicates whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> represents a property set to a static resource.</summary>
      <returns>true if this object represents a property set to a static resource; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.IsSystemResource">
      <summary>Gets a value that indicates whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> represents a property set to a system resource.</summary>
      <returns>true if this object represents a property set to a <see cref="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.SystemResource" />; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.IsTemplateBinding">
      <summary>Gets a value that indicates whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> represents a template-bound property.</summary>
      <returns>true if this object represents a template-bound property; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.Local">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a local property.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> that represents a local property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.LocalDynamicResource">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a property set to a local dynamic resource.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> that represents a property set to a local dynamic resource.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.LocalStaticResource">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a property set to a local static resource.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> that represents a property set to a local static resource.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.LocalValue">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a property set to a local value.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a property set to a local value.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.Null">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a property set to x:Null.</summary>
      <returns>a <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a property set to x:Null.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.Static">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a property set to a static value.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a property set to a static value.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.StaticResource">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a property set to a static resource.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a property set to a static resource.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.SystemResource">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a property set to a system resource.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> that represents a property set to a system resource.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource.TemplateBinding">
      <summary>Gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> object that represents a template-bound property.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.DependencyPropertyValueSource" /> that represents a template-bound property.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.DialogPropertyValueEditor">
      <summary>Container for all dialog box-editing logic for <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" /> objects. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.DialogPropertyValueEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.DialogPropertyValueEditor" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.DialogPropertyValueEditor.#ctor(System.Windows.DataTemplate,System.Windows.DataTemplate)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.DialogPropertyValueEditor" /> class.</summary>
      <param name="dialogEditorTemplate">A <see cref="T:System.Windows.DataTemplate" /> that is hosted in a host-specific dialog box and has its <see cref="P:System.Windows.FrameworkElement.DataContext" /> set to the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />  that corresponds to the property being edited.</param>
      <param name="inlineEditorTemplate">A <see cref="T:System.Windows.DataTemplate" /> that is used for the inline editor. If used, its <see cref="P:System.Windows.FrameworkElement.DataContext" /> will be set to the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> that corresponds to the property being edited.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.DialogPropertyValueEditor.DialogEditorTemplate">
      <summary>Gets or sets the <see cref="T:System.Windows.DataTemplate" /> that is hosted by a host-specific dialog box and has its <see cref="P:System.Windows.FrameworkElement.DataContext" /> set to a <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />. </summary>
      <returns>The <see cref="T:System.Windows.DataTemplate" /> object that is the template for this value editor.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.DialogPropertyValueEditor.ShowDialog(Microsoft.Windows.Design.PropertyEditing.PropertyValue,System.Windows.IInputElement)">
      <summary>Called when the <see cref="P:Microsoft.Windows.Design.PropertyEditing.DialogPropertyValueEditor.DialogEditorTemplate" /> is null and a dialog box has been invoked by the user. </summary>
      <param name="propertyValue">The <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> for the property being edited</param>
      <param name="commandSource">The <see cref="T:System.Windows.IInputElement" /> that can be used as a source for execution of <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditorCommands" />. </param>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.EditModeSwitchButton">
      <summary>A convenience button that allows the user to switch between the different <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" /> modes. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.EditModeSwitchButton.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.EditModeSwitchButton" /> class. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.EditModeSwitchButton.OnCreateAutomationPeer">
      <summary>Creates and returns an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for use by the automation infrastructure.</summary>
      <returns>An <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for this object.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.EditModeSwitchButton.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Input.Mouse.MouseDown" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.EditModeSwitchButton.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Called when any dependency properties of this control was changed. </summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.EditModeSwitchButton.SyncModeToOwningContainer">
      <summary>Gets or sets a value that indicates whether to sync to the owning container. This is a dependency property.</summary>
      <returns>true if the <see cref="P:Microsoft.Windows.Design.PropertyEditing.EditModeSwitchButton.TargetEditMode" /> is calculated automatically to match the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ActiveEditMode" /> property of the owning <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" />. false if the mode to switch to is based on the <see cref="P:Microsoft.Windows.Design.PropertyEditing.EditModeSwitchButton.TargetEditMode" /> property. The default is true.</returns>
    </member>
    <member name="F:Microsoft.Windows.Design.PropertyEditing.EditModeSwitchButton.SyncModeToOwningContainerProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.PropertyEditing.EditModeSwitchButton.SyncModeToOwningContainer" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.PropertyEditing.EditModeSwitchButton.SyncModeToOwningContainer" /> dependency property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.EditModeSwitchButton.TargetEditMode">
      <summary>Gets or sets the mode to switch to when this control is clicked. This is a dependency property.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainerEditMode" /> object.</returns>
    </member>
    <member name="F:Microsoft.Windows.Design.PropertyEditing.EditModeSwitchButton.TargetEditModeProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.PropertyEditing.EditModeSwitchButton.TargetEditMode" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.PropertyEditing.EditModeSwitchButton.TargetEditMode" /> dependency property.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.ExtendedPropertyValueEditor">
      <summary>Container for any and all extended editor logic for properties. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.ExtendedPropertyValueEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.ExtendedPropertyValueEditor" /> class. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.ExtendedPropertyValueEditor.#ctor(System.Windows.DataTemplate,System.Windows.DataTemplate)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.ExtendedPropertyValueEditor" /> class with the specified extended and inline editor <see cref="T:System.Windows.DataTemplate" /> objects.</summary>
      <param name="extendedEditorTemplate">The <see cref="T:System.Windows.DataTemplate" /> used for the extended popup/pinned editor that is viewed within the Properties window. When used, its <see cref="P:System.Windows.FrameworkElement.DataContext" /> property will be set to a <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />.</param>
      <param name="inlineEditorTemplate">The <see cref="T:System.Windows.DataTemplate" /> used for the inline editor. When used, its <see cref="P:System.Windows.FrameworkElement.DataContext" /> property will be set to a <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.ExtendedPropertyValueEditor.ExtendedEditorTemplate">
      <summary>Get or sets the <see cref="T:System.Windows.DataTemplate" /> used for the extended popup/pinned editor. </summary>
      <returns>A <see cref="T:System.Windows.DataTemplate" /> that defines the editor. </returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.IIndexableAttribute">
      <summary>Defines an indexing operator on an attribute. </summary>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.IIndexableAttribute.Item(System.String)">
      <summary>Gets the attribute with the specified key. </summary>
      <returns>The <see cref="T:System.Attribute" /> that corresponds with <paramref name="key" />.</returns>
      <param name="key">The key to get the corresponding <see cref="T:System.Attribute" /> for.</param>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.IPropertyFilterTarget">
      <summary>Handles sorting and filtering functionality.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.IPropertyFilterTarget.ApplyFilter(Microsoft.Windows.Design.PropertyEditing.PropertyFilter)">
      <summary>Determines if the <see cref="T:Microsoft.Windows.Design.PropertyEditing.IPropertyFilterTarget" /> matches a filter and stores the information. </summary>
      <param name="filter">The filter to compare to.</param>
    </member>
    <member name="E:Microsoft.Windows.Design.PropertyEditing.IPropertyFilterTarget.FilterApplied">
      <summary>Occurs when a <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyFilter" /> is changed through a call to the <see cref="M:Microsoft.Windows.Design.PropertyEditing.IPropertyFilterTarget.ApplyFilter(Microsoft.Windows.Design.PropertyEditing.PropertyFilter)" /> method.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.IPropertyFilterTarget.MatchesFilter">
      <summary>Gets a value indicating whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.IPropertyFilterTarget" /> matches a filter.</summary>
      <returns>true if the <see cref="T:Microsoft.Windows.Design.PropertyEditing.IPropertyFilterTarget" /> matches the filter; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.IPropertyFilterTarget.MatchesPredicate(Microsoft.Windows.Design.PropertyEditing.PropertyFilterPredicate)">
      <summary>Indicates whether an <see cref="T:Microsoft.Windows.Design.PropertyEditing.IPropertyFilterTarget" /> matches a predicate.</summary>
      <returns>true if the <see cref="T:Microsoft.Windows.Design.PropertyEditing.IPropertyFilterTarget" /> matches the predicate; otherwise, false.</returns>
      <param name="predicate">The predicate to compare to.</param>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1">
      <summary>Maps a string key to an <see cref="T:System.Attribute" /> instance.</summary>
      <typeparam name="T">The type of attribute.</typeparam>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1.#ctor(System.String,`0)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> class. </summary>
      <param name="key">A unique string to associate with <paramref name="value" />.</param>
      <param name="value">The <see cref="T:System.Attribute" /> to associate with <paramref name="key" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> is equal to the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" />.</summary>
      <returns>true if the specified <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> is equal to the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" />; otherwise, false.</returns>
      <param name="obj">The <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> to compare with the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" />.</summary>
      <returns>The hash code for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1.Key">
      <summary>Gets the key for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" />.</summary>
      <returns>The key for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" />.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1.op_Equality(Microsoft.Windows.Design.PropertyEditing.KeyAttributePair{`0},Microsoft.Windows.Design.PropertyEditing.KeyAttributePair{`0})">
      <summary>Determines whether the specified <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> instances are considered equal.</summary>
      <returns>true if <paramref name="first" /> is equal to <paramref name="second" />; otherwise, false.</returns>
      <param name="pair1">The first <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> to compare.</param>
      <param name="pair2">The second <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> to compare.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1.op_Inequality(Microsoft.Windows.Design.PropertyEditing.KeyAttributePair{`0},Microsoft.Windows.Design.PropertyEditing.KeyAttributePair{`0})">
      <summary>Determines whether the specified <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> instances are considered not equal.</summary>
      <returns>true if <paramref name="first" /> is not equal to <paramref name="second" />; otherwise, false.</returns>
      <param name="pair1">The first <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> to compare.</param>
      <param name="pair2">The second <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> to compare.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1.Value">
      <summary>Gets the <see cref="T:System.Attribute" /> for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" />.</summary>
      <returns>The <see cref="T:System.Attribute" /> for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" />.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.NewItemFactory">
      <summary>Represents a factory for creating new items for a collection or for a property value. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NewItemFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.NewItemFactory" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NewItemFactory.CreateInstance(System.Type)">
      <summary>Creates an instance of the specified <see cref="T:System.Type" /> that can be added to the collection editor or sub-property editor.</summary>
      <returns>If a constructor is found for <paramref name="type" />, returns an instance of <paramref name="type" />; otherwise, null.</returns>
      <param name="type">The type of the object to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NewItemFactory.GetDisplayName(System.Type)">
      <summary>Gets a display name for the specified <see cref="T:System.Type" /> that can be added to the collection editor or sub-property editor.</summary>
      <returns>The name to display for <paramref name="type" />.</returns>
      <param name="type">The type for which to get a display name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NewItemFactory.GetImageStream(System.Type,System.Windows.Size,System.String@)">
      <summary>Gets an image for the specified <see cref="T:System.Type" /> that can be used as an icon in the collection editor or sub-property editor.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> that represents an image to display for <paramref name="type" />.</returns>
      <param name="type">The type to get an image for.</param>
      <param name="desiredSize">The requested size of the image. </param>
      <param name="imageName">The name of the image that was found.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.NewItemTypesAttribute">
      <summary>Used to specify which object types can be assigned as the value of a property or as the value of a property type. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NewItemTypesAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.NewItemTypesAttribute" /> class.</summary>
      <param name="type">A <see cref="T:System.Type" /> object that this attribute declares as being a valid new item type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NewItemTypesAttribute.#ctor(System.Type[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.NewItemTypesAttribute" /> class.</summary>
      <param name="types">An array of <see cref="T:System.Type" /> objects that this attribute declares as being valid new item types.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> is null or empty.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.NewItemTypesAttribute.FactoryType">
      <summary>Gets or sets the factory type associated with this attribute. </summary>
      <returns>A <see cref="T:System.Type" /> object that represents the type associated with this attribute.</returns>
      <exception cref="T:System.ArgumentException">type does not derive from <see cref="T:Microsoft.Windows.Design.PropertyEditing.NewItemFactory" />.</exception>
      <exception cref="T:System.ArgumentNullException">type is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.NewItemTypesAttribute.TypeId">
      <summary>Gets the type ID for this attribute. </summary>
      <returns>An object representing the type ID.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.NewItemTypesAttribute.Types">
      <summary>Gets a list of <see cref="T:System.Type" /> objects that this attribute declares as being valid new item types. </summary>
      <returns>An enumeration of the types that this attribute guarantees to be valid new item types.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute">
      <summary>Stores formatting information that is used for editing a number value. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute" /> class. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute.#ctor(Microsoft.Windows.Design.PropertyEditing.KeyAttributePair{Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute}[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute" /> class with the specified array of <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> instances. </summary>
      <param name="mapArray">An array of <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> instances.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute" /> class with the specified format string, precision, and scale. </summary>
      <param name="formatString">A number format string. </param>
      <param name="maxPrecision">An integer that represents the maximum number of decimal places handled by the number editor.</param>
      <param name="scale">A scale factor that is applied to the displayed value of the number.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Double},Microsoft.Windows.Design.PropertyEditing.KeyAttributePair{Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute}[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute" /> class with the specified format string, precision, scale, and <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> instances.</summary>
      <param name="formatString">A number format string. </param>
      <param name="maxPrecision">An integer that represents the maximum number of decimal places handled by the number editor.</param>
      <param name="scale">A scale factor that is applied to the displayed value of the number.</param>
      <param name="mapArray">An array of <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> instances.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute" />.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute" />; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute" />.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute.FormatString">
      <summary>Gets the number format string for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute" />.</summary>
      <returns>The number format string for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute" />.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute" />.</summary>
      <returns>The hash code for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute.Item(System.String)">
      <summary>Gets the <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute" /> with the specified key.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute" /> that corresponds with <paramref name="key" />.</returns>
      <param name="key">The key to get the corresponding <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute" /> for.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute.MaxPrecision">
      <summary>Gets the maximum number of decimal places handled by the number editor.</summary>
      <returns>An integer that represents the maximum number of decimal places handled by the number editor.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.NumberFormatAttribute.Scale">
      <summary>Gets the scale factor that is applied to the displayed value of the number.</summary>
      <returns>A scale factor that is applied to the displayed value of the number.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute">
      <summary>Contains information about the increments that are used to change a number value. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute" /> class. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute.#ctor(Microsoft.Windows.Design.PropertyEditing.KeyAttributePair{Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute}[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute" /> class with the specified <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> instances. </summary>
      <param name="mapArray">An array of <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> instances. </param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute.#ctor(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute" /> class with the specified increment values. </summary>
      <param name="smallChange">The value for a small increment.</param>
      <param name="defaultChange">The value for the default increment.</param>
      <param name="largeChange">The value for a large increment.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute.#ctor(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},Microsoft.Windows.Design.PropertyEditing.KeyAttributePair{Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute}[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute" /> class with the specified parameters. </summary>
      <param name="smallChange">The value for a small increment. </param>
      <param name="defaultChange">The value for the default increment.</param>
      <param name="largeChange">The value for a large increment.</param>
      <param name="mapArray">An array of <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> instances.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute.DefaultChange">
      <summary>Gets the value for the default increment.</summary>
      <returns>A double that represents the default increment.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute" />.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute" />; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute" />.</summary>
      <returns>The hash code for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute.Item(System.String)">
      <summary>Gets the <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute" /> with the specified key.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute" /> that corresponds with <paramref name="key" />.</returns>
      <param name="key">The key to get the corresponding <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute" /> for.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute.LargeChange">
      <summary>Gets the value for a large increment.</summary>
      <returns>A double that represents a large increment.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.NumberIncrementsAttribute.SmallChange">
      <summary>Gets the value for a small increment.</summary>
      <returns>A double that represents a small increment.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute">
      <summary>Defines a range on number-based attributes </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute" /> class. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute.#ctor(Microsoft.Windows.Design.PropertyEditing.KeyAttributePair{Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute}[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute" /> class with the specified <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> instances. </summary>
      <param name="mapArray">An array of <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> instances.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute.#ctor(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute" /> class with the specified hard and soft limit values. </summary>
      <param name="hardMinimum">The minimum value of the range, or null to use the default.</param>
      <param name="minimum">The soft minimum value of the range, or null to use the default.</param>
      <param name="maximum">The soft maximum value of the range, or null to use the default.</param>
      <param name="hardMaximum">The maximum value of the range, or null to use the default.</param>
      <param name="canBeAuto">true if the range can be set automatically; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute.#ctor(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},Microsoft.Windows.Design.PropertyEditing.KeyAttributePair{Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute}[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute" /> class. </summary>
      <param name="hardMinimum">The minimum value of the range, or null to use the default.</param>
      <param name="minimum">The soft minimum value of the range, or null to use the default.</param>
      <param name="maximum">The soft maximum value of the range, or null to use the default.</param>
      <param name="hardMaximum">The maximum value of the range, or null to use the default.</param>
      <param name="canBeAuto">true if the range can be set automatically; otherwise, false.</param>
      <param name="mapArray">An array of <see cref="T:Microsoft.Windows.Design.PropertyEditing.KeyAttributePair`1" /> instances.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute.CanBeAuto">
      <summary>Gets a value that indicates whether the range can be set automatically.  </summary>
      <returns>true if the range can be set automatically; otherwise, false. </returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute" />.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute" />; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute" />.</summary>
      <returns>The hash code for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute.HardMaximum">
      <summary>Get the hard limit on the maximum value.</summary>
      <returns>A double that represents the hard limit on the maximum value, or null to use the default value.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute.HardMinimum">
      <summary>Get the hard limit on the minimum value.</summary>
      <returns>A double that represents the hard limit on the minimum value, or null to use the default value.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute.Item(System.String)">
      <summary>Gets the <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute" /> with the specified key.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute" /> that corresponds with <paramref name="key" />.</returns>
      <param name="key">The key to get the corresponding <see cref="T:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute" /> for.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute.Maximum">
      <summary>Get the soft limit on the maximum value.</summary>
      <returns>A double that represents the soft limit on the maximum value, or null to use the default value.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.NumberRangesAttribute.Minimum">
      <summary>Get the soft limit on the minimum value.</summary>
      <returns>A double that represents the soft limit on the minimum value, or null to use the default value.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer">
      <summary>Used as a graphical container for <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" /> instances.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" /> class.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ActiveEditMode">
      <summary>Gets or sets the currently displayed edit mode for this container. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainerEditMode" /> for this container.</returns>
    </member>
    <member name="E:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ActiveEditModeChanged">
      <summary>Occurs when the active edit mode of this container is changed.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ActiveEditModeProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ActiveEditMode" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ActiveEditMode" /> dependency property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.DefaultPropertyValueEditor">
      <summary>Gets or sets the default <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor" />. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor" /> that represents the default property value editor.</returns>
    </member>
    <member name="F:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.DefaultPropertyValueEditorProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.DefaultPropertyValueEditor" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.DefaultPropertyValueEditor" /> dependency property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.DefaultStandardValuesPropertyValueEditor">
      <summary>Gets or sets the default standard values editor. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor" /> that represents the default standard values editor.</returns>
    </member>
    <member name="F:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.DefaultStandardValuesPropertyValueEditorProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.DefaultStandardValuesPropertyValueEditor" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.DefaultStandardValuesPropertyValueEditor" /> dependency property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.DialogCommandSource">
      <summary>Gets or sets the <see cref="T:System.Windows.IInputElement" /> to pass to the <see cref="M:Microsoft.Windows.Design.PropertyEditing.DialogPropertyValueEditor.ShowDialog(Microsoft.Windows.Design.PropertyEditing.PropertyValue,System.Windows.IInputElement)" /> method as the command source. </summary>
      <returns>An <see cref="T:System.Windows.IInputElement" /> to pass to the <see cref="M:Microsoft.Windows.Design.PropertyEditing.DialogPropertyValueEditor.ShowDialog(Microsoft.Windows.Design.PropertyEditing.PropertyValue,System.Windows.IInputElement)" /> method as the command source.</returns>
    </member>
    <member name="F:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.DialogCommandSourceProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.DialogCommandSource" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.DialogCommandSource" /> dependency property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.DialogEditorTemplate">
      <summary>Gets the most appropriate <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.DialogEditorTemplate" /> for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" />. </summary>
      <returns>A <see cref="T:System.Windows.DataTemplate" /> that represents the most appropriate <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.DialogEditorTemplate" /> for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ExtendedEditorTemplate">
      <summary>Gets the most appropriate <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ExtendedEditorTemplate" /> for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" />. </summary>
      <returns>A <see cref="T:System.Windows.DataTemplate" /> that represents the most appropriate <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ExtendedEditorTemplate" /> for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ExtendedPinnedRowTemplate">
      <summary>Gets or sets the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ExtendedPinnedRowTemplate" /> for this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" />. </summary>
      <returns>A <see cref="T:System.Windows.Controls.ControlTemplate" /> that represents the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ExtendedPinnedRowTemplate" /> for this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" />.</returns>
    </member>
    <member name="F:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ExtendedPinnedRowTemplateProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ExtendedPinnedRowTemplate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ExtendedPinnedRowTemplate" /> dependency property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ExtendedPopupRowTemplate">
      <summary>Gets or sets the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ExtendedPopupRowTemplate" /> for this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" />. </summary>
      <returns>A <see cref="T:System.Windows.Controls.ControlTemplate" /> that represents the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ExtendedPopupRowTemplate" /> for this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" />.</returns>
    </member>
    <member name="F:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ExtendedPopupRowTemplateProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ExtendedPopupRowTemplate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ExtendedPopupRowTemplate" /> dependency property.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.GetOwningPropertyContainer(System.Windows.DependencyObject)">
      <summary>Gets the value of the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.OwningPropertyContainer" /> attached property for a specified dependency object. </summary>
      <returns>The owning <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" />.</returns>
      <param name="dependencyObject">The <see cref="T:System.Windows.DependencyObject" /> to get the property from.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.InlineEditorTemplate">
      <summary>Gets the most appropriate <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.InlineEditorTemplate" /> for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" />. </summary>
      <returns>A <see cref="T:System.Windows.DataTemplate" /> that represents the most appropriate <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.InlineEditorTemplate" /> for the current <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.InlineRowTemplate">
      <summary>Gets or sets the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.InlineRowTemplate" /> for the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" />. </summary>
      <returns>A <see cref="T:System.Windows.Controls.ControlTemplate" /> that represents the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.InlineRowTemplate" /> for the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" />.</returns>
    </member>
    <member name="F:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.InlineRowTemplateProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.InlineRowTemplate" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.InlineRowTemplate" /> dependency property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.MatchesFilter">
      <summary>Gets the value for <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.MatchesFilter" /> stored in the contained <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" />. </summary>
      <returns>The value for <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.MatchesFilter" /> stored in the contained <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" />.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.OnPropertyChanged(System.String)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.PropertyChanged" /> event.</summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.PropertyChanged" /> event.</summary>
      <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.OpenDialogWindow">
      <summary>Gets the command that is raised when the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ActiveEditMode" /> property is changed to <see cref="F:Microsoft.Windows.Design.PropertyEditing.PropertyContainerEditMode.Dialog" />. </summary>
      <returns>A <see cref="T:System.Windows.Input.RoutedCommand" /> that is raised when the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.ActiveEditMode" /> property is changed to <see cref="F:Microsoft.Windows.Design.PropertyEditing.PropertyContainerEditMode.Dialog" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.OwningPropertyContainer">
      <summary>Gets or sets the owning <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" /> that can be used by UI elements of <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor" /> types to gain access to their parent <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" />. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" /> that represents the owning <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" />.</returns>
    </member>
    <member name="F:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.OwningPropertyContainerProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.OwningPropertyContainer" /> attached property. </summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.OwningPropertyContainer" /> attached property.</returns>
    </member>
    <member name="E:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.PropertyChanged">
      <summary>Occurs when a property is changed.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.PropertyEntry">
      <summary>Gets or sets the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" /> instance on which this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" /> operates. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" /> instance on which this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" /> operates.</returns>
    </member>
    <member name="E:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.PropertyEntryChanged">
      <summary>Occurs when the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.PropertyEntry" /> property is changed.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.PropertyEntryProperty">
      <summary>Identifies the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.PropertyEntry" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.PropertyEntry" /> dependency property.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.SetOwningPropertyContainer(System.Windows.DependencyObject,Microsoft.Windows.Design.PropertyEditing.PropertyContainer)">
      <summary>Sets the value of the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyContainer.OwningPropertyContainer" /> attached property for a specified dependency object. </summary>
      <param name="dependencyObject">The <see cref="T:System.Windows.DependencyObject" /> to set the property on.</param>
      <param name="value">The owning <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" />.</param>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainerEditMode">
      <summary>Defines the different edit modes for a <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" />.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.PropertyEditing.PropertyContainerEditMode.Inline">
      <summary>Inline editor.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.PropertyEditing.PropertyContainerEditMode.ExtendedPopup">
      <summary>Extended editor that is displayed over the Properties window.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.PropertyEditing.PropertyContainerEditMode.ExtendedPinned">
      <summary>Extended editor that is pinned into place within the Properties window.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.PropertyEditing.PropertyContainerEditMode.Dialog">
      <summary>Dialog box editor.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry">
      <summary>Represents a property.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" /> class. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.#ctor(Microsoft.Windows.Design.PropertyEditing.PropertyValue)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" /> class that acts as a sub-property of the specified <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />. </summary>
      <param name="parentValue">The parent <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />. Root properties do not have a parent <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.ApplyFilter(Microsoft.Windows.Design.PropertyEditing.PropertyFilter)">
      <summary>Determines if the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" /> matches a filter and stores the information. </summary>
      <param name="filter">The filter to compare to.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.CategoryName">
      <summary>When overridden in a derived class, gets the name of the category that this property resides in.</summary>
      <returns>The name of the category that this property resides in.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.Context">
      <summary>When overridden in a derived class, gets the current <see cref="T:Microsoft.Windows.Design.EditingContext" /> instance.</summary>
      <returns>The current <see cref="T:Microsoft.Windows.Design.EditingContext" /> instance.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.CreatePropertyValueInstance">
      <summary>When overridden in a derived class, used by the host infrastructure to create a new host-specific <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> instance.</summary>
      <returns>A new <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> instance.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.Description">
      <summary>When overridden in a derived class, gets the description of the encapsulated property.</summary>
      <returns>The description of the encapsulated property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.DisplayName">
      <summary>Gets the display name for the property. </summary>
      <returns>The display name for the property.</returns>
    </member>
    <member name="E:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.FilterApplied">
      <summary>Occurs when a <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyFilter" /> is changed through a call to the <see cref="M:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.ApplyFilter(Microsoft.Windows.Design.PropertyEditing.PropertyFilter)" /> method.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.HasStandardValues">
      <summary>Gets a value indicating whether there are standard values for this property. </summary>
      <returns>true if there are standard values for this property; otherwise, false. </returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.Identifier">
      <summary>When overridden in a derived class, gets an identifier that uniquely identifies this property type and name on the current platform.</summary>
      <returns>An identifier that uniquely identifies this property type and name on the current platform.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.IsAdvanced">
      <summary>When overridden in a derived class, gets a value indicating whether the encapsulated property is an advanced property.</summary>
      <returns>true if the encapsulated property is an advanced property; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.IsReadOnly">
      <summary>When overridden in a derived class, gets a value indicating whether the encapsulated property is read-only.</summary>
      <returns>true if the encapsulated property is read-only; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.MatchesFilter">
      <summary>Gets or sets a value indicating whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" /> matches a filter.</summary>
      <returns>true if the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" /> matches the filter; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.MatchesPredicate(Microsoft.Windows.Design.PropertyEditing.PropertyFilterPredicate)">
      <summary>Indicates whether a <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" /> matches a predicate.</summary>
      <returns>true if the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" /> matches the predicate; otherwise, false.</returns>
      <param name="predicate">The predicate to compare to.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.ModelProperties">
      <summary>When overridden in a derived class, gets the collection of model properties for this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" />.</summary>
      <returns>The collection of model properties for this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" />.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.OnFilterApplied(Microsoft.Windows.Design.PropertyEditing.PropertyFilter)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.PropertyEditing.IPropertyFilterTarget.FilterApplied" /> event.</summary>
      <param name="filter">The filter that is being applied.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.PropertyChanged" /> event.</summary>
      <param name="e">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.OnPropertyChanged(System.String)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.PropertyChanged" /> event.</summary>
      <param name="propertyName">The name of the property is changing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.ParentValue">
      <summary>Gets the parent <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />. </summary>
      <returns>The parent <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />.</returns>
    </member>
    <member name="E:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.PropertyName">
      <summary>When overridden in a derived class, gets the name of the encapsulated property.</summary>
      <returns>The name of the encapsulated property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.PropertyType">
      <summary>When overridden in a derived class, gets the type of the encapsulated property.</summary>
      <returns>The type of the encapsulated property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.PropertyValue">
      <summary>Gets the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> (data model) for this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" />.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> for this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.PropertyValueEditor">
      <summary>When overridden in a derived class, gets the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor" /> that will be used to edit this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" />. </summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor" /> that will be used to edit this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntry.StandardValues">
      <summary>When overridden in a derived class, gets the standard values that the encapsulated property supports.</summary>
      <returns>A <see cref="T:System.Collections.ICollection" /> of standard values that the encapsulated property supports.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntryCollection">
      <summary>Represents a collection of <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" /> instances for sub-properties of a given <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" />.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyEntryCollection.#ctor(Microsoft.Windows.Design.PropertyEditing.PropertyValue)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntryCollection" /> class. </summary>
      <param name="parentValue">The parent <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parentValue" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntryCollection.Count">
      <summary>When overridden in a derived class, gets the number of <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" /> instances in this collection.</summary>
      <returns>The number of <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" /> instances in this collection.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyEntryCollection.GetEnumerator">
      <summary>When overridden in a derived class, returns an <see cref="T:System.Collections.IEnumerator" /> of all the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" /> instances in this collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntryCollection.Item(System.String)">
      <summary>When overridden in a derived class, gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" /> from this collection of the specified name. </summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyEntry" /> instance of the specified name or null if it does not exist.</returns>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyEntryCollection.ParentValue">
      <summary>Gets the parent <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> that represents the parent.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyEntryCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.PropertyFilter">
      <summary>Used as part of the searching and filtering functionality that may be provided by the property editing host. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyFilter.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Windows.Design.PropertyEditing.PropertyFilterPredicate})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyFilter" /> class.</summary>
      <param name="predicates">An <see cref="T:System.Collections.IEnumerable" /> collection of predicates.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyFilter.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyFilter" /> class. </summary>
      <param name="filterText">String representation of predicates. The predicates are space delimited.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyFilter.IsEmpty">
      <summary>Gets a value indicating whether <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyFilter" /> has any predicates.</summary>
      <returns>true if this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyFilter" /> does not have any predicates; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyFilter.Match(Microsoft.Windows.Design.PropertyEditing.IPropertyFilterTarget)">
      <summary>Compares this filter with a particular filter target. </summary>
      <returns>true if there are no predicates or if one or more predicates match the filter target; otherwise, false.</returns>
      <param name="target">Target to compare with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.</exception>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.PropertyFilterAppliedEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Windows.Design.PropertyEditing.IPropertyFilterTarget.FilterApplied" /> event.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyFilterAppliedEventArgs.#ctor(Microsoft.Windows.Design.PropertyEditing.PropertyFilter)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyFilterAppliedEventArgs" /> class. </summary>
      <param name="filter">The <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyFilter" /> that was applied.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyFilterAppliedEventArgs.Filter">
      <summary>Gets the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyFilter" /> that was applied.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyFilter" /> that was applied.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.PropertyFilterPredicate">
      <summary>Represents a predicate for search and filtering.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyFilterPredicate.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyFilterPredicate" /> class.</summary>
      <param name="matchText">The predicate string.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matchText" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyFilterPredicate.Match(System.String)">
      <summary>Returns a value indicating whether a case insensitive match of the predicate string is contained within the target string.</summary>
      <returns>true if a case insensitive match of the predicate string is contained within the target string; otherwise, false.</returns>
      <param name="target">The target string  to compare with the predicate string.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyFilterPredicate.MatchText">
      <summary>Gets an upper-case version of the predicate string.</summary>
      <returns>An upper-case version of the predicate string.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.PropertyMarker">
      <summary>A control that appears with a property value in the property window and can contain information about the property value. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyMarker.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyMarker" /> class.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.PropertyOrder">
      <summary>Used to set the order in which properties appear in a category, or in a list of sub-properties. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyOrder.CreateAfter(Microsoft.Windows.Design.PropertyEditing.PropertyOrder)">
      <summary>Creates a <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyOrder" /> object that is added after the specified token.</summary>
      <returns>A new <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyOrder" /> object.</returns>
      <param name="reference">The reference token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reference" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyOrder.CreateBefore(Microsoft.Windows.Design.PropertyEditing.PropertyOrder)">
      <summary>Creates a <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyOrder" /> object that is added before the specified token.</summary>
      <returns>A new <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyOrder" /> object.</returns>
      <param name="reference">The reference token.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reference" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyOrder.Default">
      <summary>Gets the system-defined default order position.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyOrder" /> instance that represents the default order position.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyOrder.Early">
      <summary>Gets the system-defined early order position.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyOrder" /> instance that represents the system-defined early order position.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyOrder.Late">
      <summary>Gets the system-defined late order position.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyOrder" /> instance that represents the system-defined late order position.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.PropertyOrderAttribute">
      <summary>This attribute is attached to a property to specify the sort order of a property in a property browser. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyOrderAttribute.#ctor(Microsoft.Windows.Design.PropertyEditing.PropertyOrder)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyOrderAttribute" /> class.</summary>
      <param name="order">The <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyOrder" /> to assign the property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="order" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyOrderAttribute.Order">
      <summary>Gets the associated <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyOrder" />.</summary>
      <returns>The priority in which to display the property in the property browser.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue">
      <summary>Represents the value of a property.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValue.#ctor(Microsoft.Windows.Design.PropertyEditing.PropertyEntry)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> class.</summary>
      <param name="parentProperty">The property entry that is the parent of this property value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parentProperty" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.CanConvertFromString">
      <summary>When overridden in a derived class, gets a value indicating whether <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.Value" /> can be converted from a string.</summary>
      <returns>true if <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.Value" /> can be converted from a string; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.CatchExceptions">
      <summary>Gets a value indicating how to handle exceptions that occur during the get and set methods of the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.Value" /> and <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.StringValue" /> properties.</summary>
      <returns>true if the exception should be caught; false if the exception should be propagated to the caller.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValue.ClearValue">
      <summary>When overridden in a derived class, clears the value so that it is not set.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.Collection">
      <summary>When overridden in a derived class, gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueCollection" /> of objects that represents the value of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />.</summary>
      <returns>A collection of objects that represents the value of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValue.ConvertStringToValue(System.String)">
      <summary>When overridden in a derived class, attempts to convert the specified <see cref="T:System.String" /> to an <see cref="T:System.Object" />.</summary>
      <returns>An object that represents <paramref name="value" />.</returns>
      <param name="value">The string to convert.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValue.ConvertValueToString(System.Object)">
      <summary>When overridden in a derived class, attempts to convert the specified <see cref="T:System.Object" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string that represents <paramref name="value" />.</returns>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValue.GetValueCore">
      <summary>When overridden in a derived class, returns the <see cref="T:System.Object" /> that should be returned by the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.Value" /> property.</summary>
      <returns>The object that should be returned by the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.Value" /> property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.HasSubProperties">
      <summary>When overridden in a derived class, gets a value indicating whether this property value supports sub-properties.</summary>
      <returns>true if the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> supports sub-properties; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.IsCollection">
      <summary>When overridden in a derived class, gets a value indicating whether this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> is a collection.</summary>
      <returns>true if <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> is a collection; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.IsDefaultValue">
      <summary>When overridden in a derived class, gets a value indicating whether the current <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.Value" /> is the default value for the property.</summary>
      <returns>true if <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.Value" /> is the default value for the property; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.IsMixedValue">
      <summary>When overridden in a derived class, gets a value indicating whether this property value represents a property for multiple objects that have more than one value.</summary>
      <returns>true if this value represents a property for multiple objects that have more than one value; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValue.NotifyRootValueChanged">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.PropertyEditing.PropertyValue.RootValueChanged" /> event.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValue.NotifySubPropertyChanged">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.PropertyEditing.PropertyValue.SubPropertyChanged" /> event. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValue.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.PropertyEditing.PropertyValue.PropertyChanged" /> event with the specified <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />. </summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValue.OnPropertyChanged(System.String)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.PropertyEditing.PropertyValue.PropertyChanged" /> event with the specified string.</summary>
      <param name="propertyName">The name of the property that is changing.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValue.OnPropertyValueException(Microsoft.Windows.Design.PropertyEditing.PropertyValueExceptionEventArgs)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.PropertyEditing.PropertyValue.PropertyValueException" /> event.</summary>
      <param name="e">The data for the event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.ParentProperty">
      <summary>Gets the parent of this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />.</summary>
      <returns>The parent of this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />.</returns>
    </member>
    <member name="E:Microsoft.Windows.Design.PropertyEditing.PropertyValue.PropertyChanged">
      <summary>Represents the method that handles the <see cref="E:Microsoft.Windows.Design.PropertyEditing.PropertyValue.PropertyChanged" /> event of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />.</summary>
    </member>
    <member name="E:Microsoft.Windows.Design.PropertyEditing.PropertyValue.PropertyValueException">
      <summary>Represents the method that handles the <see cref="E:Microsoft.Windows.Design.PropertyEditing.PropertyValue.PropertyValueException" /> event of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />.</summary>
    </member>
    <member name="E:Microsoft.Windows.Design.PropertyEditing.PropertyValue.RootValueChanged">
      <summary>Represents the method that handles the <see cref="E:Microsoft.Windows.Design.PropertyEditing.PropertyValue.RootValueChanged" /> event of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValue.SetValueCore(System.Object)">
      <summary>When overridden in a derived class, sets the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.Value" /> property to the specified <see cref="T:System.Object" />.</summary>
      <param name="value">The object to set as the value of the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.Value" /> property.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.Source">
      <summary>When overridden in a derived class, gets a <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueSource" /> that contains information about the source of this property value.</summary>
      <returns>Information about the source of this property value.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.StringValue">
      <summary>Gets or sets the value of this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> as a <see cref="T:System.String" />.</summary>
      <returns>A string that contains the value of this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.SubProperties">
      <summary>When overridden in a derived class, gets the sub-properties of this property value.</summary>
      <returns>A collection of sub-properties.</returns>
    </member>
    <member name="E:Microsoft.Windows.Design.PropertyEditing.PropertyValue.SubPropertyChanged">
      <summary>Represents the method that handles the <see cref="E:Microsoft.Windows.Design.PropertyEditing.PropertyValue.SubPropertyChanged" /> event of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValue.ValidateValue(System.Object)">
      <summary>When overridden in a derived class, checks that the specified <see cref="T:System.Object" /> contains a valid value before setting the <see cref="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.Value" /> property to it.</summary>
      <param name="valueToValidate">The object to check for a valid value.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValue.Value">
      <summary>Gets or sets the value of this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />.</summary>
      <returns>An object that contains the value of this <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueCollection">
      <summary>Represents a collection of <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> instances. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValueCollection.#ctor(Microsoft.Windows.Design.PropertyEditing.PropertyValue)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueCollection" /> class.</summary>
      <param name="parentValue">The parent <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />. This will be the property whose type is a collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parentValue" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValueCollection.Add(System.Object)">
      <summary>When overridden in a derived class, adds the specified object into the collection.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> for the added object.</returns>
      <param name="value">The object to add to the collection</param>
    </member>
    <member name="E:Microsoft.Windows.Design.PropertyEditing.PropertyValueCollection.CollectionChanged">
      <summary>Occurs when the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueCollection" /> changes.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValueCollection.Count">
      <summary>When overridden in a derived class, gets the number of items in the collection.</summary>
      <returns>The number of items in the collection.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValueCollection.GetEnumerator">
      <summary>When overridden in a derived class, returns a strongly typed <see cref="T:System.Collections.IEnumerator" /> for the collection of <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> objects.</summary>
      <returns>An enumeration of <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> objects.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValueCollection.Insert(System.Object,System.Int32)">
      <summary>When overridden in a derived class, inserts the specified object into the collection at the specified index.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> for the inserted object.</returns>
      <param name="value">The object to insert into the collection.</param>
      <param name="index">The index of where to insert the object.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValueCollection.Item(System.Int32)">
      <summary>When overridden in a derived class, gets the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> at the specified index.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> at the specified index.</returns>
      <param name="index">The index of a <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> in the collection.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValueCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.PropertyEditing.PropertyValueCollection.CollectionChanged" /> event.</summary>
      <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValueCollection.ParentValue">
      <summary>Gets the parent <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> that represents the parent.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValueCollection.Remove(Microsoft.Windows.Design.PropertyEditing.PropertyValue)">
      <summary>When overridden in a derived class, removes the specified <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> from the collection. </summary>
      <returns>true if the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> was removed successfully; otherwise, false.</returns>
      <param name="propertyValue">The <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> to remove from the collection.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValueCollection.RemoveAt(System.Int32)">
      <summary>When overridden in a derived class, removes the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> from the collection at the specified index. </summary>
      <param name="index">The index of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> to remove.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValueCollection.SetIndex(System.Int32,System.Int32)">
      <summary>When overridden in a derived class, swaps the order of objects in the collection. </summary>
      <param name="currentIndex">The index of the first object.</param>
      <param name="newIndex">The index of the second object.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An enumeration of <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> objects.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor">
      <summary>Container for any and all inline editor logic for properties. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor.#ctor(System.Windows.DataTemplate)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor" /> class.</summary>
      <param name="inlineEditorTemplate">The <see cref="T:System.Windows.DataTemplate" /> that is used for an inline editor. This <see cref="T:System.Windows.DataTemplate" /> has its <see cref="P:System.Windows.FrameworkElement.DataContext" /> set to a <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor.CreateEditorAttribute(Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor)">
      <summary>Utility method that creates a new <see cref="T:System.ComponentModel.EditorAttribute" /> for the specified <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor" /> type.</summary>
      <returns>A new <see cref="T:System.ComponentModel.EditorAttribute" /> for the specified <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor" /> type.</returns>
      <param name="editor">
        <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor" /> instance for which to create the new <see cref="T:System.ComponentModel.EditorAttribute" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor.CreateEditorAttribute(System.Type)">
      <summary>Utility method that creates a new <see cref="T:System.ComponentModel.EditorAttribute" /> for the specified <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor" /> type.</summary>
      <returns>A new <see cref="T:System.ComponentModel.EditorAttribute" /> for the specified <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor" /> type.</returns>
      <param name="propertyValueEditorType">
        <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor" /> type for which to create the new <see cref="T:System.ComponentModel.EditorAttribute" />.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditor.InlineEditorTemplate">
      <summary>Gets or sets the <see cref="T:System.Windows.DataTemplate" /> that is used for an inline editor. </summary>
      <returns>A <see cref="T:System.Windows.DataTemplate" /> that defines the inline editor.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditorCommands">
      <summary>Provides standard commands that control the behavior of a property window when the user edits properties. </summary>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditorCommands.AbortTransaction">
      <summary>Gets a <see cref="T:System.Windows.Input.RoutedCommand" /> that represents a request to cancel a transaction associated with a property edit.</summary>
      <returns>A request to cancel a transaction associated with a property edit.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditorCommands.BeginTransaction">
      <summary>Gets a <see cref="T:System.Windows.Input.RoutedCommand" /> that represents a request to begin a new transaction associated with a property edit.</summary>
      <returns>A request to begin a new transaction associated with a property edit.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditorCommands.CommitTransaction">
      <summary>Gets a <see cref="T:System.Windows.Input.RoutedCommand" /> that represents a request to commit a transaction associated with a property edit.</summary>
      <returns>A request to commit a transaction associated with a property edit.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditorCommands.FinishEditing">
      <summary>Gets a <see cref="T:System.Windows.Input.RoutedCommand" /> that represents a notification to the host that a property edit has been completed. </summary>
      <returns>A notification to the host that a property edit has been completed.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditorCommands.ShowContextMenu">
      <summary>Gets a <see cref="T:System.Windows.Input.RoutedCommand" /> that represents a request to display a context menu in the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" />.</summary>
      <returns>A request to display a context menu in the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyContainer" />.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditorCommands.ShowDialogEditor">
      <summary>Gets a <see cref="T:System.Windows.Input.RoutedCommand" /> that represents a request to display a dialog box editor for a property.</summary>
      <returns>A request to display a dialog box editor for a property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditorCommands.ShowErrorMessage">
      <summary>Gets a <see cref="T:System.Windows.Input.RoutedCommand" /> that represents a request to show a validation error message.</summary>
      <returns>A request to show a validation error message.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditorCommands.ShowExtendedPinnedEditor">
      <summary>Gets a <see cref="T:System.Windows.Input.RoutedCommand" /> that represents a request to display a pinned editor for a property.</summary>
      <returns>A request to display a pinned editor for a property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditorCommands.ShowExtendedPopupEditor">
      <summary>Gets a <see cref="T:System.Windows.Input.RoutedCommand" /> that represents a request to display an extended editor for a property.</summary>
      <returns>A request to display an extended editor for a property.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValueEditorCommands.ShowInlineEditor">
      <summary>Gets a <see cref="T:System.Windows.Input.RoutedCommand" /> that represents a request to display an inline editor for a property.</summary>
      <returns>A request to display an inline editor for a property.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueExceptionEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Windows.Design.PropertyEditing.PropertyValue.PropertyValueException" /> event.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValueExceptionEventArgs.#ctor(System.String,Microsoft.Windows.Design.PropertyEditing.PropertyValue,Microsoft.Windows.Design.PropertyEditing.PropertyValueExceptionSource,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueExceptionEventArgs" /> class.</summary>
      <param name="message">A message that indicates what failed.</param>
      <param name="value">The <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> for which the exception occurred.</param>
      <param name="source">The source that generated this exception (get or set).</param>
      <param name="exception">The inner exception.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValueExceptionEventArgs.Exception">
      <summary>Gets the contained exception.</summary>
      <returns>An <see cref="T:System.Exception" /> that is the contained exception.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValueExceptionEventArgs.Message">
      <summary>Gets the message that indicates what failed.</summary>
      <returns>The message that indicates what failed.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValueExceptionEventArgs.PropertyValue">
      <summary>Gets the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> for which the exception is occurring.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> for which the exception is occurring.</returns>
    </member>
    <member name="P:Microsoft.Windows.Design.PropertyEditing.PropertyValueExceptionEventArgs.Source">
      <summary>Gets the source that generated the exception.</summary>
      <returns>A <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueExceptionSource" /> that generated the exception.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueExceptionSource">
      <summary>Indicates the source of the exception thrown by a <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValue" /> instance.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.PropertyEditing.PropertyValueExceptionSource.Get">
      <summary>Indicates that the exception occurred during a get operation.</summary>
    </member>
    <member name="F:Microsoft.Windows.Design.PropertyEditing.PropertyValueExceptionSource.Set">
      <summary>Indicates that the exception occurred during a set operation.</summary>
    </member>
    <member name="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueSource">
      <summary>Represents the source of a property value. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.PropertyEditing.PropertyValueSource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.PropertyEditing.PropertyValueSource" /> class. </summary>
    </member>
    <member name="T:Microsoft.Windows.Design.Services.AdapterService">
      <summary>Provides adapters for a specified item.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.AdapterService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Services.AdapterService" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.AdapterService.GetAdapter``1(System.Type)">
      <summary>Returns an adapter of the specified adapter type for the specified item. </summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.Interaction.Adapter" /> of type <paramref name="TAdapterType" /> for <paramref name="itemType" />.</returns>
      <param name="itemType">The item to get the adapter for.</param>
      <typeparam name="TAdapterType">The type of adapter.</typeparam>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.AdapterService.GetAdapter(System.Type,System.Type)">
      <summary>Returns an adapter of the specified adapter type for the specified item. </summary>
      <returns>An <see cref="T:Microsoft.Windows.Design.Interaction.Adapter" /> of type <paramref name="adapterType" /> for <paramref name="itemType" />.</returns>
      <param name="adapterType">The type of adapter to return.</param>
      <param name="itemType">The item to get the adapter for.</param>
    </member>
    <member name="T:Microsoft.Windows.Design.Services.BinaryResource">
      <summary>Represents a binary stream of information, such as a bitmap.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.BinaryResource.#ctor">
      <summary>When overridden in a derived class, initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Services.BinaryResource" /> class.</summary>
    </member>
    <member name="E:Microsoft.Windows.Design.Services.BinaryResource.Changed">
      <summary>When overridden in a derived class, occurs when the content of the stream changes.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Services.BinaryResource.FileUri">
      <summary>Gets a local file path of the stream. </summary>
      <returns>A <see cref="T:System.Uri" /> that represents a local file path of the stream; or null if the stream cannot be referenced as a local file. </returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Services.BinaryResource.IsResourceValid">
      <summary>Gets a value that indicates whether opening this resource is a valid operation.  </summary>
      <returns>true if opening this resource is a valid operation; otherwise, false. </returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.BinaryResource.OpenStream(System.IO.FileAccess)">
      <summary>When overridden in a derived class, opens a stream on the resource.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> on the resource.</returns>
      <param name="access">The <see cref="T:System.IO.FileAccess" /> to use when opening the resource. For example, <see cref="F:System.IO.FileAccess.Read" /> or <see cref="F:System.IO.FileAccess.Write" />.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Services.BinaryResource.StreamUri">
      <summary>When overridden in a derived class, gets a value representing the URI of the resource.</summary>
      <returns>The URI of the resource.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Services.ContextMenuService">
      <summary>A service that locates items to display on a context menu.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ContextMenuService.GetItems">
      <summary>Gets a list of menu items.</summary>
      <returns>An enumeration of currently applicable menu items.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Services.EventBindingService">
      <summary>Defines methods to create, remove, display and query the contents of the event handling class for the current editing context. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.EventBindingService.#ctor">
      <summary>When overridden in a derived class, initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Services.EventBindingService" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.EventBindingService.AddEventHandler(Microsoft.Windows.Design.Model.ModelEvent,System.String)">
      <summary>When overridden in a derived class, requests that a specified method be declared as handling a specified event.</summary>
      <returns>true if the method can be successfully declared in the code-behind file to handle the given event; otherwise, false.</returns>
      <param name="modelEvent">The event to handle.</param>
      <param name="methodName">The method to declare.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.EventBindingService.AllowClassNameForMethodName">
      <summary>When overridden in a derived class, determines whether a class name can be used in creating a unique method name in a language.</summary>
      <returns>true if a class name can be used in creating a unique method name in a language; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.EventBindingService.AppendStatements(Microsoft.Windows.Design.Model.ModelEvent,System.String,System.CodeDom.CodeStatementCollection)">
      <summary>Appends the specified collection of <see cref="T:System.CodeDom.CodeStatement" /> objects to the specified event handler.</summary>
      <param name="modelEvent">The event definition whose handler will have statements added.</param>
      <param name="methodName">The method name of the event handler.</param>
      <param name="statements">The collection of <see cref="T:System.CodeDom.CodeStatement" /> objects to append.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.EventBindingService.CreateMethod(Microsoft.Windows.Design.Model.ModelEvent,System.String)">
      <summary>When overridden in a derived class, creates a method that handles an event.</summary>
      <returns>true if the method is successfully created; otherwise, false.</returns>
      <param name="modelEvent">The event that <paramref name="methodName" /> handles.</param>
      <param name="methodName">The method to create.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.EventBindingService.CreateUniqueMethodName(Microsoft.Windows.Design.Model.ModelEvent)">
      <summary>When overridden in a derived class, returns a unique method name for an event handler.</summary>
      <returns>A unique event handler name. For example, Button1_Click or Button1_Click_1.</returns>
      <param name="modelEvent">The event for which to create a unique event handler name.</param>
    </member>
    <member name="E:Microsoft.Windows.Design.Services.EventBindingService.EventHandlerGenerated">
      <summary>Occurs when a method is associated with a <see cref="T:Microsoft.Windows.Design.Model.ModelEvent" /> as a result of a call to the <see cref="M:Microsoft.Windows.Design.Services.EventBindingService.AddEventHandler(Microsoft.Windows.Design.Model.ModelEvent,System.String)" /> method. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.EventBindingService.GetCompatibleMethods(Microsoft.Windows.Design.Model.ModelEvent)">
      <summary>When overridden in a derived class, returns the names of methods that are compatible with a specified event.</summary>
      <returns>The names of methods that are compatible with <paramref name="modelEvent" />.</returns>
      <param name="modelEvent">The event that the methods are compatible with.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.EventBindingService.GetMethodHandlers(Microsoft.Windows.Design.Model.ModelEvent)">
      <summary>When overridden in a derived class, returns a list of methods that handle a specified event.</summary>
      <returns>The list of methods that handle <paramref name="modelEvent" />.</returns>
      <param name="modelEvent">The event that is being handled.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.EventBindingService.IsExistingMethodName(Microsoft.Windows.Design.Model.ModelEvent,System.String)">
      <summary>When overridden in a derived class, determines whether a method name that handles a specified event already exists.</summary>
      <returns>true if the method name that handles <paramref name="modelEvent" /> already exists; otherwise, false.</returns>
      <param name="modelEvent">The event that <paramref name="methodName" /> handles.</param>
      <param name="methodName">The name of the method to check.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.EventBindingService.OnEventHandlerGenerated(Microsoft.Windows.Design.Model.ModelEvent,System.String)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.Services.EventBindingService.EventHandlerGenerated" /> event. </summary>
      <param name="modelEvent">The <see cref="T:Microsoft.Windows.Design.Model.ModelEvent" /> instance that was associated with <paramref name="methodName" />. </param>
      <param name="methodName">The method handler that was associated with the <paramref name="modelEvent" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.EventBindingService.RemoveHandle(Microsoft.Windows.Design.Model.ModelEvent,System.String)">
      <summary>When overridden in a derived class, requests that a specific method stop handling a specific event by removing it from a Handles clause.</summary>
      <returns>true if the event can be successfully removed from the method declaration in the code-behind file; otherwise, false.</returns>
      <param name="modelEvent">The event to stop <paramref name="methodName" /> from handling.</param>
      <param name="methodName">The method to stop handling <paramref name="modelEvent" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.EventBindingService.RemoveHandlesForName(System.String)">
      <summary>Removes the event handlers for the specified element. </summary>
      <returns>true if event handlers were removed; otherwise, false. </returns>
      <param name="elementName">The element to remove event handlers from.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.EventBindingService.RemoveMethod(Microsoft.Windows.Design.Model.ModelEvent,System.String)">
      <summary>When overridden in a derived class, requests that a specific method stop handling a specific event by removing it from an event handling class.</summary>
      <returns>true if <paramref name="methodName" /> is successfully removed from the event handling class; otherwise, false.</returns>
      <param name="modelEvent">The event to stop handling.</param>
      <param name="methodName">The method to stop handling <paramref name="modelEvent" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.EventBindingService.SetClassName(System.String)">
      <summary>When overridden in a derived class, identifies the methods that the binding service is referring to as belonging to the specified class.</summary>
      <param name="className">The name of the class that the methods belong to.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.EventBindingService.ShowMethod(Microsoft.Windows.Design.Model.ModelEvent,System.String)">
      <summary>When overridden in a derived class, attempts to display the specified method to the user.</summary>
      <returns>true if the method is successfully displayed to the user; otherwise, false.</returns>
      <param name="modelEvent">The event that <paramref name="methodName" /> handles.</param>
      <param name="methodName">The method to display.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.EventBindingService.ValidateMethodName(Microsoft.Windows.Design.Model.ModelEvent,System.String)">
      <summary>When overridden in a derived class, determines whether a method name is a valid method name and raises an exception if it is not.</summary>
      <param name="modelEvent">The event that <paramref name="methodName" /> handles.</param>
      <param name="methodName">The name of the method to check.</param>
    </member>
    <member name="T:Microsoft.Windows.Design.Services.EventHandlerGeneratedEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Windows.Design.Services.EventBindingService.EventHandlerGenerated" /> event. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.EventHandlerGeneratedEventArgs.#ctor(Microsoft.Windows.Design.Model.ModelEvent,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Services.EventHandlerGeneratedEventArgs" /> class. </summary>
      <param name="modelEvent">The <see cref="T:Microsoft.Windows.Design.Model.ModelEvent" />  that received a new event handler. </param>
      <param name="methodName">The event handler associated with <paramref name="modelEvent" />.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Services.EventHandlerGeneratedEventArgs.MethodName">
      <summary>Gets the event handler that was associated with a <see cref="T:Microsoft.Windows.Design.Model.ModelEvent" />. </summary>
      <returns>A name of the event handler method.  </returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Services.EventHandlerGeneratedEventArgs.ModelEvent">
      <summary>Gets the <see cref="T:Microsoft.Windows.Design.Model.ModelEvent" /> that received a new event handler.</summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Model.ModelEvent" /> that received a new event handler.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Services.ExternalMarkupService">
      <summary>Defines methods for converting model items to markup text and for parsing markup text into model items.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ExternalMarkupService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Services.ExternalMarkupService" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ExternalMarkupService.Load(System.String,System.Collections.Generic.IEnumerable{System.Reflection.AssemblyName})">
      <summary>When overridden in a derived class, parses the specified markup text and returns a model item representing that text.</summary>
      <returns>A model item representing the markup.</returns>
      <param name="markup">A correctly formed XML document.</param>
      <param name="additionalReferences">Assembly names to use when parsing <paramref name="markup" />.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ExternalMarkupService.Save(Microsoft.Windows.Design.Model.ModelItem,System.Collections.Generic.IEnumerable{System.Reflection.AssemblyName}@)"></member>
    <member name="T:Microsoft.Windows.Design.Services.ExternalResourceService">
      <summary>Provides access to resources external to the markup file. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ExternalResourceService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Services.ExternalResourceService" /> class. </summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Services.ExternalResourceService.ApplicationModel">
      <summary>When overridden in a derived class, gets the application model. </summary>
      <returns>The application model or null if there is no application model for this context.</returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ExternalResourceService.GetBinaryResource(System.Uri)">
      <summary>When overridden in a derived class, gets the specified URI in the project system and returns its contents as a binary blob. </summary>
      <returns>The resource specified by <paramref name="uri" />. </returns>
      <param name="uri">The URI to get the resource for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ExternalResourceService.GetModelResource(System.Uri)">
      <summary>When overridden in a derived class, gets the specified URI in the project system, loads it, and returns a <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> representing the root. </summary>
      <returns>The model resource specified by <paramref name="uri" />. </returns>
      <param name="uri">The URI to get the resource for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null.</exception>
    </member>
    <member name="P:Microsoft.Windows.Design.Services.ExternalResourceService.ResourceUris">
      <summary>When overridden in a derived class, gets an enumeration of URI values that can be loaded as resources.</summary>
      <returns>An enumeration of URI values. </returns>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ExternalResourceService.TranslateStreamUri(System.Uri)">
      <summary>When overridden in a derived class, translates a local URI back to its original URI. </summary>
      <returns>The URI that corresponds with <paramref name="streamUri" />.</returns>
      <param name="streamUri">The URI to translate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="streamUri" /> is null.</exception>
    </member>
    <member name="T:Microsoft.Windows.Design.Services.ICodeInjectionService">
      <summary>Creates a method in the code behind for a user's XAML file and enables appending statements to the method.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ICodeInjectionService.AppendStatements(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.Int32)">
      <summary>Appends a collection of CodeDOM statements to the specified event handler. </summary>
      <param name="method">The method definition that is searched to append statements to.</param>
      <param name="statements">A list of CodeDOM statements to append to the end of the method.</param>
      <param name="relativePosition">The line number to insert the statements. </param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ICodeInjectionService.CreateMethod(System.CodeDom.CodeMemberMethod)">
      <summary>Creates a method with the specified signature. </summary>
      <returns>true if the method was created; otherwise, false. </returns>
      <param name="method">A <see cref="T:System.CodeDom.CodeMemberMethod" /> that specifies the signature. </param>
    </member>
    <member name="T:Microsoft.Windows.Design.Services.ModelChangedEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Windows.Design.Services.ModelService.ModelChanged" /> event.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ModelChangedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Services.ModelChangedEventArgs" /> class.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Services.ModelChangedEventArgs.ItemsAdded">
      <summary>Gets an enumeration of objects that have been added to the editing model.</summary>
      <returns>An enumeration of <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> objects that have been added to the editing model. </returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Services.ModelChangedEventArgs.ItemsRemoved">
      <summary>Gets an enumeration of objects that have been removed from the editing model.</summary>
      <returns>An enumeration of <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> objects that have been removed from the editing model. </returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Services.ModelChangedEventArgs.PropertiesChanged">
      <summary>Gets an enumeration of properties that have been changed in the editing model.</summary>
      <returns>An enumeration of <see cref="T:Microsoft.Windows.Design.Model.ModelProperty" /> objects that represent changed properties in the editing model. </returns>
    </member>
    <member name="P:Microsoft.Windows.Design.Services.ModelChangedEventArgs.PropertyNamesChanged">
      <summary>Gets an enumeration of property names that have been changed in the editing model.</summary>
      <returns>An enumeration of <see cref="T:System.String" /> objects that represent the names of the changed properties.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Services.ModelResource">
      <summary>Represents an external resource that contains a model item. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ModelResource.#ctor">
      <summary>When overridden in a derived class, initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Services.ModelResource" /> class.</summary>
    </member>
    <member name="E:Microsoft.Windows.Design.Services.ModelResource.Changed">
      <summary>When overridden in a derived class, occurs when the model item changes.</summary>
    </member>
    <member name="P:Microsoft.Windows.Design.Services.ModelResource.ModelItem">
      <summary>When overridden in a derived class, gets a value representing the model item of the resource.</summary>
      <returns>The model item of the external resource.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Services.ModelService">
      <summary>Provides the main entry point that the designer uses to obtain the editing model. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ModelService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Services.ModelService" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ModelService.ConvertItem(Microsoft.Windows.Design.Model.ModelItem)">
      <summary>Converts a <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> created in another designer to a <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> for this designer.</summary>
      <returns>The converted item, associated with this designer.</returns>
      <param name="item">The item to convert.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ModelService.CreateItem(System.Object)">
      <summary>When overridden in a derived class, creates a model item that is a deep copy of the specified instance.</summary>
      <returns>A new model item that is a clone of the existing item.</returns>
      <param name="item">The item to wrap.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ModelService.CreateItem(System.Type,Microsoft.Windows.Design.Model.CreateOptions,System.Object[])">
      <summary>When overridden in a derived class, creates a <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> object for a specified type. </summary>
      <returns>A newly created model item.</returns>
      <param name="itemType">The type of item to create.</param>
      <param name="options">Creation options. You can specify if you want to initialize default values for an item.</param>
      <param name="arguments">An array of arguments to pass to the constructor of the item.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="itemType" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ModelService.CreateStaticMemberItem(System.Type,System.String)">
      <summary>When overridden in a derived class, creates a new model item that represents the value of a static member of the specified class.</summary>
      <returns>A newly created model item that represents a static member of <paramref name="type" />. </returns>
      <param name="type">The type that contains the static member being referenced.</param>
      <param name="memberName">The name of the static member being referenced.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ModelService.Find(Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Metadata.TypeIdentifier)">
      <summary>When overridden in a derived class, finds matching model items for a specified starting point.</summary>
      <returns>An enumeration of model items matching the query.</returns>
      <param name="startingItem">The model item to start the search. Items above this item in the hierarchy will be ignored. This item, and any item below it in the hierarchy, are included in the search. If this parameter is null, the root is used.</param>
      <param name="typeIdentifier">An identifier for the type of object to find.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ModelService.Find(Microsoft.Windows.Design.Model.ModelItem,System.Predicate{System.Type})">
      <summary>When overridden in a derived class, finds matching model items for a specified starting point. </summary>
      <returns>An enumeration of model items matching the query.</returns>
      <param name="startingItem">The model item to start the search. Items above this item are ignored. This item, and any item below it in the hierarchy, are included in the search. If this parameter is null, the root is used.</param>
      <param name="match">A predicate that allows more complex type matching to be used. For example, the predicate could return true for both the <see cref="T:System.Windows.FrameworkElement" /> and <see cref="T:System.Windows.FrameworkContentElement" /> types.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ModelService.Find(Microsoft.Windows.Design.Model.ModelItem,System.Type)">
      <summary>When overridden in a derived class, finds matching model items for a specified starting point.</summary>
      <returns>An enumeration of model items matching the query.</returns>
      <param name="startingItem">The model item to start the search. Items above this item will be ignored. This item, and any item below it in the hierarchy, are included in the search. If this parameter is null, the root is used.</param>
      <param name="type">The type of the object to find. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ModelService.FromName(Microsoft.Windows.Design.Model.ModelItem,System.String)">
      <summary>Finds the model item in the specified scope with the specified name.</summary>
      <returns>A model item whose name matches <paramref name="name" />, or null if no match was found.</returns>
      <param name="scope">An optional scope to search.</param>
      <param name="name">The name of the item to locate.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ModelService.FromName(Microsoft.Windows.Design.Model.ModelItem,System.String,System.StringComparison)">
      <summary>When overridden in a derived class, finds the model item in the specified scope with the specified name and comparison criteria.</summary>
      <returns>A model item whose name matches <paramref name="name" />, or null if no match was found.</returns>
      <param name="scope">An optional scope to search.</param>
      <param name="name">The name of the item to locate.</param>
      <param name="comparison">Specifies how the name is compared. The default is to compare with the <see cref="P:System.StringComparer.Ordinal" /> property.</param>
    </member>
    <member name="E:Microsoft.Windows.Design.Services.ModelService.ModelChanged">
      <summary>When overridden in a derived class, occurs when an item in the model has changed. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ModelService.ResolveType(Microsoft.Windows.Design.Metadata.TypeIdentifier)">
      <summary>Resolves the specified <see cref="T:Microsoft.Windows.Design.Metadata.TypeIdentifier" /> to a <see cref="T:System.Type" />.</summary>
      <returns>The type that matches the specified identifier, or null if the identifier cannot be resolved.</returns>
      <param name="typeIdentifier">The identifier to resolve.</param>
    </member>
    <member name="P:Microsoft.Windows.Design.Services.ModelService.Root">
      <summary>When overridden in a derived class, gets the root of the object hierarchy. </summary>
      <returns>The <see cref="T:Microsoft.Windows.Design.Model.ModelItem" /> which represents the root of the editing model tree.</returns>
    </member>
    <member name="T:Microsoft.Windows.Design.Services.ValueTranslationService">
      <summary>Provides a mechanism for capturing property changes that are made by the user in the designer and providing new values at design time.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ValueTranslationService.#ctor">
      <summary>When overridden in a derived class, initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Services.ValueTranslationService" /> class.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ValueTranslationService.GetProperties(System.Type)">
      <summary>When overridden in a derived class, returns an enumeration that contains the properties to translate for the specified type.</summary>
      <returns>An enumeration that contains the properties to translate for a specified type, if any.</returns>
      <param name="itemType">The type for which to get the properties to translate.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ValueTranslationService.HasValueTranslation(System.Type,Microsoft.Windows.Design.Metadata.PropertyIdentifier)">
      <summary>Determines whether the specified property should be translated for the specified type.</summary>
      <returns>true if the specified property should be translated for the specified type; otherwise, false.</returns>
      <param name="itemType">The type for which to determine whether <paramref name="property" /> should be translated.</param>
      <param name="identifier">An identifier for the property to be checked.</param>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ValueTranslationService.InvalidateProperty(Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Metadata.PropertyIdentifier)">
      <summary>Raises the <see cref="E:Microsoft.Windows.Design.Services.ValueTranslationService.PropertyInvalidated" /> event to indicate that the specified property was invalidated.</summary>
      <param name="item">The item that contains the invalidated property.</param>
      <param name="identifier">The invalidated property.</param>
    </member>
    <member name="E:Microsoft.Windows.Design.Services.ValueTranslationService.PropertyInvalidated">
      <summary>Occurs when a property needs to be invalidated because of a change in a dependent property.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ValueTranslationService.TranslatePropertyValue(System.Type,Microsoft.Windows.Design.Model.ModelItem,Microsoft.Windows.Design.Metadata.PropertyIdentifier,System.Object)">
      <summary>Calls custom logic to translate the specified property for the specified type and instance, and specifies the value to translate.</summary>
      <returns>The translated value.</returns>
      <param name="itemType">The type for which the user sets the property value in the designer.</param>
      <param name="item">The item that contains the property to be translated.</param>
      <param name="identifier">The property to be translated.</param>
      <param name="value">The value set by the user in the designer.</param>
    </member>
    <member name="T:Microsoft.Windows.Design.Services.ViewService">
      <summary>Associates visuals and editing model items.</summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ViewService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Windows.Design.Services.ViewService" /> class. </summary>
    </member>
    <member name="M:Microsoft.Windows.Design.Services.ViewService.GetModel(Microsoft.Windows.Design.Interaction.ViewItem)">
      <summary>When overridden in a derived class, gets the model corresponding to the specified view.</summary>
      <returns>The model corresponding to the specified view, or null if no model is found.</returns>
      <param name="view">The view to get the model for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="view" /> is null.</exception>
    </member>
    <member name="E:Microsoft.Windows.Design.Services.ViewService.LayoutUpdated">
      <summary>When overridden in a derived class, occurs when the layout of the view has been changed.</summary>
    </member>
  </members>
</doc>